{"version":3,"sources":["datepicker-tabs.js"],"names":["DatepickerTabs","selector","_this","this","options","arguments","length","undefined","_classCallCheck","_objectSpread","mode","displayType","multipleDays","multipleMonths","maxMonthSelection","startDate","minDate","maxDate","futureSaturdaysOnly","onDateChange","cookieName","dateFormat","position","containerId","forwardsYearsOffset","elements","document","querySelectorAll","zIndex","forEach","inputElement","index","instanceOptions","monthFormat","concat","Date","now","instances","push","_createInstance","instanceId","console","error","HTMLElement","containerElement","className","body","element","add","currentDate","selectedDates","selectedMonths","isVisible","month","getMonth","year","selectedMonth","selectedDate","getFullYear","value","parsedDates","parseDateInput","parsedMonths","parseMonthInput","map","m","init","_createClass","key","dateStr","format","_this2","formatTokens","DD","D","MMM","MMMM","MM","M","YYYY","YY","regexFormat","replace","regex","Object","keys","token","RegExp","source","match","day","groupCount","twoDigitYear","century","monthIndex","val","test","parseInt","currentYear","Math","floor","indexOf","_loop","monthNames","findIndex","toLowerCase","startsWith","parsedDate","isNaN","date","getTime","inputValue","str","trim","_this3","parseDate","filter","_this4","split","monthStr","dateStrings","numMatch","monthStrings","monthYearPattern","shortMonthName","substring","getDate","toString","slice","String","padStart","container","inputRect","containerHeight","showOnTop","result","scrollTop","top","getBoundingClientRect","offsetHeight","offsetWidth","innerHeight","bottom","pageXOffset","scrollLeft","window","pageYOffset","documentElement","left","right","containerWidth","positionPicker","spaceBelow","windowHeight","style","_this5","render","attachEvents","setupInputElement","hide","contains","e","target","_this6","updateInputValue","show","setAttribute","getAttribute","_this7","addEventListener","formattedDates","d","formatDate","join","classList","formattedMonths","stopPropagation","event","_this8","querySelector","setTimeout","resizeHandler","CustomEvent","dispatchEvent","display","removeEventListener","expiryDate","setDate","toUTCString","cookies","decodeURIComponent","cookie","i","name","savedMode","getModeCookie","maxYear","startYear","backwardsYearsOffset","endYear","minYear","max","setModeCookie","decodedCookie","minMonth","maxMonth","content","getYearsRange","title","textContent","tabsUI","monthTab","dayTab","innerHTML","remove","renderDayMode","renderMonthMode","createElement","isMonthSelectable","appendChild","prevMonthDays","getDay","yearsHtml","navHtml","daysHeaderHtml","dayNames","daysHtml","daysInMonth","today","firstDayOfMonth","renderYearSelector","isToday","isSelected","isDateSelected","compareDate","setHours","prevMonth","classes","daysInPrevMonth","isSaturday","isDisabled","Boolean","clickableAttr","daysFromNextMonth","html","renderSelectedDates","monthsHtml","isMonthSelected","isSelectable","currentMonth","monthAttrs","isThisMonth","renderSelectedMonths","_this$getYearsRange","_this9","formatted","_this10","item","dateObj","some","dayItems","yearSelector","tabs","tab","_this11","detail","prevMonthBtn","setFullYear","nextMonthBtn","setMonth","_dateStr$split$map","_dateStr$split$map2","_slicedToArray","Number","dayStr","di","selected","selectedEl","shift","splice","btn","removeButtons","multiple","dates","clearBtn","applyBtn","type","getMode","setDisplayType","Array","limit","enable","setMultiple","newInputElement","cloneNode","parentNode","replaceChild","removeChild","currentMode","setMaxDate","toLocaleString"],"mappings":"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","file":"datepicker-tabs.min.js","sourcesContent":["/**\n * DatepickerTabs\n *\n * A versatile date picker with day and month selection modes,\n * multiple selection support, and various formatting options.\n * Perfect for booking systems when users need to select multiple dates or months.\n *\n * @version 1.3.0\n *\n * FEATURES:\n * - Day and Month selection modes\n * - Single or multiple selection for both days and months\n * - Format customization\n * - Min/Max date constraints\n * - Max month selection limit\n * - Display type options: 'tabs', 'day', or 'month'\n * - Saturday-only selection for specific use cases\n * - Cookie-based mode persistence\n * - Tooltip overlay positioning\n * - Mobile-friendly design\n * - Automatic container creation\n * - Support for multiple instances with class selectors\n * - Customizable year range\n *\n * USAGE:\n *\n * 1. Basic initialization:\n * ```javascript\n * // Initialize on a single input with ID\n * const picker = new DatepickerTabs('#date-input');\n *\n * // Initialize on multiple inputs with class\n * const pickers = new DatepickerTabs('.date-input-class');\n * ```\n *\n * 2. With options:\n * ```javascript\n * const picker = new DatepickerTabs('#date-input', {\n *   // Basic configuration\n *   mode: 'month',                   // 'day' or 'month' mode\n *   displayType: 'tabs',             // Display as 'tabs', 'day', or 'month'\n *\n *   // Selection options\n *   multipleDays: false,             // Allow multiple day selection\n *   multipleMonths: true,            // Allow multiple month selection\n *   maxMonthSelection: 6,            // Max selectable months (when multipleMonths=true)\n *\n *   // Date range options\n *   startDate: null,                 // Initial selected date\n *   minDate: null,                   // Minimum selectable date\n *   maxDate: new Date(2026, 11, 31), // Maximum selectable date\n *   futureSaturdaysOnly: true,       // Only enable future Saturdays in day mode\n *\n *   // Localization\n *   monthNames: ['January', 'February', '...'], // Custom month names\n *   dayNames: ['Sun', 'Mon', '...'],           // Custom day names\n *   dateFormat: 'DD/MM/YYYY',        // Date display format\n *   monthFormat: 'MMM YYYY',         // Month display format\n *\n *   // UI settings\n *   position: 'bottom',              // 'bottom' or 'top' position\n *   zIndex: 9999,                    // Picker z-index\n *\n *   // Persistence\n *   cookieName: 'datepickerTabsMode',// Cookie name for mode storage\n *\n *   // Year range configuration\n *   backwardsYearsOffset: 5,         // Years to display before current year\n *   forwardsYearsOffset: 5,          // Years to display after current year\n *\n *   // Callbacks\n *   onDateChange: function(date) {   // Date selection callback\n *     console.log('Selected date:', date);\n *   },\n *\n *   // Custom container\n *   containerId: ''                  // Custom container ID for rendering\n * });\n * ```\n *\n * 3. Methods:\n * ```javascript\n * // Set date programmatically\n * picker.setDate(new Date());\n * picker.setDate([new Date(2025, 0, 1), new Date(2025, 1, 1)]); // Multiple dates\n * picker.setDate(null); // Clear selection\n *\n * // Get currently selected date(s)\n * const date = picker.getDate();\n *\n * // Mode and display type\n * picker.setMode('month'); // Switch mode ('day' or 'month')\n * picker.getMode(); // Get current mode\n * picker.setDisplayType('tabs'); // Change display type ('tabs', 'day', or 'month')\n *\n * // Selection options\n * picker.setMultipleDays(true); // Enable/disable multiple day selection\n * picker.setMultipleMonths(true); // Enable/disable multiple month selection\n * picker.setMultiple(true); // Enable both multiple days and months selection\n * picker.setMaxMonthSelection(3); // Set maximum number of selectable months\n *\n * // Format options\n * picker.setDateFormat('YYYY-MM-DD'); // Set date format\n * picker.setMonthFormat('MM/YYYY'); // Set month format\n *\n * // Date constraints\n * picker.setMinDate(new Date(2025, 0, 1)); // Set minimum selectable date\n * picker.setMaxDate(new Date(2025, 11, 31)); // Set maximum selectable date\n *\n * // Visibility\n * picker.show(); // Show the date picker\n * picker.hide(); // Hide the date picker\n *\n * // Cleanup\n * picker.destroy(); // Remove datepicker and clean up resources\n * ```\n */\n\n\n\nclass DatepickerTabs {\n  constructor(selector, options = {}) {\n    // Define default options\n    const defaults = {\n      mode: 'day', // 'day' or 'month'\n      displayType: 'tabs', // 'tabs', 'day', or 'month' - controls if tabs should be shown\n      multipleDays: false, // Allow multiple day selection\n      multipleMonths: false, // Allow multiple month selection\n      maxMonthSelection: null, // Maximum number of months that can be selected (when multipleMonths is true)\n      startDate: null,\n      minDate: null,\n      maxDate: null,\n      futureSaturdaysOnly: false, // Option for day mode to only enable Saturdays in the future\n      onDateChange: null, // Callback when date(s) change\n      monthNames: [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n      ],\n      dayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      cookieName: 'datepickerTabsMode', // Store mode in cookie\n      dateFormat: 'DD MMM YYYY', // Default format for display\n      monthFormat: 'MMM YYYY', // Default format for month display\n      position: 'bottom', // 'bottom' or 'top' - default position relative to input\n      zIndex: 9999, // z-index for the picker container\n      containerId: '', // Custom container ID to render calendar (if not provided, one will be generated)\n      backwardsYearsOffset: 5, // How many year offset render backwards in years selectbox. If now 2025 it will render from 2020\n      forwardsYearsOffset: 5, // How many year offset render forwards in years selectbox. If now 2025 it will render till 2030\n    };\n\n    // Merge default options with provided options\n    this.options = { ...defaults, ...options };\n    \n    // Store instance references \n    this.instances = [];\n    \n    // Check if selector refers to multiple elements\n    if (typeof selector === 'string') {\n      const elements = document.querySelectorAll(selector);\n      \n      // If multiple elements found, initialize on each one\n      if (elements.length > 1) {\n        elements.forEach((inputElement, index) => {\n          const instanceOptions = {...this.options};\n          // Create a unique container ID for each instance\n          const instanceId = `datepicker-container-${Date.now()}-${index}`;\n          this.instances.push(this._createInstance(inputElement, instanceOptions, instanceId));\n        });\n        \n        return this.instances;\n      } else if (elements.length === 1) {\n        // Single element - use it as input element\n        this.inputElement = elements[0];\n      } else {\n        console.error('DatepickerTabs: No elements found with selector:', selector);\n        return;\n      }\n    } else if (selector instanceof HTMLElement) {\n      // If an actual element is passed, use it directly\n      this.inputElement = selector;\n    } else {\n      console.error('DatepickerTabs: Invalid selector or element:', selector);\n      return;\n    }\n    \n    // Create container element for this instance\n    const containerId = this.options.containerId || `datepicker-container-${Date.now()}`;\n    this.containerId = containerId;\n    \n    // Create container element and add it to the DOM\n    this.containerElement = document.createElement('div');\n    this.containerElement.id = containerId;\n    this.containerElement.className = 'datepicker-tabs-container';\n    document.body.appendChild(this.containerElement);\n    \n    // Set the element where the datepicker will be rendered\n    this.element = this.containerElement;\n\n    // Add the wrapper class to the element for CSS scoping\n    this.element.classList.add('datepicker-tabs');\n\n    // Initialize properties\n    this.currentDate = new Date(this.options.startDate || new Date());\n    this.selectedDates = this.options.startDate ? [new Date(this.options.startDate)] : [];\n    this.selectedMonths = [];\n    this.isVisible = false;\n\n    // If displayType is 'day' or 'month', force the mode to match\n    if (this.options.displayType === 'day' || this.options.displayType === 'month') {\n      this.options.mode = this.options.displayType;\n    }\n\n    // If month mode and a start date is provided, extract the month and year\n    if (this.options.mode === 'month' && this.options.startDate) {\n      const startDate = new Date(this.options.startDate);\n      this.selectedMonths.push({\n        month: startDate.getMonth(),\n        year: startDate.getFullYear()\n      });\n    }\n    \n    // Initialize current date to selected month or date if available\n    if (this.selectedMonths.length > 0) {\n      const selectedMonth = this.selectedMonths[0];\n      this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n    } else if (this.selectedDates.length > 0) {\n      const selectedDate = this.selectedDates[0];\n      this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n    }\n\n    // Try to restore mode from cookie (only if displayType is 'tabs')\n    if (this.options.displayType === 'tabs') {\n      this.restoreModeFromCookie();\n    }\n\n    if (this.inputElement && this.inputElement.value && !this.options.startDate) {\n      if (this.options.mode === 'day') {\n        const parsedDates = this.parseDateInput(this.inputElement.value);\n        if (parsedDates.length > 0) {\n          this.selectedDates = parsedDates;\n          this.currentDate = new Date(parsedDates[0].getFullYear(), parsedDates[0].getMonth(), 1);\n        }\n      } else if (this.options.mode === 'month') {\n        const parsedMonths = this.parseMonthInput(this.inputElement.value);\n        if (parsedMonths.length > 0) {\n          this.selectedMonths = parsedMonths;\n          this.selectedDates = parsedMonths.map(m => new Date(m.year, m.month, 1));\n          this.currentDate = new Date(parsedMonths[0].year, parsedMonths[0].month, 1);\n        }\n      }\n    }\n\n    // Initialize the datepicker\n    this.init();\n  }\n\n\n  /**\n   * Returns a Date object if parsing is successful, null otherwise\n   */\n  parseDate(dateStr, format) {\n    if (!dateStr || !format) return null;\n\n    // Create mapping objects for format tokens\n    const formatTokens = {\n      'DD': /(\\d{2})/, // Day with leading zero\n      'D': /(\\d{1,2})/, // Day without leading zero\n      'MMM': /([A-Za-z]{3})/, // Short month name\n      'MMMM': /([A-Za-z]+)/, // Full month name\n      'MM': /(\\d{2})/, // Month with leading zero\n      'M': /(\\d{1,2})/, // Month without leading zero\n      'YYYY': /(\\d{4})/, // Four digit year\n      'YY': /(\\d{2})/ // Two digit year\n    };\n\n    // Escape special regex characters in format\n    let regexFormat = format.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n    // Replace format tokens with regex capture groups\n    Object.keys(formatTokens).forEach(token => {\n      regexFormat = regexFormat.replace(new RegExp(token, 'g'), formatTokens[token].source);\n    });\n\n    // Create final regex with anchors\n    const regex = new RegExp(`^${regexFormat}$`);\n    const match = dateStr.match(regex);\n\n    if (!match) return null;\n\n    // Extract date parts with a more robust approach\n    let day = 1, month = 0, year = new Date().getFullYear();\n\n    try {\n      // Process all capturing groups from the regex match\n      let groupCount = 1; // Skip first group which is the whole match\n\n      while (groupCount < match.length) {\n        const val = match[groupCount];\n\n        // Try to find which part of the date this group represents\n        // based on its format and value\n        if (/^\\d{4}$/.test(val)) {\n          // Likely a 4-digit year\n          year = parseInt(val, 10);\n        } else if (/^\\d{2}$/.test(val) && parseInt(val, 10) > 31) {\n          // Likely a 2-digit year\n          const twoDigitYear = parseInt(val, 10);\n          const currentYear = new Date().getFullYear();\n          const century = Math.floor(currentYear / 100) * 100;\n\n          if (twoDigitYear + century > currentYear + 50) {\n            year = twoDigitYear + (century - 100);\n          } else {\n            year = twoDigitYear + century;\n          }\n        } else if (/^\\d{1,2}$/.test(val) && parseInt(val, 10) >= 1 && parseInt(val, 10) <= 12) {\n          // Could be month or day\n          // If we already have a month value and it's in the format where we'd expect a day, treat as day\n          if (format.indexOf('DD') !== -1 || format.indexOf('D') !== -1) {\n            day = parseInt(val, 10);\n          } else {\n            month = parseInt(val, 10) - 1; // 0-based month\n          }\n        } else if (/^\\d{1,2}$/.test(val) && parseInt(val, 10) > 12 && parseInt(val, 10) <= 31) {\n          // Definitely a day\n          day = parseInt(val, 10);\n        } else if (/^[A-Za-z]{3,}$/.test(val)) {\n          // Likely a month name\n          const monthIndex = this.options.monthNames.findIndex(m =>\n              m.toLowerCase().startsWith(val.toLowerCase())\n          );\n\n          if (monthIndex !== -1) {\n            month = monthIndex;\n          }\n        }\n\n        groupCount++;\n      }\n\n      // Create and validate the date\n      const parsedDate = new Date(year, month, day);\n      if (isNaN(parsedDate.getTime())) return null;\n\n      return parsedDate;\n    } catch (error) {\n      console.error('Error parsing date:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if a date is valid\n   * @param {Date} date - The date to check\n   * @returns {boolean} - Whether the date is valid\n   */\n  DPTisValidDate(date) {\n    return date && date instanceof Date && !isNaN(date.getTime());\n  }\n\n  /**\n   * Parse multiple date strings from input value\n   */\n  parseDateInput(inputValue) {\n    if (!inputValue) return [];\n\n    // Determine which format to use based on mode\n    const format = this.options.mode === 'day'\n        ? this.options.dateFormat\n        : this.options.monthFormat;\n\n    // Split by commas for multiple dates\n    const dateStrings = inputValue.split(',').map(str => str.trim());\n\n    // Parse each date string and validate\n    return dateStrings\n        .map(dateStr => {\n          const date = this.parseDate(dateStr, format);\n          return this.DPTisValidDate(date) ? date : null;\n        })\n        .filter(date => date !== null); // Filter out invalid dates\n  }\n\n  /**\n   * Enhanced version of parseMonthInput to ensure more reliable parsing\n   */\n  parseMonthInput(inputValue) {\n    if (!inputValue) return [];\n\n    // Split by commas for multiple months\n    const monthStrings = inputValue.split(',').map(str => str.trim());\n\n    // Parse each month string and convert to month objects\n    return monthStrings\n        .map(monthStr => {\n          // Try direct parsing with the configured format\n          const date = this.parseDate(monthStr, this.options.monthFormat);\n          if (date && !isNaN(date.getTime())) {\n            return {\n              month: date.getMonth(),\n              year: date.getFullYear()\n            };\n          }\n\n          // If direct parsing fails, try a more flexible approach\n          // This helps with various month formats like \"Apr 2025\" or \"April 2025\"\n          const monthYearPattern = /([A-Za-z]+)\\s+(\\d{4})/i;\n          const match = monthStr.match(monthYearPattern);\n\n          if (match) {\n            const monthName = match[1];\n            const year = parseInt(match[2], 10);\n\n            // Find month by name\n            const monthIndex = this.options.monthNames.findIndex(m =>\n                m.toLowerCase().startsWith(monthName.toLowerCase())\n            );\n\n            if (monthIndex !== -1 && !isNaN(year)) {\n              return {\n                month: monthIndex,\n                year: year\n              };\n            }\n          }\n\n          // Also try numeric format like \"MM/YYYY\"\n          const numericPattern = /(\\d{1,2})[\\/\\-\\s](\\d{4})/;\n          const numMatch = monthStr.match(numericPattern);\n\n          if (numMatch) {\n            const month = parseInt(numMatch[1], 10) - 1; // Convert to 0-based\n            const year = parseInt(numMatch[2], 10);\n\n            if (month >= 0 && month <= 11 && !isNaN(year)) {\n              return {\n                month: month,\n                year: year\n              };\n            }\n          }\n\n          return null;\n        })\n        .filter(month => month !== null); // Filter out invalid months\n  }\n\n  /**\n   * Create a datepicker instance for a specific input element\n   * @private\n   */\n  _createInstance(inputElement, options, containerId) {\n    // Create a new options object with the input element\n    const instanceOptions = {...options, containerId};\n    \n    // Create a new instance and return it\n    return new DatepickerTabs(inputElement, instanceOptions);\n  }\n\n  /**\n   * DatepickerTabs Format Date Fix\n   *\n   * This is a corrected formatDate method that properly handles month name formatting\n   * without issues like replacing the 'D' in 'Dec' with the day number.\n   */\n\n\n  formatDate(date, format) {\n    if (!date || !(date instanceof Date) || isNaN(date.getTime())) return '';\n\n\n    // For the specific month-year format that's causing problems,\n    // use a direct approach\n    if (format === 'MMM YYYY' || format === 'MMMM YYYY') {\n      const monthIndex = date.getMonth();\n      const year = date.getFullYear();\n\n      if (format === 'MMM YYYY') {\n        // Use the first 3 characters of the month name\n        const shortMonthName = this.options.monthNames[monthIndex].substring(0, 3);\n        return `${shortMonthName} ${year}`;\n      } else {\n        // Use the full month name\n        return `${this.options.monthNames[monthIndex]} ${year}`;\n      }\n    }\n\n    // For other formats, use a direct replacement approach\n    // that avoids the issue with 'D' in month names\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n\n    // Create a copy of the format string\n    let result = format;\n\n    // Replace year patterns\n    result = result.replace(/YYYY/g, year.toString());\n    result = result.replace(/YY/g, year.toString().slice(-2));\n\n    // Replace month name patterns first\n    result = result.replace(/MMMM/g, this.options.monthNames[month]);\n    result = result.replace(/MMM/g, this.options.monthNames[month].substring(0, 3));\n\n    // Replace month number patterns\n    result = result.replace(/MM/g, String(month + 1).padStart(2, '0'));\n    // Use word boundary for single M to avoid replacing M in words\n    result = result.replace(/\\bM\\b/g, String(month + 1));\n\n    // Replace day patterns - after month patterns to avoid conflicts\n    result = result.replace(/DD/g, String(day).padStart(2, '0'));\n    // Use word boundary for single D to avoid replacing D in words\n    result = result.replace(/\\bD\\b/g, String(day));\n\n    return result;\n  }\n\n\n  /**\n   * Position the datepicker relative to the input element\n   * Adjusts to stay in viewport\n   */\n  positionPicker() {\n    if (!this.inputElement) return;\n\n    const container = this.element.querySelector('.custom-datepickertabs-container');\n    if (!container) return;\n\n    // Get input position and dimensions\n    const inputRect = this.inputElement.getBoundingClientRect();\n    const containerHeight = container.offsetHeight;\n    const containerWidth = container.offsetWidth;\n    const windowHeight = window.innerHeight;\n    const windowWidth = window.innerWidth;\n\n    // Check if there's enough space below\n    const spaceBelow = windowHeight - inputRect.bottom;\n    const showOnTop = spaceBelow < containerHeight && inputRect.top > containerHeight;\n\n    // Calculate scroll offset for initial positioning\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n\n    // Position horizontally - align with input field left edge\n    let left = inputRect.left + scrollLeft;\n\n    // Ensure the picker doesn't go off-screen to the right\n    if (left + containerWidth > windowWidth + scrollLeft) {\n      left = (inputRect.right - containerWidth) + scrollLeft;\n    }\n\n    // Ensure the picker doesn't go off-screen to the left\n    if (left < scrollLeft) {\n      left = scrollLeft + 5;\n    }\n\n    // Position vertically based on available space\n    let top;\n    if (showOnTop || this.options.position === 'top') {\n      // Position above the input\n      top = inputRect.top - containerHeight + scrollTop;\n\n      // If not enough space above, position below instead\n      if (top < scrollTop) {\n        top = inputRect.bottom + scrollTop;\n      }\n    } else {\n      // Position below the input by default\n      top = inputRect.bottom + scrollTop;\n\n      // If not enough space below, position above if possible\n      if (top + containerHeight > windowHeight + scrollTop && inputRect.top > containerHeight) {\n        top = inputRect.top - containerHeight + scrollTop;\n      }\n    }\n\n    // Use fixed positioning with coordinates relative to viewport\n    container.style.position = 'absolute';\n    container.style.top = `${top}px`;\n    container.style.left = `${left}px`;\n    container.style.zIndex = this.options.zIndex;\n  }\n\n  /**\n   * Initialize the datepicker\n   */\n  init() {\n    this.render();\n    this.attachEvents();\n\n    // Set up input element if provided\n    if (this.inputElement) {\n      this.setupInputElement();\n    }\n\n    // Initially hide the picker\n    this.hide();\n\n    // Add document click handler to close when clicking outside\n    document.addEventListener('click', (e) => {\n      if (this.isVisible &&\n          !this.element.contains(e.target) &&\n          (!this.inputElement || !this.inputElement.contains(e.target))) {\n        this.hide();\n      }\n    });\n  }\n\n  /**\n   * Setup input element events\n   */\n  setupInputElement() {\n    // Update input with initial date if available\n    this.inputElement.classList.add('datepicker-input');\n\n    this.updateInputValue();\n\n    // Add click handler to show the picker\n    this.inputElement.addEventListener('click', (e) => {\n      e.stopPropagation();\n      if (this.isVisible) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    // Make input readonly to prevent keyboard input\n    this.inputElement.setAttribute('readonly', 'readonly');\n\n    // Add placeholder if not already set\n    if (!this.inputElement.getAttribute('placeholder')) {\n      this.inputElement.setAttribute('placeholder', 'Select a date');\n    }\n  }\n\n  /**\n   * Update input element with formatted date value\n   */\n  updateInputValue() {\n    if (!this.inputElement) return;\n\n    if (this.options.mode === 'day') {\n      if (this.selectedDates.length === 0) {\n        this.inputElement.value = '';\n      } else if (this.options.multipleDays) {\n        const formattedDates = this.selectedDates.map(d =>\n            this.formatDate(d, this.options.dateFormat)\n        );\n        this.inputElement.value = formattedDates.join(', ');\n      } else {\n        this.inputElement.value = this.formatDate(\n            this.selectedDates[0],\n            this.options.dateFormat\n        );\n      }\n    } else {\n      if (this.selectedMonths.length === 0) {\n        this.inputElement.value = '';\n      } else if (this.options.multipleMonths) {\n        const formattedMonths = this.selectedMonths.map(m =>\n            this.formatDate(new Date(m.year, m.month, 1), this.options.monthFormat)\n        );\n        this.inputElement.value = formattedMonths.join(', ');\n      } else {\n        const m = this.selectedMonths[0];\n        this.inputElement.value = this.formatDate(\n            new Date(m.year, m.month, 1),\n            this.options.monthFormat\n        );\n      }\n    }\n  }\n\n  /**\n   * Show the datepicker\n   */\n  show() {\n    if (this.isVisible) return;\n\n    //console.log('show');\n\n    // Parse the input value every time before showing\n    if (this.inputElement && this.inputElement.value) {\n      if (this.options.mode === 'month') {\n        const parsedMonths = this.parseMonthInput(this.inputElement.value);\n\n        if (parsedMonths.length > 0) {\n          this.selectedMonths = parsedMonths;\n          this.selectedDates = parsedMonths.map(m => new Date(m.year, m.month, 1));\n\n          // Important: Always update the currentDate to show the view of the selected month\n          // This is the key fix for single month selection\n          const selectedMonth = parsedMonths[0];\n          this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n        }\n      } else if (this.options.mode === 'day') {\n        const parsedDates = this.parseDateInput(this.inputElement.value);\n        if (parsedDates.length > 0) {\n          this.selectedDates = parsedDates;\n          // Update the view to show the month of the selected date\n          const selectedDate = parsedDates[0];\n          this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n        }\n      }\n    }\n\n\n    /*\n    if (this.options.mode === 'month' && this.selectedMonths.length > 0) {\n      const selectedMonth = this.selectedMonths[0];\n      this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n    } else if (this.options.mode === 'day' && this.selectedDates.length > 0) {\n      const selectedDate = this.selectedDates[0];\n      this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n    }\n    \n    // Update currentDate to match selectedDate if one exists\n    if (this.selectedDates.length > 0) {\n      const selectedDate = this.selectedDates[0];\n      this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n    } else if (this.selectedMonths.length > 0) {\n      // If we have selected months but no dates, use the first selected month\n      const selectedMonth = this.selectedMonths[0];\n      this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n    }\n    */\n\n    // Show the container\n    const container = this.element.querySelector('.custom-datepickertabs-container');\n    if (container) {\n      container.style.display = 'block';\n      this.isVisible = true;\n\n      // Position the picker with a slight delay to ensure it's rendered\n      setTimeout(() => {\n        this.positionPicker();\n      }, 0);\n\n      // Add window resize handler (but not scroll handler)\n      this.resizeHandler = () => {\n        if (this.isVisible) {\n          this.positionPicker();\n        }\n      };\n\n      window.addEventListener('resize', this.resizeHandler);\n\n      // Trigger a custom event\n      const event = new CustomEvent('datepickerShow');\n      this.element.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Hide the datepicker\n   */\n  hide() {\n    if (!this.isVisible && !this.element.querySelector('.custom-datepickertabs-container')) return;\n\n    // Hide the container\n    const container = this.element.querySelector('.custom-datepickertabs-container');\n    if (container) {\n      container.style.display = 'none';\n      this.isVisible = false;\n\n      // Remove resize event listener\n      if (this.resizeHandler) {\n        window.removeEventListener('resize', this.resizeHandler);\n      }\n\n      // Trigger a custom event\n      const event = new CustomEvent('datepickerHide');\n      this.element.dispatchEvent(event);\n    }\n  }\n\n  // Set cookie for mode persistence\n  setModeCookie(mode) {\n    if (this.options.displayType !== 'tabs') return; // Only use cookies in tabs mode\n\n    const expiryDate = new Date();\n    expiryDate.setDate(expiryDate.getDate() + 7); // Cookie expires in 7 days\n    document.cookie = `${this.options.cookieName}=${mode};expires=${expiryDate.toUTCString()};path=/`;\n  }\n\n  // Get mode from cookie\n  getModeCookie() {\n    const name = this.options.cookieName + \"=\";\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const cookies = decodedCookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n      let cookie = cookies[i].trim();\n      if (cookie.indexOf(name) === 0) {\n        return cookie.substring(name.length, cookie.length);\n      }\n    }\n    return null;\n  }\n\n  // Restore mode from cookie if available\n  restoreModeFromCookie() {\n    const savedMode = this.getModeCookie();\n    if (savedMode && (savedMode === 'day' || savedMode === 'month')) {\n      this.options.mode = savedMode;\n    }\n  }\n\n  /**\n   * Get years range for year selector based on min/max date constraints\n   */\n  getYearsRange(currentYear) {\n    let startYear = currentYear - this.options.backwardsYearsOffset;\n    let endYear = currentYear + this.options.forwardsYearsOffset;\n\n    // Apply min date constraint\n    if (this.options.minDate) {\n      const minYear = this.options.minDate.getFullYear();\n      startYear = Math.max(startYear, minYear);\n    }\n\n    // Apply max date constraint\n    if (this.options.maxDate) {\n      const maxYear = this.options.maxDate.getFullYear();\n      endYear = Math.min(endYear, maxYear);\n    }\n\n    return { startYear, endYear };\n  }\n\n  /**\n   * Check if a month is selectable based on min/max date constraints\n   */\n  isMonthSelectable(month, year) {\n    // Check for min date constraint\n    if (this.options.minDate) {\n      const minDate = new Date(this.options.minDate);\n      const minYear = minDate.getFullYear();\n      const minMonth = minDate.getMonth();\n\n      if (year < minYear || (year === minYear && month < minMonth)) {\n        return false;\n      }\n    }\n\n    // Check for max date constraint\n    if (this.options.maxDate) {\n      const maxDate = new Date(this.options.maxDate);\n      const maxYear = maxDate.getFullYear();\n      const maxMonth = maxDate.getMonth();\n\n      if (year > maxYear || (year === maxYear && month > maxMonth)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Render the datepicker UI\n  render() {\n    // Check if the container already exists\n    let container = this.element.querySelector('.custom-datepickertabs-container');\n\n    if (!container) {\n      // First time rendering - create the full container\n      container = document.createElement('div');\n      container.className = 'custom-datepickertabs-container';\n\n      // Add header\n      container.innerHTML = `\n        <div class=\"datepicker-header\">\n          <h3 class=\"datepicker-title\">Select ${this.options.mode === 'day' ? 'Date' : 'Month'}</h3>\n        </div>\n      `;\n\n      // Add tabs only if displayType is tabs\n      if (this.options.displayType === 'tabs') {\n        container.innerHTML += `\n          <div class=\"datepicker-tabs-ui\">\n            <button class=\"datepicker-tab ${this.options.mode === 'day' ? 'active' : ''}\" data-mode=\"day\">Specific Date</button>\n            <button class=\"datepicker-tab ${this.options.mode === 'month' ? 'active' : ''}\" data-mode=\"month\">Whole Month</button>\n          </div>\n        `;\n      }\n\n      // Create content based on mode\n      const content = document.createElement('div');\n      content.className = 'datepicker-content';\n\n      if (this.options.mode === 'day') {\n        content.innerHTML = this.renderDayMode();\n      } else {\n        content.innerHTML = this.renderMonthMode();\n      }\n\n      container.appendChild(content);\n\n      // Add footer with buttons\n      container.innerHTML += `\n        <div class=\"datepicker-footer\">\n          <button class=\"datepicker-btn clear\">Clear</button>\n          <button class=\"datepicker-btn apply\">Apply</button>\n        </div>\n      `;\n\n      this.element.appendChild(container);\n    } else {\n      // Update only what's needed\n      const title = container.querySelector('.datepicker-title');\n      if (title) {\n        title.textContent = `Select ${this.options.mode === 'day' ? 'Date' : 'Month'}`;\n      }\n\n      // Update tabs only if they are present\n      const tabsUI = container.querySelector('.datepicker-tabs-ui');\n      if (tabsUI) {\n        const dayTab = tabsUI.querySelector('[data-mode=\"day\"]');\n        const monthTab = tabsUI.querySelector('[data-mode=\"month\"]');\n\n        if (dayTab && monthTab) {\n          if (this.options.mode === 'day') {\n            dayTab.classList.add('active');\n            monthTab.classList.remove('active');\n          } else {\n            dayTab.classList.remove('active');\n            monthTab.classList.add('active');\n          }\n        }\n      }\n\n      // Update content\n      const content = container.querySelector('.datepicker-content');\n      if (content) {\n        content.innerHTML = this.options.mode === 'day'\n            ? this.renderDayMode()\n            : this.renderMonthMode();\n      }\n    }\n  }\n\n  // Render day selection mode\n  renderDayMode() {\n    const year = this.currentDate.getFullYear();\n    const month = this.currentDate.getMonth();\n\n    // Get days in the current month\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n    // Get the day of the week of the first day of the month\n    const firstDayOfMonth = new Date(year, month, 1).getDay();\n\n    // Calculate days from previous month to display\n    const prevMonthDays = firstDayOfMonth;\n\n    // Create year selector\n    const yearsHtml = this.renderYearSelector(year);\n\n    // Create month navigation\n    const navHtml = `\n      <div class=\"datepicker-nav\">\n        <button class=\"datepicker-nav-btn prev-month\">&lt;</button>\n        <span>${this.options.monthNames[month]} ${year}</span>\n        <button class=\"datepicker-nav-btn next-month\">&gt;</button>\n      </div>\n    `;\n\n    // Create day names header\n    let daysHeaderHtml = '<div class=\"datepicker-days-container\">';\n    for (let i = 0; i < 7; i++) {\n      daysHeaderHtml += `<div class=\"day-name\">${this.options.dayNames[i]}</div>`;\n    }\n\n    // Create days grid\n    let daysHtml = '';\n\n    // Previous month days\n    const prevMonth = month === 0 ? 11 : month - 1;\n    const prevMonthYear = month === 0 ? year - 1 : year;\n    const daysInPrevMonth = new Date(prevMonthYear, prevMonth + 1, 0).getDate();\n\n    for (let i = 0; i < prevMonthDays; i++) {\n      const day = daysInPrevMonth - prevMonthDays + i + 1;\n      daysHtml += `<div class=\"day-item other-month disabled\">${day}</div>`;\n    }\n\n    // Current month days\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Normalize today for comparison\n\n    for (let i = 1; i <= daysInMonth; i++) {\n      const date = new Date(year, month, i);\n      const isToday =\n          today.getDate() === i &&\n          today.getMonth() === month &&\n          today.getFullYear() === year;\n\n      const isSaturday = date.getDay() === 6;\n      const isSelected = this.isDateSelected(date);\n\n      // Set hours to 0 for date comparison\n      const compareDate = new Date(date);\n      compareDate.setHours(0, 0, 0, 0);\n      const isFuture = compareDate > today;\n\n      // Check if day should be disabled\n      let isDisabled = false;\n\n      // If futureSaturdaysOnly is enabled, disable all non-Saturday days\n      // and all Saturdays that are in the past\n      if (this.options.futureSaturdaysOnly) {\n        isDisabled = !(isSaturday && isFuture);\n      }\n\n      // Apply min date restriction\n      if (this.options.minDate) {\n        const minDate = new Date(this.options.minDate);\n        minDate.setHours(0, 0, 0, 0);\n        if (compareDate < minDate) isDisabled = true;\n      }\n\n      // Apply max date restriction\n      if (this.options.maxDate) {\n        const maxDate = new Date(this.options.maxDate);\n        maxDate.setHours(0, 0, 0, 0);\n        if (compareDate > maxDate) isDisabled = true;\n      }\n\n      const classes = [\n        'day-item',\n        isToday ? 'today' : '',\n        isSelected ? 'selected' : '',\n        isDisabled ? 'disabled' : '',\n        isSaturday ? 'saturday' : ''\n      ].filter(Boolean).join(' ');\n\n      // Add a data attribute to indicate if the day is clickable\n      const clickableAttr = isDisabled ? '' : 'data-clickable=\"true\"';\n\n      daysHtml += `<div class=\"${classes}\" ${clickableAttr} data-date=\"${year}-${month+1}-${i}\">${i}</div>`;\n    }\n\n    // Next month days\n    const daysFromNextMonth = 42 - (prevMonthDays + daysInMonth);\n    for (let i = 1; i <= daysFromNextMonth; i++) {\n      daysHtml += `<div class=\"day-item other-month disabled\">${i}</div>`;\n    }\n\n    daysHtml += '</div>';\n\n    // Combine all parts\n    let html = yearsHtml + navHtml + daysHeaderHtml + daysHtml;\n\n    // If multiple day selection is enabled, add the selection info\n    if (this.options.multipleDays && this.selectedDates.length > 0) {\n      html += this.renderSelectedDates();\n    }\n\n    return html;\n  }\n\n  // Render month selection mode\n  renderMonthMode() {\n    //console.log('renderMonthMode')\n    const year = this.currentDate.getFullYear();\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    // Create year selector\n    const yearsHtml = this.renderYearSelector(year);\n\n    // Create months grid\n    let monthsHtml = '<div class=\"datepicker-month-container\">';\n\n    for (let i = 0; i < 12; i++) {\n\n      const isSelected = this.isMonthSelected(i, year);\n      // Check if month is selectable based on min/max date\n      const isSelectable = this.isMonthSelectable(i, year);\n      // Check if this is the current month\n      const isThisMonth = (i === currentMonth && year === currentYear);\n\n      const classes = [\n        'month-item',\n        isSelected ? 'selected' : '',\n        isThisMonth ? 'this-month' : '',\n        !isSelectable ? 'disabled' : ''\n      ].filter(Boolean).join(' ');\n\n      const monthAttrs = isSelectable ? `data-month=\"${i}\" data-year=\"${year}\"` : '';\n\n      monthsHtml += `<div class=\"${classes}\" ${monthAttrs}>${this.options.monthNames[i]}</div>`;\n    }\n\n    monthsHtml += '</div>';\n\n    // Combine all parts\n    let html = yearsHtml + monthsHtml;\n\n    // If multiple month selection is enabled, add the selection info\n    if (this.options.multipleMonths && this.selectedMonths.length > 0) {\n      html += this.renderSelectedMonths();\n    }\n\n    return html;\n  }\n\n  // Render year selector\n  renderYearSelector(currentYear) {\n    // Get range of years based on min/max date constraints\n    const { startYear, endYear } = this.getYearsRange(currentYear);\n\n    let html = '<div class=\"datepicker-years\">';\n    html += '<select class=\"year-selector\">';\n\n    for (let year = startYear; year <= endYear; year++) {\n      html += `<option value=\"${year}\" ${year === currentYear ? 'selected' : ''}>${year}</option>`;\n    }\n\n    html += '</select>';\n    html += '</div>';\n\n    return html;\n  }\n\n  // Render selected dates info (for multiple selection)\n  renderSelectedDates() {\n    let html = '<div class=\"multi-select-info\">Selected Dates:</div>';\n    html += '<div class=\"selected-list\">';\n\n    this.selectedDates.forEach((date, index) => {\n      const formatted = this.formatDate(date, this.options.dateFormat);\n      html += `\n        <div class=\"selected-item\" data-index=\"${index}\">\n          ${formatted}\n          <button class=\"remove-btn\" data-index=\"${index}\">×</button>\n        </div>\n      `;\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  // Render selected months info (for multiple selection)\n  renderSelectedMonths() {\n    let html = '<div class=\"multi-select-info\">Selected Months:</div>';\n    html += '<div class=\"selected-list\">';\n\n    this.selectedMonths.forEach((item, index) => {\n      // Validate the month object\n      if (!item || typeof item.month !== 'number' || typeof item.year !== 'number' ||\n          item.month < 0 || item.month > 11 || isNaN(item.year)) {\n        return; // Skip invalid months\n      }\n\n      // Create a date object and validate it\n      const dateObj = new Date(item.year, item.month, 1);\n      if (isNaN(dateObj.getTime())) {\n        return; // Skip invalid dates\n      }\n\n      const formatted = this.formatDate(dateObj, this.options.monthFormat);\n\n      // Only add to HTML if we got a valid formatted string\n      if (formatted) {\n        html += `\n        <div class=\"selected-item\" data-index=\"${index}\">\n          ${formatted}\n          <button class=\"remove-btn\" data-index=\"${index}\">×</button>\n        </div>\n      `;\n      }\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  // Check if a date is selected\n  isDateSelected(date) {\n    return this.selectedDates.some(selectedDate =>\n        selectedDate.getDate() === date.getDate() &&\n        selectedDate.getMonth() === date.getMonth() &&\n        selectedDate.getFullYear() === date.getFullYear()\n    );\n  }\n\n  // Check if a month is selected\n  isMonthSelected(month, year) {\n    return this.selectedMonths.some(item =>\n        item.month === month && item.year === year\n    );\n  }\n\n  // Check if maximum month selections reached\n  isMaxMonthSelectionsReached() {\n    return (\n        this.options.maxMonthSelection !== null &&\n        this.selectedMonths.length >= this.options.maxMonthSelection\n    );\n  }\n\n  // Attach event listeners\n  attachEvents() {\n    // Tab switching (only if displayType is 'tabs')\n    if (this.options.displayType === 'tabs') {\n      const tabs = this.element.querySelectorAll('.datepicker-tab');\n      tabs.forEach(tab => {\n        tab.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const mode = tab.getAttribute('data-mode');\n          this.options.mode = mode;\n          this.setModeCookie(mode); // Save mode to cookie\n          this.render();\n          this.attachEvents();\n\n          // Trigger a custom event to notify of mode change\n          const event = new CustomEvent('datepickerModeChange', {\n            detail: { mode: mode }\n          });\n          this.element.dispatchEvent(event);\n        });\n      });\n    }\n\n    // Year selector\n    const yearSelector = this.element.querySelector('.year-selector');\n    if (yearSelector) {\n      yearSelector.addEventListener('change', (e) => {\n        this.currentDate.setFullYear(parseInt(e.target.value, 10));\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    // Month navigation\n    const prevMonthBtn = this.element.querySelector('.prev-month');\n    const nextMonthBtn = this.element.querySelector('.next-month');\n\n    if (prevMonthBtn) {\n      prevMonthBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n\n        // Check if going to the previous month is allowed based on min date\n        if (this.options.minDate) {\n          const minDate = new Date(this.options.minDate);\n          const currentMonth = this.currentDate.getMonth();\n          const currentYear = this.currentDate.getFullYear();\n\n          // If we're already at the min date month and year, don't go back further\n          if ((currentMonth === 0 && currentYear === minDate.getFullYear()) ||\n              (currentMonth === minDate.getMonth() && currentYear === minDate.getFullYear())) {\n            return;\n          }\n        }\n\n        this.currentDate.setMonth(this.currentDate.getMonth() - 1);\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    if (nextMonthBtn) {\n      nextMonthBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n\n        // Check if going to the next month is allowed based on max date\n        if (this.options.maxDate) {\n          const maxDate = new Date(this.options.maxDate);\n          const currentMonth = this.currentDate.getMonth();\n          const currentYear = this.currentDate.getFullYear();\n\n          // If we're already at the max date month and year, don't go forward further\n          if ((currentMonth === 11 && currentYear === maxDate.getFullYear()) ||\n              (currentMonth === maxDate.getMonth() && currentYear === maxDate.getFullYear())) {\n            return;\n          }\n        }\n\n        this.currentDate.setMonth(this.currentDate.getMonth() + 1);\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    // Day selection\n    if (this.options.mode === 'day') {\n      // Only select clickable days (those with data-clickable attribute)\n      const dayItems = this.element.querySelectorAll('.day-item[data-clickable=\"true\"]');\n      dayItems.forEach(day => {\n        day.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const dateStr = day.getAttribute('data-date');\n          if (dateStr) {\n            const [year, month, date] = dateStr.split('-').map(Number);\n            const selectedDate = new Date(year, month - 1, date);\n\n            if (this.options.multipleDays) {\n              // If multiple day selection is enabled\n              const index = this.selectedDates.findIndex(d =>\n                  d.getDate() === selectedDate.getDate() &&\n                  d.getMonth() === selectedDate.getMonth() &&\n                  d.getFullYear() === selectedDate.getFullYear()\n              );\n\n              if (index === -1) {\n                // Add to selection\n                this.selectedDates.push(selectedDate);\n              } else {\n                // Remove from selection\n                this.selectedDates.splice(index, 1);\n              }\n\n              // Update the UI to reflect the new selection\n              // Remove 'selected' class from all days with data-clickable\n              dayItems.forEach(di => di.classList.remove('selected'));\n              \n              // Add 'selected' class to selected days\n              this.selectedDates.forEach(selected => {\n                const dayStr = `${selected.getFullYear()}-${selected.getMonth()+1}-${selected.getDate()}`;\n                const selectedEl = this.element.querySelector(`.day-item[data-date=\"${dayStr}\"]`);\n                if (selectedEl) {\n                  selectedEl.classList.add('selected');\n                }\n              });\n\n              this.render();\n              this.attachEvents();\n            } else {\n              // Single selection\n              this.selectedDates = [selectedDate];\n              \n              // Update the UI to reflect the new selection\n              // Remove 'selected' class from all days with data-clickable\n              dayItems.forEach(di => di.classList.remove('selected'));\n              // Add 'selected' class to the clicked day\n              day.classList.add('selected');\n\n              // Create an event to notify that a date has been selected and applied\n              const event = new CustomEvent('datepickerApply', {\n                detail: {\n                  mode: 'day',\n                  selectedDates: this.selectedDates,\n                  selectedMonths: []\n                }\n              });\n              this.element.dispatchEvent(event);\n\n              // Update input value if available\n              this.updateInputValue();\n\n              // Hide the picker\n              this.hide();\n\n              // Call callback if provided\n              if (this.options.onDateChange) {\n                this.options.onDateChange(this.selectedDates[0]);\n              }\n            }\n          }\n        });\n      });\n    }\n\n    // Month selection\n    // Month selection event handler for the DatepickerTabs class\n    // This should replace the current month selection handler in attachEvents method\n\n    // Month selection\n    if (this.options.mode === 'month') {\n      const monthItems = this.element.querySelectorAll('.month-item:not(.disabled)');\n      monthItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const month = parseInt(item.getAttribute('data-month'), 10);\n          const year = parseInt(item.getAttribute('data-year'), 10);\n\n          if (this.options.multipleMonths) {\n            // If multiple month selection is enabled\n            const index = this.selectedMonths.findIndex(m =>\n                m.month === month && m.year === year\n            );\n\n            if (index === -1) {\n              // Check if adding the month would exceed the maximum allowed\n              if (this.options.maxMonthSelection && this.selectedMonths.length >= this.options.maxMonthSelection) {\n                // If max reached, remove the oldest selection before adding new one\n                this.selectedMonths.shift();\n              }\n\n              // Add to selection\n              this.selectedMonths.push({ month, year });\n\n              // Also update selected dates array with all month selections\n              this.selectedDates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            } else {\n              // Remove from selection\n              this.selectedMonths.splice(index, 1);\n\n              // Update selected dates array to match\n              this.selectedDates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            }\n\n\n            // Re-render to show updated selections\n            this.render();\n            this.attachEvents();\n\n            // Update input value\n            this.updateInputValue();\n\n            // Call callback with all selected dates\n            if (this.options.onDateChange) {\n              this.options.onDateChange(this.selectedDates);\n            }\n          } else {\n            // Single selection\n            this.selectedMonths = [{ month, year }];\n\n            // Also update selected dates to first day of month\n            this.selectedDates = [new Date(year, month, 1)];\n\n            // Update currentDate to match the selected month\n            this.currentDate = new Date(year, month, 1);\n\n            // Re-render to show updated selections\n            this.render();\n            this.attachEvents();\n\n            // If single month selection, apply immediately and close\n            // Create an event to notify that a month has been selected and applied\n            const event = new CustomEvent('datepickerApply', {\n              detail: {\n                mode: 'month',\n                selectedDates: this.selectedDates,\n                selectedMonths: this.selectedMonths\n              }\n            });\n            this.element.dispatchEvent(event);\n\n            // Update input value if available\n            this.updateInputValue();\n\n            // Hide the picker\n            this.hide();\n\n            // Call callback if provided\n            if (this.options.onDateChange) {\n              this.options.onDateChange(this.selectedDates[0]);\n            }\n          }\n        });\n      });\n    }\n\n    // Remove buttons for multi-select\n    const removeButtons = this.element.querySelectorAll('.remove-btn');\n    removeButtons.forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent bubbling to parent\n        const index = parseInt(btn.getAttribute('data-index'), 10);\n\n        if (this.options.mode === 'day') {\n          this.selectedDates.splice(index, 1);\n        } else {\n          this.selectedMonths.splice(index, 1);\n        }\n\n        this.render();\n        this.attachEvents();\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          if (this.options.mode === 'day') {\n            this.options.onDateChange(this.options.multiple ? this.selectedDates : this.selectedDates[0]);\n          } else {\n            const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            this.options.onDateChange(this.options.multiple ? dates : dates[0]);\n          }\n        }\n      });\n    });\n\n    // Clear button\n    const clearBtn = this.element.querySelector('.datepicker-btn.clear');\n    if (clearBtn) {\n      clearBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n        this.selectedDates = [];\n        this.selectedMonths = [];\n        this.render();\n        this.attachEvents();\n\n        // Update input value if available\n        if (this.inputElement) {\n          this.inputElement.value = '';\n        }\n\n        // Create a custom event for clearing\n        const event = new CustomEvent('datepickerClear');\n        this.element.dispatchEvent(event);\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          this.options.onDateChange(null);\n        }\n      });\n    }\n\n    // Apply button\n    // Apply button handler for the DatepickerTabs class\n    // This should replace the current Apply button handler in attachEvents method\n\n    // Apply button\n    const applyBtn = this.element.querySelector('.datepicker-btn.apply');\n    if (applyBtn) {\n      applyBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling\n\n        // Create an event to notify that dates have been applied\n        const event = new CustomEvent('datepickerApply', {\n          detail: {\n            mode: this.options.mode,\n            selectedDates: this.selectedDates,\n            selectedMonths: this.selectedMonths\n          }\n        });\n        this.element.dispatchEvent(event);\n\n        // Update input value if available\n        this.updateInputValue();\n\n        // Hide the picker\n        this.hide();\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          if (this.options.mode === 'day') {\n            // In day mode, only call if we have selections\n            if (this.selectedDates.length > 0) {\n              this.options.onDateChange(this.options.multipleDays ? this.selectedDates : this.selectedDates[0]);\n            } else {\n              this.options.onDateChange(null);\n            }\n          } else {\n            // In month mode, convert month selections to dates (1st of each month)\n            if (this.selectedMonths.length > 0) {\n              const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n              this.options.onDateChange(this.options.multipleMonths ? dates : dates[0]);\n            } else {\n              this.options.onDateChange(null);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Public methods\n   */\n\n  /**\n   * Set date picker mode\n   * @param {string} mode - 'day' or 'month'\n   */\n  setMode(mode) {\n    if (mode === 'day' || mode === 'month') {\n      this.options.mode = mode;\n      if (this.options.displayType === 'tabs') {\n        this.setModeCookie(mode);\n      }\n      this.render();\n      this.attachEvents();\n      this.updateInputValue();\n    }\n    return this;\n  }\n\n  getMode() {\n    return this.options.mode;\n  }\n\n  /**\n   * Set display type\n   * @param {string} type - 'tabs', 'day', or 'month'\n   */\n  setDisplayType(type) {\n    if (type === 'tabs' || type === 'day' || type === 'month') {\n      this.options.displayType = type;\n\n      // If not tabs, force mode to match displayType\n      if (type !== 'tabs') {\n        this.options.mode = type;\n      }\n\n      // Re-render picker\n      this.render();\n      this.attachEvents();\n    }\n    return this;\n  }\n\n  /**\n   * Set selected date(s)\n   * @param {Date|Date[]|null} date - Date or array of dates to select\n   */\n  setDate(date) {\n    if (Array.isArray(date)) {\n      this.selectedDates = date.map(d => new Date(d));\n\n      // Also update month selection if in month mode\n      this.selectedMonths = date.map(d => ({\n        month: new Date(d).getMonth(),\n        year: new Date(d).getFullYear()\n      }));\n    } else if (date) {\n      this.selectedDates = [new Date(date)];\n\n      // Also update month selection if in month mode\n      const d = new Date(date);\n      this.selectedMonths = [{\n        month: d.getMonth(),\n        year: d.getFullYear()\n      }];\n    } else {\n      this.selectedDates = [];\n      this.selectedMonths = [];\n    }\n\n    this.render();\n    this.attachEvents();\n    this.updateInputValue();\n\n    return this;\n  }\n\n  /**\n   * Set max month selection limit\n   * @param {number|null} limit - Max number of months that can be selected\n   */\n  setMaxMonthSelection(limit) {\n    this.options.maxMonthSelection = limit;\n\n    // If current selections exceed the new limit, trim the excess\n    if (limit !== null && this.selectedMonths.length > limit) {\n      // Keep only the most recent selections up to the limit\n      this.selectedMonths = this.selectedMonths.slice(-limit);\n\n      // Also update the selectedDates to match\n      this.selectedDates = this.selectedMonths.map(m =>\n          new Date(m.year, m.month, 1)\n      );\n\n      this.render();\n      this.attachEvents();\n      this.updateInputValue();\n    }\n\n    return this;\n  }\n\n  /**\n   * Get selected date(s)\n   * @returns {Date|Date[]|null} - Selected date(s)\n   */\n  getDate() {\n    if (this.options.mode === 'day') {\n      return this.selectedDates.length === 0 ? null :\n          (this.options.multipleDays ? this.selectedDates : this.selectedDates[0]);\n    } else {\n      // Convert month selections to dates (1st of each month)\n      const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n      return dates.length === 0 ? null :\n          (this.options.multipleMonths ? dates : dates[0]);\n    }\n  }\n\n  /**\n   * Enable/disable multiple days selection\n   * @param {boolean} enable - Whether to enable multiple day selection\n   */\n  setMultipleDays(enable) {\n    this.options.multipleDays = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Enable/disable multiple months selection\n   * @param {boolean} enable - Whether to enable multiple month selection\n   */\n  setMultipleMonths(enable) {\n    this.options.multipleMonths = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Enable/disable multiple selection (both days and months)\n   * @param {boolean} enable - Whether to enable multiple selection\n   */\n  setMultiple(enable) {\n    this.options.multipleDays = !!enable;\n    this.options.multipleMonths = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n\n  /**\n   * Set date format\n   * @param {string} format - Format string\n   */\n  setDateFormat(format) {\n    this.options.dateFormat = format;\n    this.updateInputValue();\n    return this;\n  }\n\n  /**\n   * Set month format\n   * @param {string} format - Format string\n   */\n  setMonthFormat(format) {\n    this.options.monthFormat = format;\n    this.updateInputValue();\n    return this;\n  }\n\n  /**\n   * Set min date\n   * @param {Date|null} date - Minimum selectable date\n   */\n  setMinDate(date) {\n    this.options.minDate = date ? new Date(date) : null;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n\n  /**\n   * Set max date\n   * @param {Date|null} date - Maximum selectable date\n   */\n  setMaxDate(date) {\n    this.options.maxDate = date ? new Date(date) : null;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Destroy the datepicker instance and clean up\n   */\n  destroy() {\n    // Remove event listeners from input\n    if (this.inputElement) {\n      const newInputElement = this.inputElement.cloneNode(true);\n      this.inputElement.parentNode.replaceChild(newInputElement, this.inputElement);\n    }\n    \n    // Remove the container element from DOM\n    if (this.containerElement && this.containerElement.parentNode) {\n      this.containerElement.parentNode.removeChild(this.containerElement);\n    }\n    \n    // Clean up references\n    this.element = null;\n    this.inputElement = null;\n    this.containerElement = null;\n    this.instances = [];\n  }\n\n  // This one used to render in demos\n  getDatesAsString(dates) {\n    const currentMode = this.getMode();\n    if (Array.isArray(dates)) {\n      return dates.map(d => {\n        const month = d.toLocaleString('default', { month: 'short' });\n        const year = d.getFullYear();\n        const day = d.getDay();\n        if ('day' == currentMode) {\n          return `${day} ${month} ${year}`;\n        } else {\n          return `${month} ${year}`;\n        }\n      }).join(', ');\n    } else {\n      const month = dates.toLocaleString('default', { month: 'short' });\n      const year = dates.getFullYear();\n      const day = dates.getDate();\n      if ('day' == currentMode) {\n          return  `${day} ${month} ${year}`;\n      } else {\n          return `${month} ${year}`;\n      }\n    }\n  }\n\n}\n\n\n// Create global reference\nwindow.DatepickerTabs = DatepickerTabs;"]}