{"version":3,"sources":["datepicker-tabs.js"],"names":["DatepickerTabs","constructor","selector","options","this","mode","displayType","maxMonthSelection","startDate","defaults","maxDate","onDateChange","multipleDays","multipleMonths","cookieName","minDate","futureSaturdaysOnly","containerId","forwardsYearsOffset","monthFormat","elements","document","querySelectorAll","length","backwardsYearsOffset","inputElement","index","instanceOptions","instanceId","Date","now","instances","push","_createInstance","console","HTMLElement","containerElement","createElement","className","element","classList","add","selectedDates","selectedMonths","isVisible","appendChild","month","getMonth","year","currentDate","selectedMonth","selectedDate","getFullYear","restoreModeFromCookie","parsedDates","parseDateInput","value","parseMonthInput","map","m","parsedMonths","init","parseDate","dateStr","format","formatTokens","DD","D","MMM","MMMM","MM","M","YYYY","YY","regexFormat","replace","forEach","token","RegExp","source","currentYear","century","monthIndex","regex","match","let","day","groupCount","val","test","parseInt","Math","floor","twoDigitYear","indexOf","monthNames","findIndex","toLowerCase","startsWith","parsedDate","isNaN","getTime","error","DPTisValidDate","date","inputValue","dateFormat","split","str","trim","filter","monthStr","monthStrings","monthName","monthYearPattern","numMatch","numericPattern","formatDate","substring","getDate","result","toString","slice","String","padStart","positionPicker","container","querySelector","offsetHeight","containerWidth","offsetWidth","windowHeight","window","innerHeight","windowWidth","bottom","innerWidth","inputRect","top","containerHeight","spaceBelow","documentElement","scrollLeft","showOnTop","scrollTop","left","pageXOffset","right","position","style","zIndex","render","attachEvents","hide","setupInputElement","addEventListener","e","contains","target","stopPropagation","show","setAttribute","getAttribute","updateInputValue","formattedDates","d","join","formattedMonths","display","setTimeout","event","CustomEvent","resizeHandler","expiryDate","dispatchEvent","setModeCookie","cookie","cookies","setDate","toUTCString","getModeCookie","savedMode","decodeURIComponent","i","name","getYearsRange","startYear","minYear","max","maxYear","endYear","min","isMonthSelectable","maxMonth","minMonth","innerHTML","content","title","textContent","tabsUI","dayTab","monthTab","renderDayMode","remove","daysInMonth","yearsHtml","renderYearSelector","renderMonthMode","prevMonthDays","getDay","prevMonthYear","navHtml","daysHeaderHtml","isToday","today","dayNames","daysHtml","compareDate","isDisabled","daysInPrevMonth","setHours","clickableAttr","isSaturday","isFuture","html","isSelected","Boolean","classes","daysFromNextMonth","monthAttrs","isSelectable","monthsHtml","renderSelectedMonths","renderSelectedDates","isMonthSelected","formatted","some","item","isMaxMonthSelectionsReached","dateObj","yearSelector","nextMonthBtn","isDateSelected","currentMonth","setMonth","tab","detail","dayItems","prevMonthBtn","setFullYear","dayStr","selected","selectedEl","monthItems","Number","shift","splice","di","removeButtons","btn","multiple","dates","clearBtn","applyBtn","newApplyBtn","setMode","cloneNode","parentNode","replaceChild","type","isArray","getMode","setDisplayType","setMultipleMonths","Array","setDateFormat","setMaxMonthSelection","limit","setMinDate","newInputElement","setMultipleDays","enable","setMultiple","setMonthFormat","setMaxDate","destroy","removeChild","getDatesAsString","currentMode","toLocaleString"],"mappings":";;;;;;MAgHAA,eACAC,YAAAC,EAAAC,EAAA,IA2CI,GANAC,KAXoCD,QAAA,CAvBxCE,KAAA,MASMC,YAAa,OALbN,aAAc,CAAA,EAClBC,eAAoB,CAAA,EAClBM,kBAAA,KACAC,UAAMC,KACJJ,QAAM,KAAOK,QAAA,KACbJ,oBAAmB,CAAA,EAAEK,aAAA,KACrBC,WAAY,CAAS,UAAA,WAAA,QAAA,QAAA,MAAA,OACrBC,OAAAA,SAAgB,YAAK,UAAA,WAAA,YACrBN,SAAAA,CAAAA,MAAiB,MAAM,MAAA,MAAA,MAAA,MAAA,OAAEO,WAAA,qBACzBN,WAAW,cACXO,YAAa,WACbL,SAAS,SACTM,OAAAA,KAA4BC,YAAA,GAC5BN,qBAAkB,EAAEO,oBAAA,EAMc,GAAAf,CAAA,EAcpCC,KAZEe,UAAa,GACO,UAAA,OAAAjB,EAAA,CACdkB,EAAMC,SAAAC,iBAAApB,CAAA,EACK,GAAA,EAAAkB,EAAAG,OAMF,OALfC,EAAAA,QAAAA,CAAoBC,EAAGC,KAAE,IAAAC,EAAA,CAAA,GAAAvB,KAAAD,OAAA,EAE1ByB,0BAAAC,KAAAC,IAAA,KAAAJ,EAkBKtB,KAAK2B,UAAUC,KAAK5B,KAAK6B,gBAAgBR,EAAcE,EAAiBC,CAAU,CAAC,CAhBzF,CAAA,EACoBnB,KAAQsB,UAAK5B,GAAAA,IAAAA,EAAAA,OAwB7B,OArBA+B,KAAAA,QAACH,MAAY,mDAAE7B,CAAA,EAkBfE,KAAKqB,aAAeL,EAAS,EAfjC,KAAI,CAAA,GAAOlB,EAAAA,aAAaiC,aAyBtB,OArBAD,KAAAA,QAAId,MAASG,+CAAYrB,CAAA,EAkBzBE,KAAKqB,aAAevB,CAItB,CAGA,IAtBMe,EAAAb,KAAAD,QAAAc,aAAA,wBAAAY,KAAAC,IAAA,EAuBN1B,KAAKa,YAtBOW,EAyBZxB,KArBIgC,iBAAYL,SAASM,cAAA,KAAA,EAsBzBjC,KArBGgC,iBAAmBb,GAAAA,EAsBtBnB,KArBIgC,iBAAAE,UAAA,4BAsBJjB,SArBSI,KAAAA,YAAeL,KAAAA,gBAAW,EAwBnChB,KArBImC,QAAAnC,KAAAgC,iBAwBJhC,KArBEmC,QAAAC,UAAAC,IAAA,iBAAA,EAwBFrC,KArBE8B,YAAc,IAAAL,KAAAzB,KAAAD,QAAAK,WAAA,IAAAqB,IAAgD3B,EAsBhEE,KArBEsC,cAAAtC,KAAAD,QAAAK,UAAA,CAAA,IAAAqB,KAAAzB,KAAAD,QAAAK,SAAA,GAAA,GACFJ,KAAAuC,eAAA,GAsBAvC,KAAKwC,UAAY,CAAA,EAlBa,QAA1BxC,KAACa,QAAWX,aAAc,UAAAF,KAAAD,QAAAG,cAsB5BF,KAAKD,QAAQE,KAAOD,KAAKD,QAAQG,aAjBbgC,UAAlBlC,KAACgC,QAAAA,MAA6BhC,KAAAD,QAAAK,YAC1BA,EAAMqC,IAAAA,KAAYzC,KAAKgC,QAAAA,SAAiB,EAsB9ChC,KAAKuC,eAAeX,KAAK,CApB3Bc,MAAAtC,EAAAuC,SAAA,EACIC,KAACT,EAAeH,YAAAA,CAsBlB,CAAC,GAjBH,EAAAhC,KAAAuC,eAAApB,QACK0B,EAAkBpB,KAAKc,eAAanC,GACzCJ,KAAKsC,YAAgB,IAAIb,KAAC1B,EAAiB6C,KAAIE,EAAc/C,MAAQK,CAAAA,GAC7C,EAAnBmC,KAAAA,cAAmBpB,SACnBqB,EAAiBxC,KAAAsC,cAAA,GAsBpBtC,KAAK6C,YAAc,IAAIpB,KAAKsB,EAAaC,YAAY,EAAGD,EAAaJ,SAAS,EAAG,CAAC,GAjBpF,SAAA3C,KAAAD,QAAAG,aAsBEF,KAAKiD,sBAAsB,EAlB3BjD,KAAMI,cAAgBqB,KAAKJ,aAAajB,OAAU,CAAAJ,KAAAD,QAAAK,YACzB,QAArBJ,KAACuC,QAAAA,KAEaS,GADXE,EAAYP,KAAQQ,eAAEnD,KAAAqB,aAAA+B,KAAA,GACXJ,SAChBhD,KAAAsC,cAAAY,EACJlD,KAAA6C,YAAA,IAAApB,KAAAyB,EAAA,GAAAF,YAAA,EAAAE,EAAA,GAAAP,SAAA,EAAA,CAAA,GAEA,UAAA3C,KAAAD,QAAAE,MAE6BsC,GADpBA,EAAepB,KAAMkC,gBAAMrD,KAAAqB,aAAA+B,KAAA,GACfjC,SACfnB,KAAC6C,eAAkBpB,EACxBzB,KAAUsC,cAAKA,EAAwBgB,IAAEC,GAAA,IAAA9B,KAAA8B,EAAAX,KAAAW,EAAAb,MAAA,CAAA,CAAA,EACxC1C,KAAM+C,YAAe,IAAKT,KAAAA,EAAgB,GAAAM,KAAAY,EAAA,GAAAd,MAAA,CAAA,IA2B5C1C,KArBEyD,KAAKR,CAsBT,CAMAS,UApBQC,EAAKd,GAqBX,GApBI,CAAAc,GAAA,CAAAC,EAAA,OAAA,KAuBJ,IApBIC,EAAiB1C,CAqBnB2C,GApBI,UAqBJC,EApBI,YAqBJC,IApBI,gBAqBJC,KApBE,cACFC,GAAA,UACFC,EAAA,YAqBEC,KAAQ,UAnBVC,GAAA,SACA,EAIFC,EAAAV,EAAAW,QAAA,yBAAA,MAAA,EAGAb,OAASA,KAACC,CAAe,EAAEa,QAAAC,IACzBH,EAAgBA,EAASC,QAAW,IAAAG,OAAAD,EAAA,GAAA,EAAAZ,EAAAY,GAAAE,MAAA,CAoBpC,CAAC,EAGD,IAJEL,EACAM,EA2BUC,EANNC,EArCAC,EAAE,IAASL,WAAAJ,IAAA,EAAEU,EAAArB,EAAAqB,MAAAD,CAAA,EAsBnB,GArBoB,CAAAC,EAAA,OAAA,KAwBpBC,IAtBEC,EAAQ,EAAAxC,EAAA,EAAaE,GAAA,IAAAnB,MAAAuB,YAAA,EAwBvB,IAtBEiC,IAAGE,EAAa,EAChB,KAAMA,EAAWH,EAAA7D,QAAA,CAAE,IAAAiE,EAAAJ,EAAAG,GAIrB,UAAAE,KAAAD,CAAA,EA4BMxC,EAAO0C,SAASF,EAAK,EAAE,EAzB7B,UAAAC,KAAAD,CAAA,GAAA,GAAAE,SAAAF,EAAA,EAAA,GAEEd,EAAyBgB,SAASF,EAAIV,EAAAA,EACtCE,GAAA,IAAAnD,MAAAuB,YAAA,EA2BU6B,EAA0C,IAAhCU,KAAKC,MAAMZ,EAAc,GAAG,EAvB5CI,EADuBV,EAAe,GAAtCS,EAAmBF,EACXlB,GAAcoB,EAAM,KA4BnBU,EAAeZ,GAvBnB,YAAAQ,KAAAD,CAAA,GAAA,GAAAE,SAAAF,EAAA,EAAA,GAAAE,SAAAF,EAAA,EAAA,GAAA,GAEP,CAAA,IAAAxB,EAAA8B,QAAA,IAAA,GAAA,CAAA,IAAA9B,EAAA8B,QAAA,GAAA,EACFR,EAAAI,SAAAF,EAAA,EAAA,EA4BM1C,EAAQ4C,SAASF,EAAK,EAAE,EAAI,EAxBvB,YAASD,KAAUC,CAAC,GAAA,GAAAE,SAAAF,EAAA,EAAA,GAAAE,SAAAF,EAAA,EAAA,GAAA,GAE7BF,EAAAI,SAAAF,EAAA,EAAA,EACA,iBAAAC,KAAAD,CAAA,GAMoB,CAAA,KAJlBN,EAAA9E,KAAAD,QAAA4F,WAAAC,UAAArC,GACIA,EAAAsC,YAAYT,EAAGU,WAAKV,EAAAS,YAAA,CAAA,CACzB,KAGCnD,EAAMkC,GA8BRO,CAzBS,EA0BX,CAGA,IAzBIY,EAAA,IAAAtE,KAAAmB,EAAAF,EAAAwC,CAAA,EA0BJ,OAzBIc,MAAAD,EAAAE,QAAA,CAAA,EAAA,KAEEf,CA6BR,CAHE,MAzBKgB,GA2BL,OADApE,QAzBMY,MAAQ4C,sBAAuBY,CAAA,EACjC,IA0BN,CACF,CAOAC,eAtBQC,GAuBN,OAtBIA,GAAAA,aAAA3E,MAAA,CAAAuE,MAAAI,EAAAH,QAAA,CAAA,CAuBN,CAKA9C,eArBc4C,GAsBZ,GApBE,CAAAM,EAAON,MAAU,GAuBnB,IApBEnC,EAAW,QAAA5D,KAAAD,QAAAE,KACbD,KAAAD,QAAAuG,WACFtG,KAAAD,QAAAgB,YAMF,OAHAsF,EAAAE,MAAA,GAAA,EAAAjD,IAAAkD,GAAAA,EAAAC,KAAA,CAAA,EAIEN,IAAAA,IACaC,EAAQpG,KAAA0D,UAAYjC,EAASuE,CAAMI,EAChD,OAAApG,KAAAmG,eAAAC,CAAA,EAAAA,EAAA,IAqBM,CAAC,EAnBPM,OAAAN,GAAA,OAAAA,CAAA,CACF,CAyBE/C,gBApBEgD,GACA,OAAAA,EAKoBA,EAAWE,MAAM,GAAI,EAACjD,IAAIkD,GAAOA,EAAIC,KAAM,CAAC,EAK1DnD,IAAM8C,IAGPM,IAAON,EAAQA,KAAI1C,UAAYiD,EAAA3G,KAAAD,QAAAgB,WAAA,EACtC,GAAAqF,GAAA,CAAAJ,MAAAI,EAAAH,QAAA,CAAA,EAiBU,MAAO,CAfjBvD,MAAA0D,EAAAzD,SAAA,EACFC,KAAAwD,EAAApD,YAAA,CACA,EAsBgBgC,EAAQ2B,EAAS3B,MAjBE,wBAiBoB,EAdnD,GAAO4B,EAAAA,CAED,IAAAC,EAAA7B,EAAA,GACMoB,IAAIxD,EAAQc,SAAUiD,EAAAA,GAAU,EAAA,EAG3BP,EAAcpG,KAACD,QAAA4F,WAAAC,UAAArC,GAChB6C,EAAAA,YAAKpD,EAAW8C,WAACe,EAAAhB,YAAA,CAAA,CACxB,EAiBD,GAAmB,CAAC,IAAhBf,GAAqB,CAACkB,MAAMpD,CAAI,EAdtC,MAAA,CACAF,MAAAoC,EACMgC,KAAAA,CACA9B,CAGJ,CAIMF,EAAa6B,EAAK5G,MADxB,0BAC2C6F,EAKzC,GAAAmB,EAAO,CACArE,EAAEoC,SAAUiC,EAAA,GAAA,EAAA,EAAA,EACXnE,EAAAA,SAAAA,EAAAA,GAAAA,EAAAA,EAEV,GAAA,GAAAF,GAAAA,GAAA,IAAA,CAAAsD,MAAApD,CAAA,EACF,MAAA,CAYMF,MAAOA,EAVbE,KAAAA,CACMoE,CAGFD,CAEF,OAAMnE,IAEN,CAAA,EAUH8D,OATKhE,GAAO,OAAAA,CAAA,EApEG3C,EA8EtB,CAMA8B,gBAPca,EAAc3C,EAAYc,GAShCU,EAAkB,CAAC,GAAGxB,EAASc,YAAAA,CAAW,EAJpD,OAAA,IAAAjB,eAAAyB,EAAAE,CAAA,CACA,CAOE0F,WAAAb,EAAAxC,GAWE,GAAI,CAACwC,GAAQ,EAAEA,aAAgB3E,OAASuE,MAAMI,EAAKH,QAAQ,CAAC,EAAG,MAAO,GAL1E,GAAA,aAAArC,GAAA,cAAAA,EAAA,CACA,IAAAkB,EAAAsB,EAAAzD,SAAA,EAWM,IAAMC,EAAOwD,EAAKpD,YAAY,EAPhC,MAAeoD,aAAVA,EAGLpG,KAAAD,QAAA4F,WAAAb,GAAAoC,UAAA,EAAA,CAAA,EACA,IAAAtE,EAGY5C,KAAOD,QAACiD,WAAa8B,GAAzBlC,IAAyBA,CAUjC,CAIA,IAPIsC,EAAAkB,EAAAe,QAAA,EACAzE,EAAU0D,EAAKrG,SAAQ4F,EAQ3B,IAPE/C,EAAAwD,EAAApD,YAAA,EAGFoE,EAAAxD,EAoBAwD,OAFAA,GAKAA,GAVAA,GAFAA,GAIAA,GARAA,GAHAA,GADAA,EAAM1E,EAAQ0D,QAAKzD,QAAUC,EAAAyE,SAAA,CAAA,GAChBjB,QAAKpD,MAAaJ,EAAAyE,SAAA,EAAAC,MAAA,CAAA,CAAA,CAAA,GAGlB1D,QAAM,QAAA5D,KAAAD,QAAA4F,WAAAjD,EAAA,GAQH6B,QAAQ,OAAQvE,KAAKD,QAAQ4F,WAAWjD,GAAOwE,UAAU,EAAG,CAAC,CAAC,GAJ9D3C,QAAQ,MAAO3B,OAAKyE,EAAU,CAACC,EAAAA,SAAU,EAAA,GAAA,CAAA,GAEzD/C,QAAA,SAAAgD,OAAA7E,EAAA,CAAA,CAAA,GAUgB6B,QAAQ,MAAOgD,OAAOrC,CAAG,EAAEsC,SAAS,EAAG,GAAG,CAAC,GAL3CjD,QAAQ,SAAOgD,OAAO7E,CAAK,CAAA,CAU7C,CAOA+E,iBAJA,GAAAzH,KAAAqB,aAAA,CAEF,IAAAqG,EAAA1H,KAAAmC,QAAAwF,cAAA,kCAAA,EACA,GAAAD,EAAA,CAII,IAAMA,EAAY1H,KAAKmC,aAAQwF,sBAAc,EACxCD,EAAWA,EAAAE,aAKVC,EAAiBH,EAAUI,YAHjCC,EAAAC,OAAAC,YAKMC,EADYH,EAAUE,EAAWE,OACZC,GAAUC,EAAAC,IAAAC,EAG/BC,EAAaT,OAAAA,aAAeM,SAAgBI,gBAAAC,WAC5CC,EAAYH,OAAAA,aAAaD,SAAeE,gBAAiBG,UAG/D3D,IAAA4D,EAAMH,EAAaV,KAAOc,GAI1BD,EADAA,EAAAhB,EAdkBG,OAAK3G,WAcvBqH,EACQL,EAAYU,MAAQL,EAAUA,EAIpCG,GAAQR,IACVQ,EAAAH,EAAA,GAQAzD,IAJE4D,EACFF,GAAA,QAAA3I,KAAAD,QAAAiJ,UAEAV,EAAAD,EAAAC,IAAAC,EAAAK,GAGEA,IACAN,EAAMD,EAAUC,OAAMC,IAQtBD,EAJKD,EAAGA,OAAgBO,GAGxBL,EAAAR,EAAAa,GAAAP,EAAAC,IAAAC,IACAD,EAAMD,EAAUF,IAAMI,EAAYK,GASpClB,EAJEuB,MAAAD,SAAA,WACFtB,EAAAuB,MAAAX,IAAAA,EAAA,KAKAZ,EAAUuB,MAAMJ,KAAUA,EAAH,KAHvBnB,EAAAuB,MAAAC,OAAAlJ,KAAAD,QAAAmJ,MAvDJ,CAHE,CA+DA,CAKAzF,OAHAzD,KAAAmJ,OAAA,EACFnJ,KAAAoJ,aAAA,EAGQpJ,KAACmJ,cACLnJ,KAAKoJ,kBAAc,EAQnBpJ,KAJEqJ,KAAKC,EAGPrI,SAAAsI,iBAAA,QAAAC,IACKH,CAAAA,KAAM7G,WAKJxC,KAAKmC,QAAQsH,SAASD,EAAEE,MAAM,GAHrC1J,KAAAqB,cAAArB,KAAAqB,aAAAoI,SAAAD,EAAAE,MAAA,GACAzI,KAASsI,KAAAA,CAMT,CAAC,CACH,CAGFD,oBAEEA,KAAAA,aAAoBlH,UAAAC,IAAA,kBAAA,EAElBrC,KAAKqB,iBAAae,EAIlBpC,KAAAqB,aAAAkI,iBAAA,QAAAC,IACAA,EAAIG,gBAAcJ,EACdI,KAAAA,UACF3J,KAAIqJ,KAAK7G,EAERxC,KAAM4J,KAAA,CAGT,CAAC,EAED5J,KAAAqB,aAAAwI,aAAA,WAAA,UAAA,EAGA7J,KAAAqB,aAAAyI,aAAA,aAAA,GACA9J,KAAKqB,aAAKA,aAAayI,cAAa,eAAgB,CAGtD,CAIFC,mBACEA,IAoCFxG,EApCEwG,KAAAA,eAG4B,QAAtB/J,KAAKD,QAAQE,KACmB,IAA9BD,KAAKsC,cAAcnB,OACrBnB,KAAKqB,aAAa+B,MAAQ,GACjBpD,KAAKD,QAAQS,cAChBwJ,EAAiBhK,KAAKsC,cAAcgB,IAAI2G,GAG1CjK,KAACqB,WAAa+B,EAAKpD,KAAGgK,QAAAA,UAAoB,CAC/C,EACChK,KAAKqB,aAAa+B,MAAQ4G,EAAeE,KACjC,IAAC5H,GAIZtC,KAAMqB,aAAA+B,MAAApD,KAAAiH,WACDjH,KAAKuC,cAAepB,GAClBnB,KAACqB,QAAYiF,UAClB,EAKM,IAANtG,KAAMuC,eAAApB,OACLnB,KAAAqB,aAAekB,MAAAA,GACVlB,KAAAA,QAAa+B,gBAIpB+G,EAAAnK,KAAAuC,eAAAe,IAAAC,GACFvD,KAAAiH,WAAA,IAAAxF,KAAA8B,EAAAX,KAAAW,EAAAb,MAAA,CAAA,EAAA1C,KAAAD,QAAAgB,WAAA,CACF,EATMf,KAAKqB,aAAa+B,MAAQ+G,EAAgBD,KAAK,IAAI,IAY3D3G,EAAAvD,KAAAuC,eAAA,GACAvC,KAAAqB,aAAA+B,MAAApD,KAAAiH,WACS,IAAAxF,KAAA8B,EAAAX,KAAAW,EAAAb,MAAA,CAAA,EACG1C,KAACwC,QAAWzB,WAThB,GAGN,CAKA6I,OACE,IAoFIlC,EApFA1H,CAAAA,KAWEwC,YANFxC,KAWEqB,cAAmBrB,KAAIyB,aAAKqB,QAC9B,UAAA9C,KAAAD,QAAAE,KAG0B,GAFrBuD,EAAgBxD,KAAKqD,gBAAYrD,KAAAqB,aAAA+B,KAAA,GAEtBjC,SACdnB,KAAKsC,eAAgBY,EACrBlD,KAAAsC,cAAAkB,EAAAF,IAAAC,GAAA,IAAA9B,KAAA8B,EAAAX,KAAAW,EAAAb,MAAA,CAAA,CAAA,EAIJI,EAAAU,EAAA,GACFxD,KAAA6C,YAAA,IAAApB,KAAAqB,EAAAF,KAAAE,EAAAJ,MAAA,CAAA,GAGA,QAAA1C,KAAAD,QAAAE,MAEJ,GADAiD,EAAAlD,KAAAmD,eAAAnD,KAAAqB,aAAA+B,KAAA,GACAjC,SAGA4B,GAFA/C,KAAAsC,cAAAY,GAEA,GACAlD,KAAA6C,YAAA,IAAApB,KAAAsB,EAAAC,YAAA,EAAAD,EAAAJ,SAAA,EAAA,CAAA,IA2BQ+E,EAASlF,KAASL,QAAEwF,cAAA,kCAAA,KAVtBD,EAYEuB,MAAAmB,QAAA,QACFpK,KAACwC,UAAA,CAAA,EAID6H,WAAA,KACArK,KAAMsK,eAAYC,CAClB,EAAA,CAAI,EAVJvK,KAAKwK,cAAgB,KAczBxK,KAAAwC,WACFxC,KAAAyH,eAAA,CAEM4B,EAXArB,OAAOuB,iBAAiB,SAAUvJ,KAAKwK,aAAa,EAgBlD9C,EAAW,IAAA6C,YAAA,gBAAA,EACb7C,KAAAA,QAAUuB,cAAgBqB,CAAM,EAXpC,CAKAjB,OACE,IAcQiB,GADNtK,KAAAwC,WAAAxC,KAAAmC,QAAAwF,cAAA,kCAAA,KAGFD,EAAA1H,KAAAmC,QAAAwF,cAAA,kCAAA,KAXED,EAAUuB,MAAMmB,QAAU,OAc9BpK,KAAAwC,UAAA,CAAA,EAVQxC,KAAKwK,eAcXxC,OAAMyC,oBAAuB,SAAAzK,KAAAwK,aAAA,EATrBF,EAAQ,IAAIC,YAAY,gBAAgB,EAclDvK,KAAAmC,QAAAuI,cAAAJ,CAAA,EAXA,CAGAK,cAcY1K,GAbV,IAgBIwK,EAF4B,SAA9BzK,KAAI4K,QAASC,eAEXJ,EAAcvD,IAAAA,MAChB4D,QAAAL,EAAAtD,QAAA,EAAA,CAAA,EACFlG,SAAA2J,UAAA5K,KAAAD,QAAAW,cAAAT,aAAAwK,EAAAM,YAAA,WAbF,CAiBAC,gBACA/H,IAAAA,EAAAA,KAAAA,QAAwBvC,WAAA,IAElBuK,EADkBC,mBAAgBjK,SAAA2J,MAAA,EACXrE,MAAK,GAAK,EAErC,IAAAtB,IAAAkG,EAAA,EAAAA,EAAAN,EAAA1J,OAAAgK,CAAA,GAAA,CACFlG,IAAA2F,EAAAC,EAAAM,GAAA1E,KAAA,EAbI,GAA6B,IAAzBmE,EAAOlF,QAAQ0F,CAAI,EAe3B,OAAAR,EAAA1D,UAAAkE,EAAAjK,OAAAyJ,EAAAzJ,MAAA,CAEF,CACEkK,OAAAA,IAbA,CAGApI,wBAeE,IAAIgI,EAAatK,KAAAA,cAAS,EACxBsK,CAAAA,GAA6BtK,QAAbsK,GAAkC,UAAbjI,IACrCsI,KAAAA,QAAY/F,KAAQ0F,EAZxB,CAKAI,cAcEzG,GAEAK,IAAAqG,EAAO1G,EAAA5E,KAAAD,QAAAqB,qBAAEkK,EAAS1G,EAAA5E,KAAAD,QAAAe,oBAAlB,OACFd,KAAAD,QAAAY,UAXU4K,EAAUvL,KAAKD,QAAQY,QAAQqC,YAAY,EAarDsI,EAAA/F,KAAAiG,IAAAF,EAAAC,CAAA,GAIEvL,KAAAD,QAAAO,UACQmL,EAAS9K,KAAAA,QAASL,QAAA0C,YAAA,EACxB0I,EAAM/K,KAAOgL,IAAGD,EAASD,CAAK1L,GAI1B6C,CAAAA,UAAAA,EAAc8I,QAAAA,CAAS,CAZ/B,CAKAE,kBAakBlJ,EAACpC,GAXjB,GAaEN,KAAMyL,QAAO9K,QAAWqC,CACxB,IAAM6I,EAAQ,IAAGvL,KAAQqC,KAAAA,QAAUhC,OAAA,EAE/BiC,EAAO6I,EAAY7I,YAAS6I,EAC9BK,EAAYnL,EAAAgC,SAAA,EAEhB,GAAAC,EAAA2I,GAAA3I,IAAA2I,GAAA7I,EAAAoJ,EAEA,MAAW,CAAA,CAbX,CAkBA,GAAA9L,KAAAD,QAAAO,QAAA,CACIoH,EAAY,IAAKvF,KAAAA,KAAQwF,QAAAA,OAAc,EAEtCD,EAAWpH,EAAA0C,YAAA,EACd6I,EAAAvL,EAAAqC,SAAA,EAEA+E,GAAUxF,EAAVwF,GAAsB9E,IAAA6I,GAAAI,EAAAnJ,EAfpB,MAAO,CAAA,CAEX,CAkBJ,MAAA,CAAA,CACA,CAbEyG,SAEElE,IAgBIyC,EAAUqE,KAAAA,QAAapE,cAAA,kCAAA,EAE/B,IAoDYqE,EA1BD7J,EA1BXuF,IAiDMuE,EAAAvE,EAAAC,cAAA,mBAAA,KAEAsE,EAAAC,YAAA,WAAA,QAAAlM,KAAAD,QAAAE,KAAA,OAAA,WAMAkM,EAAAzE,EAAAC,cAAA,qBAAA,KAEJyE,EAAAD,EAAAxE,cAAA,mBAAA,EArBY0E,EAAWF,EAAOxE,cAAc,qBAAqB,EAwBjE2E,IAAgBD,IACgBrJ,QAApBhD,KAAGD,QAAK8C,MACZH,EAAQN,UAAKS,IAAAA,QAAYF,EArBvB0J,EAASjK,UAAUmK,OAAO,QAAQ,IAwBpCC,EAAAA,UAAkB/K,OAAKmB,QAAW,EArBhCyJ,EAASjK,UAAUC,IAAI,QAAQ,KAM/B2J,EAAUtE,EAAUC,cAAc,qBAAqB,KAwB/DqE,EAAMS,UAAwC,QAAvBC,KAAAA,QAAAA,KArBb1M,KAAKsM,cAAc,EAuB7BtM,KAAA2M,gBAAA,MA5EJjF,EAAAzG,SAAAgB,cAAA,KAAA,GACSC,UAAA,kCAGHwF,EAAAqE;;gDAEwC,QAAA/L,KAAAD,QAAAE,KAAA,OAAA;;QAMxC,SAAAD,KAAAD,QAAAG,cAEAwH,EAAUjF;;4CAEV,QAAAzC,KAAAD,QAAAE,KAAA,SAAA;4CACuB,UAAAD,KAAAD,QAAAE,KAAA,SAAA;;YAOlBkC,EAAQM,SAAYiF,cAAU,KAAA,GAC9BxF,UAAA,qBAEmByF,QAAxB3H,KAAMiM,QAAQvE,KACdsE,EAASD,UAAE/L,KAAAsM,cAAA,EAEXN,EAAAD,UAAA/L,KAAA2M,gBAAA,EAGAjF,EAAMyE,YAASzE,CAAUC,EAhBzBD,EAmBQ2E;;;;;QAZRrM,KAAKmC,QAoBCkK,YAAmBhK,CAAI,EAmCnC,CAGAiK,gBACA,IAAK1J,EAAA5C,KAAA6C,YAAAG,YAAA,EArBKN,EAAQ1C,KAAK6C,YAAYF,SAAS,EAyBnC6J,EAAe,IAAI/K,KAAImB,EAAAF,EAAA,EAAA,CAAA,EAAAyE,QAAA,EAhBtByF,EAHkB,IAAInL,KAAKmB,EAAMF,EAAO,CAAC,EAAEmK,OAAO,EA4BlDC,EAAAA,KAAgBpK,mBAAkBE,CAAI,EAI1CmK;;;gBApBU/M,KAAKD,QAAQ4F,WAAWjD,MAAUE;;;MAM9CqC,IAuBE+H,EAAiBvL,0CAtBnB,IAuBEwD,IAAMgI,EAAAA,EAAO9B,EACT+B,EAAK/B,CAAChE,GAIV6F,4BAAsChN,KAAAD,QAAAoN,SAAAhC,WAvBxClG,IA2BEmI,EAAMC,GAxBR,IA6BMC,EAAkB,IAAA7L,KADtB,IAAAiB,EAAAE,EAAA,EAAAA,EACsB,GA7BI,IAAVF,EAAc,GAAKA,EAAQ,GA6BrB,CAAA,EAAAyE,QAAA,EAzBxB,IA2BElC,IAAAkG,EAAA,EAAAA,EAAAyB,EAAAzB,CAAA,GAAA,CACA,IAAAjG,EAAAqI,EAAAX,EAAAzB,EAAA,EACAiC,iDAAsClI,SA1BxC,CAGA,IA2BEgI,EAAA,IAAAzL,KA1BFyL,EA2BMM,SAAKzN,EAAO,EAACY,EAAAA,CAAAA,EAzBnB,IA2BIA,IAAAA,EAAQ6M,EAAAA,GAAShB,EAAWrB,CAAA,GAAA,CA1B9B,IA2BMkC,EAAAA,IAAW5L,KAAGd,EAAO+B,EAAE4K,CAAAA,EAC7BL,EA1BIC,EAAM/F,QAAQ,IAAMgE,GA4BxB+B,EAAAvK,SAAA,IAAAD,GACIwK,EAAKnN,YAAQO,IAASsC,EAExBtC,EAA4B,IAAX8F,EAAIyG,OAAO,EACxBQ,EAAWrN,KAAGM,eAAmB8F,CAAG,EAxBpCiH,EAAc,IAAI5L,KAAK2E,CAAI,EAoC3BqH,GADNJ,EAAAG,SAAA,EAAA,EAAA,EAAA,CAAA,EACsBF,EAAhBG,GA/BNxI,IAAIqI,EAAa,CAAA,EAuCjBF,KAAQrN,QAAIa,sBACd0M,EAAA,EAAAI,GAAAC,IAKIC,KAAOnB,QAAAA,WAnCD9L,EAAU,IAAIc,KAAKzB,KAAKD,QAAQY,OAAO,GAqCjD6M,SAAA,EAAA,EAAA,EAAA,CAAA,EACQH,EAAS7M,KAAY8M,EAAShL,CAAAA,GAWhCO,EAAW,CACjB,WACAoK,EAAMrI,QAAc/B,GApChBgL,EAAa,WAAa,IA+BdP,EAHlBtN,KAAAD,QAAAO,WApCYA,EAAU,IAAImB,KAAKzB,KAAKD,QAAQO,OAAO,GAsCnDkN,SAAA,EAAA,EAAA,EAAA,CAAA,EACkBlN,EAAlBqM,GAAkB,CAAA,EAOhBW,GAAA,WAAA,GACAI,EAAe,WAAQhB,IApCnBhG,OAAOoH,OAAO,EAAE5D,KAAK,GAAG,EAyCvBuD,EAAmBtC,EAAK,GAAA,wBAG3BiC,kBAAAW,MAAAN,gBAAA7K,KAAAF,EAAA,KAAAyI,MAAAA,SAtCF,CAGA,IAwCE6C,EACE,IAAYpB,EACCJ,GAzCjB,IA8CEvH,IAAMgJ,EAAAA,EAAAA,GAAaC,EAAe/C,CAAA,GAElCgD,iDAAuDhD,UA5CzDiC,GAAY,SAGZnI,IAAI2I,EAAOnB,EAAYM,EAAUC,EAAiBI,EAOlD,OA4CEQ,KAAI7N,QAASqO,cAAsB,EAAtBA,KAAsB9L,cAAAnB,SACrCyM,GAAA5N,KAAAqO,oBAAA,GA7COT,CAkDT,CA9CAjB,kBAEE,IA+CmBjB,EAAAA,KAAAA,YAAAA,YAAAA,EAAY7I,EAAKwI,IAAczG,KAE9CgJ,EAAO/K,EAAAF,SAAA,EACPiC,EAAI/B,EAAAG,YAAgC,EAIxCyJ,EAAAzM,KAAA0M,mBAAA9J,CAAA,EAKAqC,IAAAkJ,EAAW,2CAhDX,IAAKlJ,IAAIkG,EAAI,EAAGA,EAAI,GAAIA,CAAC,GAAI,CAoD/BkD,IAAAA,EAAsBrO,KAAAsO,gBAAAnD,EAAAvI,CAAA,EAEZsL,EAAAlO,KAAA4L,kBAA6BT,EAAAvI,CAAA,EAKzCmL,EAAA,CACA,aACAF,EAAA,WAAA,GAJwB1C,IAAKlE,GAAiBrE,IAAYgC,EAK1D,aAAA,GACOsJ,EAAA,GAAA,YACDxH,OAAAoH,OAAA,EAAA5D,KAAA,GAAA,EAGK0D,EAAIM,iBAAA/C,iBAAAvI,KAAA,GAlDTuL,kBAA6BJ,MAAYE,KAAcjO,KAAKD,QAAQ4F,WAAWwF,UAqDnF,CA/CElG,IAqDE2I,EAAAnB,GAJF0B,GAAW,UA1CX,OAkDEnO,KAAAD,QAAAU,gBAAA,EAAAT,KAAAuC,eAAApB,SArDAyM,GAAQ5N,KAAKoO,qBAAqB,GAyD9BpI,CArDR,CAGA0G,mBAAmB9H,GAEjB,GAuDM2J,CAAAA,UAAAA,EAAW7C,QAAAA,CAAA,EAAA1L,KAAAqL,cAAAzG,CAAA,EAErBK,IAAA2I,EAAA,iCACAA,GAAYW,iCAEZ,IAAAtJ,IAAArC,EAAA0I,EAAA1I,GAAA8I,EAAA9I,CAAA,GACAgL,qBAAOhL,MAAAA,IAAAgC,EAAA,WAAA,MAAAhC,aAjDH,OAsDAgL,EADAA,EAAQ,YACDA,QAGT,CAOAS,sBA3DEpJ,IAAI2I,EAAO,uDA+EX,OAlBFA,GAAA,8BAEE5N,KAAAsC,cAAYC,QAAeiM,CAAAA,EAAKC,KAGlCF,EAAAvO,KAAAiH,WAAAb,EAAApG,KAAAD,QAAAuG,UAAA,EA7DIsH;iDA+DJtM;YACAoN;mDAE6CpN;;OAK7C,CAAA,EAEEsM,GAAA,QA/DF,CAGAQ,uBACEnJ,IAAI2I,EAiEE,wDA6BN,OA7FAA,GAiEM,8BA/DN5N,KAAKuC,eAiEciC,QAAA,CAAAiK,EAAAnN,KA/Db,CAACmN,GAA8B,UAAtB,OAAOA,EAAK/L,OAA2C,UAArB,OAAO+L,EAAK7L,MAkEvD6L,EAAA/L,MAAA,GAAA,GAAA+L,EAAA/L,OAAAsD,MAAAyI,EAAA7L,IAAA,IAGE+L,EAAA,IAAAlN,KAAAgN,EAAA7L,KAAA6L,EAAA/L,MAAA,CAAA,EACFsD,MAAK7D,EAAQuI,QAAAA,CAAAA,KA3DX6D,EAAYvO,KAAKiH,WAAW0H,EAAS3O,KAAKD,QAAQgB,WAAW,KAmEnE6N;iDAC0ClF;YACpC6E;mDACejN;;QAIvB,CAAA,EAEAsM,GAAMiB,QA7DR,CAGAC,eAgEM1I,GA/DJ,OAgEIpG,KAAQsC,cAAS3B,KAASoC,GA/D1BA,EAgEQpC,QAAU,IAASyF,EAAKrG,QAAQY,GA/DxCoC,EAgEQgM,SAAY,IAAQlM,EAAAA,SAAYF,GA/DxCI,EAgEQ6B,YAAc,IAAK/B,EAAAA,YAAYG,CA/D3C,CACF,CAGAsL,gBAiEQ5L,EAAAE,GAhEN,OAiEI5C,KAAAuC,eAAAiM,KAAAC,GAEAA,EAAK5L,QAAAA,GAAYmM,EAASpM,OAAKC,CAjEnC,CACF,CAGA6L,8BACE,OAoEyB,OAArBlF,KAAEG,QAAAA,mBAlEF3J,KAAKuC,eAAepB,QAAUnB,KAAKD,QAAQI,iBAEjD,CAGAiJ,eAqEQ,SAnEFpJ,KAmEED,QAAAG,aACK6O,KAAAA,QAAiB7N,iBAAiB,iBAAa8B,EAlEnDwB,QAoECyK,IAnEJA,EAoEE1F,iBAAA,QAAAC,IACFA,EAAAG,gBAAA,EAEK9G,EAAAA,EAAYmM,aAAcnM,WAAYF,EAC3C3C,KAAKmJ,QAAQlJ,KAAAA,EACbD,KAAKoJ,cAAcnJ,CAAA,EACnBD,KAAAmJ,OAAA,EACJnJ,KAAAoJ,aAAA,EAGSrJ,EAAQE,IAAIsK,YAAY,uBAAA,CAC/B2E,OAAA,CAAAjP,KAAAA,CAAA,CACA,CAAA,EACAkP,KAAS3K,QAAQU,cAAOoF,CAAA,CACtBpF,CAAAA,CApEF,CAAC,EAjBH,IAqBM0J,EAqEQ7L,KAAYZ,QAAOV,cAAWiB,gBAAgB,EA3DtD0M,GATFR,GACFA,EAsEQrF,iBAAA,SAAAC,IArENxJ,KAAK6C,YAsEYwM,YAAQ/M,SAAakH,EAAC5D,OAAAA,MAC7BqE,EAAE9C,CAAAA,EAtEZnH,KAAKmJ,OA2EK7H,EA1EVtB,KAAKoJ,aA2EG,CA1EV,CAAC,EA+EOpJ,KAAAmC,QAAAwF,cAAA,aAAA,GA1EJkH,EAAe7O,KAAKmC,QAAQwF,cAAc,aAAa,EA6H7D,GA3HIyH,GACFA,EA2EQD,iBAAmB,QAAO/M,IAvEhC,GAHAoH,EAAEG,gBAAgB,EAGd3J,KA2EID,QAAMuP,QAAYC,CA1ExB,IA2EM5O,EAAM6O,IAAAA,KAAaxP,KAAKmC,QAAQwF,OAAAA,EAChCoH,EAAc/O,KAAE6C,YAAAF,SAAA,EA1EhBiC,EA2EaxC,KAAAA,YAAcY,YAAW,EAxE5C,GA4EiB,IAAb+L,GAAanK,IAAAjE,EAAAqC,YAAA,GACb+L,IAAkBpO,EAACgC,SAAA,GAAAiC,IAAAjE,EAAAqC,YAAA,EACrB,MA1EJ,CAEAhD,KAAK6C,YA4ECmM,SAAAhP,KAAA6C,YAAAF,SAAA,EAAA,CAAA,EA3EN3C,KAAKmJ,OA4EC,EA3ENnJ,KAAKoJ,aA4EU5E,CA3EjB,CAAC,EAGCqK,GACFA,EA4EQtF,iBAAkBgB,QAAYf,IAxEpC,GAHAA,EAAEG,gBA4Ec,EAzEZ3J,KAAKD,QA4ECwC,QAAgB,CA3ExB,IA4EMjC,EAAA,IAAAmB,KAAAzB,KAAAD,QAAAO,OAAA,EACAyO,EAAA/O,KAAA6C,YAAAF,SAAA,EACFiC,EAAa8F,KAAAA,YAAoB1H,YAAA,EAzErC,GA4ES+G,KAALgF,GAAuBnK,IAAAtE,EAAA0C,YAAA,GA3EtB+L,IAAiBzO,EAAQqC,SAAS,GAAKiC,IAAgBtE,EAAQ0C,YAAY,EAC9E,MAEJ,CAEAhD,KAAK6C,YA4EU9C,SAAQQ,KAAAA,YAAcoC,SAAA,EAAA,CAAA,EA3ErC3C,KAAKmJ,OA4EO,EA3EZnJ,KAAKoJ,aA4EC,CA3ER,CAAC,EAgFH,QAAApJ,KAAAD,QAAAE,KAAA,CAEA,IAAAkP,EAAAnP,KAAAmC,QAAAjB,iBAAA,kCAAA,EACAiO,EAAA3K,QAAAU,IACAA,EAAAqE,iBAAA,QAAAC,IA3EMA,EAAEG,gBAAgB,EA6ExBhG,EAAAuB,EAAA4E,aAAA,WAAA,EACI,GAAK/J,EAAQE,CACTwP,GAAAA,CAAAA,EAAa/M,EAAKP,GAAQjB,EAAAA,MAAgB,GAAC,EAAAoC,IAAAoM,MAAA,EACjDD,IAAWjL,EAAgB,IAAA/C,KAAAmB,EAAAF,EAAA,EAAA0D,CAAA,EAErBuD,KAAAA,QAAiBnJ,cAYNT,CAAAA,KAVHuB,EAAGgE,KAASmJ,cAAK3E,UAAaG,GAEhCA,EAAClK,QAAQU,IAAAA,EAAgB0G,QAAA,GAC/B8C,EAAAtH,SAAA,IAAAI,EAAAJ,SAAA,GACMrB,EAAAA,YAAaiB,IAAAA,EAAeqD,YAC5BlD,CAGN,GAII1C,KAAKuC,cAAcX,KAAC+N,CAAO,EAG7B3P,KAAAsC,cAAAsN,OAAAtO,EAAA,CAAA,EA3EA6N,EAAS3K,QAAQqL,GAAMA,EAAGzN,UAAUmK,OAAO,UAAU,CAAC,EAgFvDvM,KAAMsC,cAAAkC,QAAA+K,IACLD,KAAAC,EAAAvM,YAAA,KAAAuM,EAAA5M,SAAA,EAAA,KAAA4M,EAAApI,QAAA,EACK5E,EAAeqN,KAAMzN,QAAQwF,sCAAE2H,KAAA,EA5E9BE,GA8ENA,EAAApN,UAAAC,IAAA,UAAA,CAEF,CAAA,EAGArC,KAAAmJ,OAAA,EACAnJ,KAAKmJ,aAAQ,IAGbnJ,KAAAsC,cAAA,CAAAS,GAIAoM,EAASpP,QAAQQ,GAAAA,EAAAA,UAAcgM,OAAA,UAAA,CAAA,EAE/BrH,EAAA9C,UAAAC,IAAA,UAAA,EAGKE,EAAAA,IAAcgI,YAAI,kBAAA,CAAE7H,OAAK,CAAEE,KAAAA,MAAON,cAAAtC,KAAAsC,cA1EjCC,eAAgB,EA4EtB,CACA,CAAA,EA1EEvC,KAAKmC,QAAQuI,cAAcJ,CAAK,EAGhCtK,KAAK+J,iBAAiB,EA8ExB/J,KAAKoJ,KAAAA,EAGLpJ,KAAAD,QAAAQ,cACAP,KAAMsK,QAAQ/J,aAAgBP,KAAAsC,cAAmB,EAAA,EAxEnD,CACF,CAAC,CACH,CAAC,CACH,CAkFmB,UA3EftC,KA2EID,QAASE,MA1EID,KAAKmC,QAAQjB,iBAAiB,4BAA4B,EA4EvEsD,QAAAiK,IA1EJA,EA2EIlF,iBAAiBhJ,QAAAA,IA1EnBiJ,EAAEG,gBA2EepJ,EA1EjB,IA2EEmC,EAAA4C,SAAAmJ,EAAA3E,aAAA,YAAA,EAAA,EAAA,EACFlH,EAAA0C,SAAAmJ,EAAA3E,aAAA,WAAA,EAAA,EAAA,EAEF9J,KAAAD,QAAAU,gBAMkB,CAAC,KA/ETa,EAAQtB,KAAKuC,eAAeqD,UAAUrC,GA4EpDA,EAAAb,QAAAA,GAAAa,EAAAX,OAAAA,CACMkN,IAIIxO,KAAQgE,QAASyK,mBAAiB/P,KAAAuC,eAAkBpB,QAAAnB,KAAAD,QAAAI,mBAGnDmC,KAAAA,eAAqBhB,MAAK,EAK5B6H,KAAM5G,eAAEX,KAAA,CAAAc,MAAAA,EAAAE,KAAAA,CAAA,CAAA,EAGb5C,KAAAsC,cAAAtC,KAAAuC,eAAAe,IAAAC,GAAA,IAAA9B,KAAA8B,EAAAX,KAAAW,EAAAb,MAAA,CAAA,CAAA,IAGI1C,KAAKD,eAAQQ,OAAae,EAAKvB,CAAAA,EAG/BC,KAAKD,cAAQQ,KAAagC,eAAayN,IAAQzM,GAAG0M,IAAKxO,KAAGwO,EAAKrN,KAAIW,EAAAb,MAAA,CAAA,CAAA,GAxEnE1C,KAAKmJ,OAAO,EA8EpBnJ,KAAAoJ,aAAA,EAGE8G,KAAS3G,iBAAiB,EAGnBhH,KAAAA,QAAchC,cACd4I,KAAMpJ,QAAEQ,aAAAP,KAAAsC,aAAA,IAITtC,KAAKqB,eAAc,CAAA,CAAAqB,MAAAA,EAAAE,KAAAA,CAAA,GA1EnB5C,KAAKsC,cAAgB,CAAC,IAAIb,KAAKmB,EAAMF,EAAO,CAAC,GAgF7C1C,KAACmC,YAAQuI,IAAcJ,KAAK1H,EAACF,EAAA,CAAA,EAG7B1C,KAAKD,OAAO,EACdC,KAAKD,aAAQQ,EAzEL+J,EAAQ,IAAIC,YAAY,kBAAmB,CA8EzD2E,OAAA,CACAjP,KAAA,QACAqC,cAAAtC,KAAAsC,cA5EYC,eAAgBvC,KAAKuC,cA8EjC,CACM4N,CAAAA,EACFA,KAAQhO,QAAEuI,cAAAJ,CAAA,EAGN8F,KAAAA,iBAAsB,EAG5BpQ,KAAAqJ,KAAA,EA1EUrJ,KAAKD,QAAQQ,cA8ErBP,KAAAD,QAAAQ,aAAAP,KAAAsC,cAAA,EAAA,EAGA,CAAA,CA5EF,CAAC,EAImBtC,KAAKmC,QAAQjB,iBAAiB,aAAa,EA8E7DsD,QAAAuL,IA5EFA,EA6EExG,iBAAiBhJ,QAAYiJ,IA5E7BA,EA6EEG,gBAAA,EA5EF,IA6EMrI,EAAKvB,SAAYgQ,EAAAjG,aAAgB,YAAarJ,EAAAA,EAAAA,GAE3B8B,QA7ErBvC,KA6EED,QAAWE,KA5EfD,KA6EIsC,cA3EJtC,KA6EGuC,gBAFCqN,OAAAtO,EAAA,CAAA,EAxENtB,KA6EEmJ,OAAA,EA5EFnJ,KA6EEoJ,aAAA,EA1EEpJ,KA6EED,QAAKA,eACA,QAANC,KAAMD,QAAAE,KA5EPD,KA6EED,QAAKA,aAAQQ,KAAaR,QAAKiQ,SAAAhQ,KAAAsC,cAAAtC,KAAAsC,cAAA,EAAA,GAEnC2N,EAAAjQ,KAAAuC,eAAAe,IAAAC,GAAA,IAAA9B,KAAA8B,EAAAX,KAAAW,EAAAb,MAAA,CAAA,CAAA,EACF1C,KAAAD,QAAAQ,aAAAP,KAAAD,QAAAiQ,SAAAC,EAAAA,EAAA,EAAA,GA1EF,CAAC,CACH,CAAC,EAGKC,EA6EE3N,KAAcJ,QAAOI,cAAAA,uBAAAA,EA5EzB2N,GACFA,EA6EI3G,iBAAA,QAAAC,IACFA,EAAAG,gBAAae,EACb1K,KAAAsC,cAAA,GACJtC,KAAAuC,eAAA,GACFvC,KAAAmJ,OAAA,EA5EMnJ,KAAKoJ,aAAa,EAgF1BpJ,KAAAqB,eA5EUrB,KAAKqB,aAAa+B,MAAQ,IAiFpCkH,EAAA,IAAAC,YAAA,iBAAA,EACE8F,KAAQpQ,QAAMyK,cAAAJ,CAAA,EAGNtK,KAAKD,QAAQG,cACfF,KAAK2K,QAAAA,aAAmB,IAAA,CAE1B,CAAA,EASJwF,EAAAnQ,KAAAmC,QAAAwF,cAAA,uBAAA,EA7EMwI,IAiFRC,EAAAD,EAAAG,UAAA,CAAA,CAAA,EACAH,EAAAI,WAAAC,aAAAJ,EAAAD,CAAA,EAGMC,EAAY7G,iBAAekH,QAAIjH,IA7E7BA,EAAEG,gBAAgB,EAoFpB3J,KAAA+J,iBAAA,EAGF/J,KAAAqJ,KAAA,EA3EQrJ,KAAKD,QAAQQ,eAgFzB,UAAAP,KAAAD,QAAAE,MAAAD,KAAAD,QAAAU,eACA,EAAAT,KAAAuC,eAAApB,QACA8O,EAAAjQ,KAAAuC,eAAAe,IAAAC,GAAA,IAAA9B,KAAA8B,EAAAX,KAAAW,EAAAb,MAAA,CAAA,CAAA,EAEcgO,KAAAA,QAAanQ,aAAE0P,CAAA,GA5EfjQ,KAAKD,QAAQQ,aAAa,IAAI,EAkFN,QAApBkB,KAAM1B,QAAEiD,OACjB,EAAAhD,KAAAsC,cAAAnB,OACEnB,KAAQD,QAAEQ,aAAAP,KAAAD,QAAAS,aAAAR,KAAAsC,cAAAtC,KAAAsC,cAAA,EAAA,EA5EPtC,KAAKD,QAAQQ,aAAa,IAAI,IAoFpC+J,EAAA,IAAAC,YAAA,kBAAA,CACH2E,OAAM,CACA5M,KAAAA,KAAAA,QAAkBrC,KAClBsC,cAAcvC,KAAKsC,cAC1BC,eAAAvC,KAAAuC,cAEK4G,CACD,CAACC,EACDpJ,KAAC+J,QAAAA,cAAkBO,CAAA,CAEvB,CAAA,EA9EF,CAUA+F,QAgFIpQ,GAcJ,MAbSsC,QAALtC,GAA2BsC,UAARtC,IA/EnBD,KAAKD,QAAQE,KAAOA,EAiFpB,SAAAD,KAAAD,QAAAG,aACAF,KAAKsC,cAAgBrC,CAAI,EAKzBD,KAAKoJ,OAAAA,EACLpJ,KAAK+J,aAAAA,EACP/J,KAAA+J,iBAAA,GAGF/J,IAnFA,CAsFF2Q,UACA,OAAA3Q,KAAAD,QAAAE,IACA,CA9EE2Q,eAqFeH,GAcb,MAbSR,SAAPQ,GAA4B,QAATA,GACDhQ,UAATgQ,IAIb,UAHEzQ,KAAAD,QAAAG,YAAAuQ,KAIJzQ,KAAAD,QAAAE,KAAAwQ,GAIIzQ,KAAKD,OAAQS,EACbR,KAAKmJ,aAAQ,GAENnJ,IACT,CAMA6Q,QAAAA,GA2BA,OA1BMC,MAAC/Q,QAAQU,CAAAA,GACbT,KAAKmJ,cAAQ/C,EAAA9C,IAAA2G,GAAA,IAAAxI,KAAAwI,CAAA,CAAA,EAGfjK,KAAAuC,eAAA6D,EAAA9C,IAAA2G,IAAA,CArFMvH,MAAO,IAAIjB,KAAKwI,CAAC,EAAEtH,SAAS,EAuFlCC,KAAA,IAAAnB,KAAAwI,CAAA,EAAAjH,YAAA,CACF,EAAA,GACAoD,GACApG,KAAAsC,cAAA,CAAA,IAAAb,KAAA2E,CAAA,GAGSrG,EAAO,IAACU,KAAAA,CAAAA,EACbT,KAAKmJ,eAAQ,CAAA,CACTzG,MAAC0G,EAAAA,SAAc,EACnBxG,KAAOqH,EAAIjH,YAAA,CACb,KAEAhD,KAAAsC,cAAA,GACFtC,KAAAuC,eAAA,IAGEwO,KAAAA,OAAcnN,EACZ5D,KAAKD,aAAQuG,EACbtG,KAAK+J,iBAAiB,EAExB/J,IArFA,CAMAgR,qBAsFejQ,GAkBjB,OApGkB,QAmFdf,KAAK+J,QAAAA,kBAAkBkH,IAnFDjR,KAAKuC,eAAepB,OAAS8P,IAwFvDjR,KAAAuC,eAAAvC,KAAAuC,eAAA+E,MAAA,CAAA2J,CAAA,EAGEC,KAAAA,cAAiBlR,KAAAuC,eAAAe,IAAAC,GACVxD,IAAAA,KAAQY,EAAAA,KAAUyF,EAAAA,MAAO,CAAA,CAC9B,EAEApG,KAAOmJ,OAAI,EACbnJ,KAAAoJ,aAAA,EArFIpJ,KAAK+J,iBAAiB,GAyF5B/J,IACA,CAMEmH,UArFE,IA2FA8I,EA3FA,MAA0B,QAAtBjQ,KAAKD,QAAQE,KAuFnB,IAAAD,KAAAsC,cAAAnB,OAAA,KACFnB,KAAAD,QAAAS,aAAAR,KAAAsC,cAAAtC,KAAAsC,cAAA,GAI2B,KADvB2N,EAAAjQ,KAAAuC,eAAAe,IAAAC,GAAA,IAAA9B,KAAA8B,EAAAX,KAAAW,EAAAb,MAAA,CAAA,CAAA,GACSrB,OAAc,KACrBrB,KAAMmR,QAAAA,eAAuB9P,EAAaiP,EAAAA,EApF9C,CAMAc,gBAAgBC,GA0Fd,OAHArR,KAAAD,QAAAS,aAAA,CAAA,CAAA6Q,EACArR,KAAKmC,OAAO,EACZnC,KAAKqB,aAAY,EACZW,IArFP,CAMA6O,kBAsFYH,GAlFV,OAHA1Q,KAsFED,QAAOkQ,eAAe,CAAA,CAAAoB,EArFxBrR,KAsFImJ,OAAMzG,EArFV1C,KAAKoJ,aAqFkD,EAAUpJ,IAnFnE,CAMAsR,YAoFMD,GA/EJ,OAJArR,KAoFKkK,QAAK1J,aAAK,CAAA,CAAA6Q,EACfrR,KAACD,QAAMU,eAAA,CAAA,CAAA4Q,EAnFPrR,KAoFEmJ,OAAMzG,EAnFR1C,KAmFkD0C,aAAO,EAAU1C,IAjFrE,CAMA+Q,cAkFInN,GAIN,OAHI5D,KAAAD,QAAAuG,WAAA1C,EACF5D,KAAA+J,iBAAA,EAEF/J,IAlFE,CAMAuR,eAAe3N,GAGb,OAFA5D,KAAKD,QAAQgB,YAAc6C,EAC3B5D,KAAK+J,iBAAiB,EACf/J,IACT,CAMAkR,WAAW9K,GAIT,OAHApG,KAAKD,QAAQY,QAAUyF,EAAO,IAAI3E,KAAK2E,CAAI,EAAI,KAC/CpG,KAAKmJ,OAAO,EACZnJ,KAAKoJ,aAAa,EACXpJ,IACT,CAMAwR,WAAWpL,GAIT,OAHApG,KAAKD,QAAQO,QAAU8F,EAAO,IAAI3E,KAAK2E,CAAI,EAAI,KAC/CpG,KAAKmJ,OAAO,EACZnJ,KAAKoJ,aAAa,EACXpJ,IACT,CAKAyR,UAEE,IACQN,EADJnR,KAAKqB,eACD8P,EAAkBnR,KAAKqB,aAAaiP,UAAU,CAAA,CAAI,EACxDtQ,KAAKqB,aAAakP,WAAWC,aAAaW,EAAiBnR,KAAKqB,YAAY,GAI1ErB,KAAKgC,kBAAoBhC,KAAKgC,iBAAiBuO,YACjDvQ,KAAKgC,iBAAiBuO,WAAWmB,YAAY1R,KAAKgC,gBAAgB,EAIpEhC,KAAKmC,QAAU,KACfnC,KAAKqB,aAAe,KACpBrB,KAAKgC,iBAAmB,KACxBhC,KAAK2B,UAAY,EACnB,CAGAgQ,iBAAiB1B,GACf,IAAM2B,EAAc5R,KAAK2Q,QAAQ,EACjC,IAYQjO,EACAE,EAbR,OAAIkO,MAAMJ,QAAQT,CAAK,EACdA,EAAM3M,IAAI2G,IACf,IAAMvH,EAAQuH,EAAE4H,eAAe,UAAW,CAAEnP,MAAO,OAAQ,CAAC,EACtDE,EAAOqH,EAAEjH,YAAY,EACrBkC,EAAM+E,EAAE4C,OAAO,EACrB,MAAI,OAAS+E,EACD1M,MAAOxC,KAASE,EAEhBF,EAAH,IAAYE,CAEvB,CAAC,EAAEsH,KAAK,IAAI,GAENxH,EAAQuN,EAAM4B,eAAe,UAAW,CAAEnP,MAAO,OAAQ,CAAC,EAC1DE,EAAOqN,EAAMjN,YAAY,EACzBkC,EAAM+K,EAAM9I,QAAQ,EACtB,OAASyK,EACE1M,MAAOxC,KAASE,EAEjBF,EAAH,IAAYE,EAG3B,CAEF,CAIAoF,OAAOpI,eAAiBA","file":"datepicker-tabs.min.js","sourcesContent":["/**\n * DatepickerTabs\n *\n * A versatile date picker with day and month selection modes,\n * multiple selection support, and various formatting options.\n * Perfect for booking systems when users need to select multiple dates or months.\n *\n * @version 1.0.3\n *\n * FEATURES:\n * - Day and Month selection modes\n * - Single or multiple selection for both days and months\n * - Format customization\n * - Min/Max date constraints\n * - Max month selection limit\n * - Display type options: 'tabs', 'day', or 'month'\n * - Saturday-only selection for specific use cases\n * - Cookie-based mode persistence\n * - Tooltip overlay positioning\n * - Mobile-friendly design\n * - Automatic container creation\n * - Support for multiple instances with class selectors\n * - Customizable year range\n *\n * USAGE:\n *\n * 1. Basic initialization:\n * ```javascript\n * // Initialize on a single input with ID\n * const picker = new DatepickerTabs('#date-input');\n *\n * // Initialize on multiple inputs with class\n * const pickers = new DatepickerTabs('.date-input-class');\n * ```\n *\n * 2. With options:\n * ```javascript\n * const picker = new DatepickerTabs('#date-input', {\n *   // Basic configuration\n *   mode: 'month',                   // 'day' or 'month' mode\n *   displayType: 'tabs',             // Display as 'tabs', 'day', or 'month'\n *\n *   // Selection options\n *   multipleDays: false,             // Allow multiple day selection\n *   multipleMonths: true,            // Allow multiple month selection\n *   maxMonthSelection: 6,            // Max selectable months (when multipleMonths=true)\n *\n *   // Date range options\n *   startDate: null,                 // Initial selected date\n *   minDate: null,                   // Minimum selectable date\n *   maxDate: new Date(2026, 11, 31), // Maximum selectable date\n *   futureSaturdaysOnly: true,       // Only enable future Saturdays in day mode\n *\n *   // Localization\n *   monthNames: ['January', 'February', '...'], // Custom month names\n *   dayNames: ['Sun', 'Mon', '...'],           // Custom day names\n *   dateFormat: 'DD/MM/YYYY',        // Date display format\n *   monthFormat: 'MMM YYYY',         // Month display format\n *\n *   // UI settings\n *   position: 'bottom',              // 'bottom' or 'top' position\n *   zIndex: 9999,                    // Picker z-index\n *\n *   // Persistence\n *   cookieName: 'datepickerTabsMode',// Cookie name for mode storage\n *\n *   // Year range configuration\n *   backwardsYearsOffset: 5,         // Years to display before current year\n *   forwardsYearsOffset: 5,          // Years to display after current year\n *\n *   // Callbacks\n *   onDateChange: function(date) {   // Date selection callback\n *     console.log('Selected date:', date);\n *   },\n *\n *   // Custom container\n *   containerId: ''                  // Custom container ID for rendering\n * });\n * ```\n *\n * 3. Methods:\n * ```javascript\n * // Set date programmatically\n * picker.setDate(new Date());\n * picker.setDate([new Date(2025, 0, 1), new Date(2025, 1, 1)]); // Multiple dates\n * picker.setDate(null); // Clear selection\n *\n * // Get currently selected date(s)\n * const date = picker.getDate();\n *\n * // Mode and display type\n * picker.setMode('month'); // Switch mode ('day' or 'month')\n * picker.getMode(); // Get current mode\n * picker.setDisplayType('tabs'); // Change display type ('tabs', 'day', or 'month')\n *\n * // Selection options\n * picker.setMultipleDays(true); // Enable/disable multiple day selection\n * picker.setMultipleMonths(true); // Enable/disable multiple month selection\n * picker.setMultiple(true); // Enable both multiple days and months selection\n * picker.setMaxMonthSelection(3); // Set maximum number of selectable months\n *\n * // Format options\n * picker.setDateFormat('YYYY-MM-DD'); // Set date format\n * picker.setMonthFormat('MM/YYYY'); // Set month format\n *\n * // Date constraints\n * picker.setMinDate(new Date(2025, 0, 1)); // Set minimum selectable date\n * picker.setMaxDate(new Date(2025, 11, 31)); // Set maximum selectable date\n *\n * // Visibility\n * picker.show(); // Show the date picker\n * picker.hide(); // Hide the date picker\n *\n * // Cleanup\n * picker.destroy(); // Remove datepicker and clean up resources\n * ```\n */\n\n\n\nclass DatepickerTabs {\n  constructor(selector, options = {}) {\n    // Define default options\n    const defaults = {\n      mode: 'day', // 'day' or 'month'\n      displayType: 'tabs', // 'tabs', 'day', or 'month' - controls if tabs should be shown\n      multipleDays: false, // Allow multiple day selection\n      multipleMonths: false, // Allow multiple month selection\n      maxMonthSelection: null, // Maximum number of months that can be selected (when multipleMonths is true)\n      startDate: null,\n      minDate: null,\n      maxDate: null,\n      futureSaturdaysOnly: false, // Option for day mode to only enable Saturdays in the future\n      onDateChange: null, // Callback when date(s) change\n      monthNames: [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n      ],\n      dayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      cookieName: 'datepickerTabsMode', // Store mode in cookie\n      dateFormat: 'DD MMM YYYY', // Default format for display\n      monthFormat: 'MMM YYYY', // Default format for month display\n      position: 'bottom', // 'bottom' or 'top' - default position relative to input\n      zIndex: 9999, // z-index for the picker container\n      containerId: '', // Custom container ID to render calendar (if not provided, one will be generated)\n      backwardsYearsOffset: 5, // How many year offset render backwards in years selectbox. If now 2025 it will render from 2020\n      forwardsYearsOffset: 5, // How many year offset render forwards in years selectbox. If now 2025 it will render till 2030\n    };\n\n    // Merge default options with provided options\n    this.options = { ...defaults, ...options };\n    \n    // Store instance references \n    this.instances = [];\n    \n    // Check if selector refers to multiple elements\n    if (typeof selector === 'string') {\n      const elements = document.querySelectorAll(selector);\n      \n      // If multiple elements found, initialize on each one\n      if (elements.length > 1) {\n        elements.forEach((inputElement, index) => {\n          const instanceOptions = {...this.options};\n          // Create a unique container ID for each instance\n          const instanceId = `datepicker-container-${Date.now()}-${index}`;\n          this.instances.push(this._createInstance(inputElement, instanceOptions, instanceId));\n        });\n        \n        return this.instances;\n      } else if (elements.length === 1) {\n        // Single element - use it as input element\n        this.inputElement = elements[0];\n      } else {\n        console.error('DatepickerTabs: No elements found with selector:', selector);\n        return;\n      }\n    } else if (selector instanceof HTMLElement) {\n      // If an actual element is passed, use it directly\n      this.inputElement = selector;\n    } else {\n      console.error('DatepickerTabs: Invalid selector or element:', selector);\n      return;\n    }\n    \n    // Create container element for this instance\n    const containerId = this.options.containerId || `datepicker-container-${Date.now()}`;\n    this.containerId = containerId;\n    \n    // Create container element and add it to the DOM\n    this.containerElement = document.createElement('div');\n    this.containerElement.id = containerId;\n    this.containerElement.className = 'datepicker-tabs-container';\n    document.body.appendChild(this.containerElement);\n    \n    // Set the element where the datepicker will be rendered\n    this.element = this.containerElement;\n\n    // Add the wrapper class to the element for CSS scoping\n    this.element.classList.add('datepicker-tabs');\n\n    // Initialize properties\n    this.currentDate = new Date(this.options.startDate || new Date());\n    this.selectedDates = this.options.startDate ? [new Date(this.options.startDate)] : [];\n    this.selectedMonths = [];\n    this.isVisible = false;\n\n    // If displayType is 'day' or 'month', force the mode to match\n    if (this.options.displayType === 'day' || this.options.displayType === 'month') {\n      this.options.mode = this.options.displayType;\n    }\n\n    // If month mode and a start date is provided, extract the month and year\n    if (this.options.mode === 'month' && this.options.startDate) {\n      const startDate = new Date(this.options.startDate);\n      this.selectedMonths.push({\n        month: startDate.getMonth(),\n        year: startDate.getFullYear()\n      });\n    }\n    \n    // Initialize current date to selected month or date if available\n    if (this.selectedMonths.length > 0) {\n      const selectedMonth = this.selectedMonths[0];\n      this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n    } else if (this.selectedDates.length > 0) {\n      const selectedDate = this.selectedDates[0];\n      this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n    }\n\n    // Try to restore mode from cookie (only if displayType is 'tabs')\n    if (this.options.displayType === 'tabs') {\n      this.restoreModeFromCookie();\n    }\n\n    if (this.inputElement && this.inputElement.value && !this.options.startDate) {\n      if (this.options.mode === 'day') {\n        const parsedDates = this.parseDateInput(this.inputElement.value);\n        if (parsedDates.length > 0) {\n          this.selectedDates = parsedDates;\n          this.currentDate = new Date(parsedDates[0].getFullYear(), parsedDates[0].getMonth(), 1);\n        }\n      } else if (this.options.mode === 'month') {\n        const parsedMonths = this.parseMonthInput(this.inputElement.value);\n        if (parsedMonths.length > 0) {\n          this.selectedMonths = parsedMonths;\n          this.selectedDates = parsedMonths.map(m => new Date(m.year, m.month, 1));\n          this.currentDate = new Date(parsedMonths[0].year, parsedMonths[0].month, 1);\n        }\n      }\n    }\n\n    // Initialize the datepicker\n    this.init();\n  }\n\n\n  /**\n   * Returns a Date object if parsing is successful, null otherwise\n   */\n  parseDate(dateStr, format) {\n    if (!dateStr || !format) return null;\n\n    // Create mapping objects for format tokens\n    const formatTokens = {\n      'DD': /(\\d{2})/, // Day with leading zero\n      'D': /(\\d{1,2})/, // Day without leading zero\n      'MMM': /([A-Za-z]{3})/, // Short month name\n      'MMMM': /([A-Za-z]+)/, // Full month name\n      'MM': /(\\d{2})/, // Month with leading zero\n      'M': /(\\d{1,2})/, // Month without leading zero\n      'YYYY': /(\\d{4})/, // Four digit year\n      'YY': /(\\d{2})/ // Two digit year\n    };\n\n    // Escape special regex characters in format\n    let regexFormat = format.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n    // Replace format tokens with regex capture groups\n    Object.keys(formatTokens).forEach(token => {\n      regexFormat = regexFormat.replace(new RegExp(token, 'g'), formatTokens[token].source);\n    });\n\n    // Create final regex with anchors\n    const regex = new RegExp(`^${regexFormat}$`);\n    const match = dateStr.match(regex);\n\n    if (!match) return null;\n\n    // Extract date parts with a more robust approach\n    let day = 1, month = 0, year = new Date().getFullYear();\n\n    try {\n      // Process all capturing groups from the regex match\n      let groupCount = 1; // Skip first group which is the whole match\n\n      while (groupCount < match.length) {\n        const val = match[groupCount];\n\n        // Try to find which part of the date this group represents\n        // based on its format and value\n        if (/^\\d{4}$/.test(val)) {\n          // Likely a 4-digit year\n          year = parseInt(val, 10);\n        } else if (/^\\d{2}$/.test(val) && parseInt(val, 10) > 31) {\n          // Likely a 2-digit year\n          const twoDigitYear = parseInt(val, 10);\n          const currentYear = new Date().getFullYear();\n          const century = Math.floor(currentYear / 100) * 100;\n\n          if (twoDigitYear + century > currentYear + 50) {\n            year = twoDigitYear + (century - 100);\n          } else {\n            year = twoDigitYear + century;\n          }\n        } else if (/^\\d{1,2}$/.test(val) && parseInt(val, 10) >= 1 && parseInt(val, 10) <= 12) {\n          // Could be month or day\n          // If we already have a month value and it's in the format where we'd expect a day, treat as day\n          if (format.indexOf('DD') !== -1 || format.indexOf('D') !== -1) {\n            day = parseInt(val, 10);\n          } else {\n            month = parseInt(val, 10) - 1; // 0-based month\n          }\n        } else if (/^\\d{1,2}$/.test(val) && parseInt(val, 10) > 12 && parseInt(val, 10) <= 31) {\n          // Definitely a day\n          day = parseInt(val, 10);\n        } else if (/^[A-Za-z]{3,}$/.test(val)) {\n          // Likely a month name\n          const monthIndex = this.options.monthNames.findIndex(m =>\n              m.toLowerCase().startsWith(val.toLowerCase())\n          );\n\n          if (monthIndex !== -1) {\n            month = monthIndex;\n          }\n        }\n\n        groupCount++;\n      }\n\n      // Create and validate the date\n      const parsedDate = new Date(year, month, day);\n      if (isNaN(parsedDate.getTime())) return null;\n\n      return parsedDate;\n    } catch (error) {\n      console.error('Error parsing date:', error);\n      return null;\n    }\n  }\n\n  /**\n   * Check if a date is valid\n   * @param {Date} date - The date to check\n   * @returns {boolean} - Whether the date is valid\n   */\n  DPTisValidDate(date) {\n    return date && date instanceof Date && !isNaN(date.getTime());\n  }\n\n  /**\n   * Parse multiple date strings from input value\n   */\n  parseDateInput(inputValue) {\n    if (!inputValue) return [];\n\n    // Determine which format to use based on mode\n    const format = this.options.mode === 'day'\n        ? this.options.dateFormat\n        : this.options.monthFormat;\n\n    // Split by commas for multiple dates\n    const dateStrings = inputValue.split(',').map(str => str.trim());\n\n    // Parse each date string and validate\n    return dateStrings\n        .map(dateStr => {\n          const date = this.parseDate(dateStr, format);\n          return this.DPTisValidDate(date) ? date : null;\n        })\n        .filter(date => date !== null); // Filter out invalid dates\n  }\n\n  /**\n   * Enhanced version of parseMonthInput to ensure more reliable parsing\n   */\n  parseMonthInput(inputValue) {\n    if (!inputValue) return [];\n\n    // Split by commas for multiple months\n    const monthStrings = inputValue.split(',').map(str => str.trim());\n\n    // Parse each month string and convert to month objects\n    return monthStrings\n        .map(monthStr => {\n          // Try direct parsing with the configured format\n          const date = this.parseDate(monthStr, this.options.monthFormat);\n          if (date && !isNaN(date.getTime())) {\n            return {\n              month: date.getMonth(),\n              year: date.getFullYear()\n            };\n          }\n\n          // If direct parsing fails, try a more flexible approach\n          // This helps with various month formats like \"Apr 2025\" or \"April 2025\"\n          const monthYearPattern = /([A-Za-z]+)\\s+(\\d{4})/i;\n          const match = monthStr.match(monthYearPattern);\n\n          if (match) {\n            const monthName = match[1];\n            const year = parseInt(match[2], 10);\n\n            // Find month by name\n            const monthIndex = this.options.monthNames.findIndex(m =>\n                m.toLowerCase().startsWith(monthName.toLowerCase())\n            );\n\n            if (monthIndex !== -1 && !isNaN(year)) {\n              return {\n                month: monthIndex,\n                year: year\n              };\n            }\n          }\n\n          // Also try numeric format like \"MM/YYYY\"\n          const numericPattern = /(\\d{1,2})[\\/\\-\\s](\\d{4})/;\n          const numMatch = monthStr.match(numericPattern);\n\n          if (numMatch) {\n            const month = parseInt(numMatch[1], 10) - 1; // Convert to 0-based\n            const year = parseInt(numMatch[2], 10);\n\n            if (month >= 0 && month <= 11 && !isNaN(year)) {\n              return {\n                month: month,\n                year: year\n              };\n            }\n          }\n\n          return null;\n        })\n        .filter(month => month !== null); // Filter out invalid months\n  }\n\n  /**\n   * Create a datepicker instance for a specific input element\n   * @private\n   */\n  _createInstance(inputElement, options, containerId) {\n    // Create a new options object with the input element\n    const instanceOptions = {...options, containerId};\n    \n    // Create a new instance and return it\n    return new DatepickerTabs(inputElement, instanceOptions);\n  }\n\n  /**\n   * DatepickerTabs Format Date Fix\n   *\n   * This is a corrected formatDate method that properly handles month name formatting\n   * without issues like replacing the 'D' in 'Dec' with the day number.\n   */\n\n\n  formatDate(date, format) {\n    if (!date || !(date instanceof Date) || isNaN(date.getTime())) return '';\n\n\n    // For the specific month-year format that's causing problems,\n    // use a direct approach\n    if (format === 'MMM YYYY' || format === 'MMMM YYYY') {\n      const monthIndex = date.getMonth();\n      const year = date.getFullYear();\n\n      if (format === 'MMM YYYY') {\n        // Use the first 3 characters of the month name\n        const shortMonthName = this.options.monthNames[monthIndex].substring(0, 3);\n        return `${shortMonthName} ${year}`;\n      } else {\n        // Use the full month name\n        return `${this.options.monthNames[monthIndex]} ${year}`;\n      }\n    }\n\n    // For other formats, use a direct replacement approach\n    // that avoids the issue with 'D' in month names\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n\n    // Create a copy of the format string\n    let result = format;\n\n    // Replace year patterns\n    result = result.replace(/YYYY/g, year.toString());\n    result = result.replace(/YY/g, year.toString().slice(-2));\n\n    // Replace month name patterns first\n    result = result.replace(/MMMM/g, this.options.monthNames[month]);\n    result = result.replace(/MMM/g, this.options.monthNames[month].substring(0, 3));\n\n    // Replace month number patterns\n    result = result.replace(/MM/g, String(month + 1).padStart(2, '0'));\n    // Use word boundary for single M to avoid replacing M in words\n    result = result.replace(/\\bM\\b/g, String(month + 1));\n\n    // Replace day patterns - after month patterns to avoid conflicts\n    result = result.replace(/DD/g, String(day).padStart(2, '0'));\n    // Use word boundary for single D to avoid replacing D in words\n    result = result.replace(/\\bD\\b/g, String(day));\n\n    return result;\n  }\n\n\n  /**\n   * Position the datepicker relative to the input element\n   * Adjusts to stay in viewport\n   */\n  positionPicker() {\n    if (!this.inputElement) return;\n\n    const container = this.element.querySelector('.custom-datepickertabs-container');\n    if (!container) return;\n\n    // Get input position and dimensions\n    const inputRect = this.inputElement.getBoundingClientRect();\n    const containerHeight = container.offsetHeight;\n    const containerWidth = container.offsetWidth;\n    const windowHeight = window.innerHeight;\n    const windowWidth = window.innerWidth;\n\n    // Check if there's enough space below\n    const spaceBelow = windowHeight - inputRect.bottom;\n    const showOnTop = spaceBelow < containerHeight && inputRect.top > containerHeight;\n\n    // Calculate scroll offset for initial positioning\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n\n    // Position horizontally - align with input field left edge\n    let left = inputRect.left + scrollLeft;\n\n    // Ensure the picker doesn't go off-screen to the right\n    if (left + containerWidth > windowWidth + scrollLeft) {\n      left = (inputRect.right - containerWidth) + scrollLeft;\n    }\n\n    // Ensure the picker doesn't go off-screen to the left\n    if (left < scrollLeft) {\n      left = scrollLeft + 5;\n    }\n\n    // Position vertically based on available space\n    let top;\n    if (showOnTop || this.options.position === 'top') {\n      // Position above the input\n      top = inputRect.top - containerHeight + scrollTop;\n\n      // If not enough space above, position below instead\n      if (top < scrollTop) {\n        top = inputRect.bottom + scrollTop;\n      }\n    } else {\n      // Position below the input by default\n      top = inputRect.bottom + scrollTop;\n\n      // If not enough space below, position above if possible\n      if (top + containerHeight > windowHeight + scrollTop && inputRect.top > containerHeight) {\n        top = inputRect.top - containerHeight + scrollTop;\n      }\n    }\n\n    // Use fixed positioning with coordinates relative to viewport\n    container.style.position = 'absolute';\n    container.style.top = `${top}px`;\n    container.style.left = `${left}px`;\n    container.style.zIndex = this.options.zIndex;\n  }\n\n  /**\n   * Initialize the datepicker\n   */\n  init() {\n    this.render();\n    this.attachEvents();\n\n    // Set up input element if provided\n    if (this.inputElement) {\n      this.setupInputElement();\n    }\n\n    // Initially hide the picker\n    this.hide();\n\n    // Add document click handler to close when clicking outside\n    document.addEventListener('click', (e) => {\n      if (this.isVisible &&\n          !this.element.contains(e.target) &&\n          (!this.inputElement || !this.inputElement.contains(e.target))) {\n        this.hide();\n      }\n    });\n  }\n\n  /**\n   * Setup input element events\n   */\n  setupInputElement() {\n    // Update input with initial date if available\n    this.inputElement.classList.add('datepicker-input');\n\n    this.updateInputValue();\n\n    // Add click handler to show the picker\n    this.inputElement.addEventListener('click', (e) => {\n      e.stopPropagation();\n      if (this.isVisible) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    // Make input readonly to prevent keyboard input\n    this.inputElement.setAttribute('readonly', 'readonly');\n\n    // Add placeholder if not already set\n    if (!this.inputElement.getAttribute('placeholder')) {\n      this.inputElement.setAttribute('placeholder', 'Select a date');\n    }\n  }\n\n  /**\n   * Update input element with formatted date value\n   */\n  updateInputValue() {\n    if (!this.inputElement) return;\n\n    if (this.options.mode === 'day') {\n      if (this.selectedDates.length === 0) {\n        this.inputElement.value = '';\n      } else if (this.options.multipleDays) {\n        const formattedDates = this.selectedDates.map(d =>\n            this.formatDate(d, this.options.dateFormat)\n        );\n        this.inputElement.value = formattedDates.join(', ');\n      } else {\n        this.inputElement.value = this.formatDate(\n            this.selectedDates[0],\n            this.options.dateFormat\n        );\n      }\n    } else {\n      if (this.selectedMonths.length === 0) {\n        this.inputElement.value = '';\n      } else if (this.options.multipleMonths) {\n        const formattedMonths = this.selectedMonths.map(m =>\n            this.formatDate(new Date(m.year, m.month, 1), this.options.monthFormat)\n        );\n        this.inputElement.value = formattedMonths.join(', ');\n      } else {\n        const m = this.selectedMonths[0];\n        this.inputElement.value = this.formatDate(\n            new Date(m.year, m.month, 1),\n            this.options.monthFormat\n        );\n      }\n    }\n  }\n\n  /**\n   * Show the datepicker\n   */\n  show() {\n    if (this.isVisible) return;\n\n    //console.log('show');\n\n    // Parse the input value every time before showing\n    if (this.inputElement && this.inputElement.value) {\n      if (this.options.mode === 'month') {\n        const parsedMonths = this.parseMonthInput(this.inputElement.value);\n\n        if (parsedMonths.length > 0) {\n          this.selectedMonths = parsedMonths;\n          this.selectedDates = parsedMonths.map(m => new Date(m.year, m.month, 1));\n\n          // Important: Always update the currentDate to show the view of the selected month\n          // This is the key fix for single month selection\n          const selectedMonth = parsedMonths[0];\n          this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n        }\n      } else if (this.options.mode === 'day') {\n        const parsedDates = this.parseDateInput(this.inputElement.value);\n        if (parsedDates.length > 0) {\n          this.selectedDates = parsedDates;\n          // Update the view to show the month of the selected date\n          const selectedDate = parsedDates[0];\n          this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n        }\n      }\n    }\n\n\n    /*\n    if (this.options.mode === 'month' && this.selectedMonths.length > 0) {\n      const selectedMonth = this.selectedMonths[0];\n      this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n    } else if (this.options.mode === 'day' && this.selectedDates.length > 0) {\n      const selectedDate = this.selectedDates[0];\n      this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n    }\n    \n    // Update currentDate to match selectedDate if one exists\n    if (this.selectedDates.length > 0) {\n      const selectedDate = this.selectedDates[0];\n      this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n    } else if (this.selectedMonths.length > 0) {\n      // If we have selected months but no dates, use the first selected month\n      const selectedMonth = this.selectedMonths[0];\n      this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n    }\n    */\n\n    // Show the container\n    const container = this.element.querySelector('.custom-datepickertabs-container');\n    if (container) {\n      container.style.display = 'block';\n      this.isVisible = true;\n\n      // Position the picker with a slight delay to ensure it's rendered\n      setTimeout(() => {\n        this.positionPicker();\n      }, 0);\n\n      // Add window resize handler (but not scroll handler)\n      this.resizeHandler = () => {\n        if (this.isVisible) {\n          this.positionPicker();\n        }\n      };\n\n      window.addEventListener('resize', this.resizeHandler);\n\n      // Trigger a custom event\n      const event = new CustomEvent('datepickerShow');\n      this.element.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Hide the datepicker\n   */\n  hide() {\n    if (!this.isVisible && !this.element.querySelector('.custom-datepickertabs-container')) return;\n\n    // Hide the container\n    const container = this.element.querySelector('.custom-datepickertabs-container');\n    if (container) {\n      container.style.display = 'none';\n      this.isVisible = false;\n\n      // Remove resize event listener\n      if (this.resizeHandler) {\n        window.removeEventListener('resize', this.resizeHandler);\n      }\n\n      // Trigger a custom event\n      const event = new CustomEvent('datepickerHide');\n      this.element.dispatchEvent(event);\n    }\n  }\n\n  // Set cookie for mode persistence\n  setModeCookie(mode) {\n    if (this.options.displayType !== 'tabs') return; // Only use cookies in tabs mode\n\n    const expiryDate = new Date();\n    expiryDate.setDate(expiryDate.getDate() + 7); // Cookie expires in 7 days\n    document.cookie = `${this.options.cookieName}=${mode};expires=${expiryDate.toUTCString()};path=/`;\n  }\n\n  // Get mode from cookie\n  getModeCookie() {\n    const name = this.options.cookieName + \"=\";\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const cookies = decodedCookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n      let cookie = cookies[i].trim();\n      if (cookie.indexOf(name) === 0) {\n        return cookie.substring(name.length, cookie.length);\n      }\n    }\n    return null;\n  }\n\n  // Restore mode from cookie if available\n  restoreModeFromCookie() {\n    const savedMode = this.getModeCookie();\n    if (savedMode && (savedMode === 'day' || savedMode === 'month')) {\n      this.options.mode = savedMode;\n    }\n  }\n\n  /**\n   * Get years range for year selector based on min/max date constraints\n   */\n  getYearsRange(currentYear) {\n    let startYear = currentYear - this.options.backwardsYearsOffset;\n    let endYear = currentYear + this.options.forwardsYearsOffset;\n\n    // Apply min date constraint\n    if (this.options.minDate) {\n      const minYear = this.options.minDate.getFullYear();\n      startYear = Math.max(startYear, minYear);\n    }\n\n    // Apply max date constraint\n    if (this.options.maxDate) {\n      const maxYear = this.options.maxDate.getFullYear();\n      endYear = Math.min(endYear, maxYear);\n    }\n\n    return { startYear, endYear };\n  }\n\n  /**\n   * Check if a month is selectable based on min/max date constraints\n   */\n  isMonthSelectable(month, year) {\n    // Check for min date constraint\n    if (this.options.minDate) {\n      const minDate = new Date(this.options.minDate);\n      const minYear = minDate.getFullYear();\n      const minMonth = minDate.getMonth();\n\n      if (year < minYear || (year === minYear && month < minMonth)) {\n        return false;\n      }\n    }\n\n    // Check for max date constraint\n    if (this.options.maxDate) {\n      const maxDate = new Date(this.options.maxDate);\n      const maxYear = maxDate.getFullYear();\n      const maxMonth = maxDate.getMonth();\n\n      if (year > maxYear || (year === maxYear && month > maxMonth)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Render the datepicker UI\n  render() {\n    // Check if the container already exists\n    let container = this.element.querySelector('.custom-datepickertabs-container');\n\n    if (!container) {\n      // First time rendering - create the full container\n      container = document.createElement('div');\n      container.className = 'custom-datepickertabs-container';\n\n      // Add header\n      container.innerHTML = `\n        <div class=\"datepicker-header\">\n          <h3 class=\"datepicker-title\">Select ${this.options.mode === 'day' ? 'Date' : 'Month'}</h3>\n        </div>\n      `;\n\n      // Add tabs only if displayType is tabs\n      if (this.options.displayType === 'tabs') {\n        container.innerHTML += `\n          <div class=\"datepicker-tabs-ui\">\n            <button class=\"datepicker-tab ${this.options.mode === 'day' ? 'active' : ''}\" data-mode=\"day\">Specific Date</button>\n            <button class=\"datepicker-tab ${this.options.mode === 'month' ? 'active' : ''}\" data-mode=\"month\">Whole Month</button>\n          </div>\n        `;\n      }\n\n      // Create content based on mode\n      const content = document.createElement('div');\n      content.className = 'datepicker-content';\n\n      if (this.options.mode === 'day') {\n        content.innerHTML = this.renderDayMode();\n      } else {\n        content.innerHTML = this.renderMonthMode();\n      }\n\n      container.appendChild(content);\n\n      // Add footer with buttons\n      container.innerHTML += `\n        <div class=\"datepicker-footer\">\n          <button class=\"datepicker-btn clear\">Clear</button>\n          <button class=\"datepicker-btn apply\">Apply</button>\n        </div>\n      `;\n\n      this.element.appendChild(container);\n    } else {\n      // Update only what's needed\n      const title = container.querySelector('.datepicker-title');\n      if (title) {\n        title.textContent = `Select ${this.options.mode === 'day' ? 'Date' : 'Month'}`;\n      }\n\n      // Update tabs only if they are present\n      const tabsUI = container.querySelector('.datepicker-tabs-ui');\n      if (tabsUI) {\n        const dayTab = tabsUI.querySelector('[data-mode=\"day\"]');\n        const monthTab = tabsUI.querySelector('[data-mode=\"month\"]');\n\n        if (dayTab && monthTab) {\n          if (this.options.mode === 'day') {\n            dayTab.classList.add('active');\n            monthTab.classList.remove('active');\n          } else {\n            dayTab.classList.remove('active');\n            monthTab.classList.add('active');\n          }\n        }\n      }\n\n      // Update content\n      const content = container.querySelector('.datepicker-content');\n      if (content) {\n        content.innerHTML = this.options.mode === 'day'\n            ? this.renderDayMode()\n            : this.renderMonthMode();\n      }\n    }\n  }\n\n  // Render day selection mode\n  renderDayMode() {\n    const year = this.currentDate.getFullYear();\n    const month = this.currentDate.getMonth();\n\n    // Get days in the current month\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n    // Get the day of the week of the first day of the month\n    const firstDayOfMonth = new Date(year, month, 1).getDay();\n\n    // Calculate days from previous month to display\n    const prevMonthDays = firstDayOfMonth;\n\n    // Create year selector\n    const yearsHtml = this.renderYearSelector(year);\n\n    // Create month navigation\n    const navHtml = `\n      <div class=\"datepicker-nav\">\n        <button class=\"datepicker-nav-btn prev-month\">&lt;</button>\n        <span>${this.options.monthNames[month]} ${year}</span>\n        <button class=\"datepicker-nav-btn next-month\">&gt;</button>\n      </div>\n    `;\n\n    // Create day names header\n    let daysHeaderHtml = '<div class=\"datepicker-days-container\">';\n    for (let i = 0; i < 7; i++) {\n      daysHeaderHtml += `<div class=\"day-name\">${this.options.dayNames[i]}</div>`;\n    }\n\n    // Create days grid\n    let daysHtml = '';\n\n    // Previous month days\n    const prevMonth = month === 0 ? 11 : month - 1;\n    const prevMonthYear = month === 0 ? year - 1 : year;\n    const daysInPrevMonth = new Date(prevMonthYear, prevMonth + 1, 0).getDate();\n\n    for (let i = 0; i < prevMonthDays; i++) {\n      const day = daysInPrevMonth - prevMonthDays + i + 1;\n      daysHtml += `<div class=\"day-item other-month disabled\">${day}</div>`;\n    }\n\n    // Current month days\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Normalize today for comparison\n\n    for (let i = 1; i <= daysInMonth; i++) {\n      const date = new Date(year, month, i);\n      const isToday =\n          today.getDate() === i &&\n          today.getMonth() === month &&\n          today.getFullYear() === year;\n\n      const isSaturday = date.getDay() === 6;\n      const isSelected = this.isDateSelected(date);\n\n      // Set hours to 0 for date comparison\n      const compareDate = new Date(date);\n      compareDate.setHours(0, 0, 0, 0);\n      const isFuture = compareDate > today;\n\n      // Check if day should be disabled\n      let isDisabled = false;\n\n      // If futureSaturdaysOnly is enabled, disable all non-Saturday days\n      // and all Saturdays that are in the past\n      if (this.options.futureSaturdaysOnly) {\n        isDisabled = !(isSaturday && isFuture);\n      }\n\n      // Apply min date restriction\n      if (this.options.minDate) {\n        const minDate = new Date(this.options.minDate);\n        minDate.setHours(0, 0, 0, 0);\n        if (compareDate < minDate) isDisabled = true;\n      }\n\n      // Apply max date restriction\n      if (this.options.maxDate) {\n        const maxDate = new Date(this.options.maxDate);\n        maxDate.setHours(0, 0, 0, 0);\n        if (compareDate > maxDate) isDisabled = true;\n      }\n\n      const classes = [\n        'day-item',\n        isToday ? 'today' : '',\n        isSelected ? 'selected' : '',\n        isDisabled ? 'disabled' : '',\n        isSaturday ? 'saturday' : ''\n      ].filter(Boolean).join(' ');\n\n      // Add a data attribute to indicate if the day is clickable\n      const clickableAttr = isDisabled ? '' : 'data-clickable=\"true\"';\n\n      daysHtml += `<div class=\"${classes}\" ${clickableAttr} data-date=\"${year}-${month+1}-${i}\">${i}</div>`;\n    }\n\n    // Next month days\n    const daysFromNextMonth = 42 - (prevMonthDays + daysInMonth);\n    for (let i = 1; i <= daysFromNextMonth; i++) {\n      daysHtml += `<div class=\"day-item other-month disabled\">${i}</div>`;\n    }\n\n    daysHtml += '</div>';\n\n    // Combine all parts\n    let html = yearsHtml + navHtml + daysHeaderHtml + daysHtml;\n\n    // If multiple day selection is enabled, add the selection info\n    if (this.options.multipleDays && this.selectedDates.length > 0) {\n      html += this.renderSelectedDates();\n    }\n\n    return html;\n  }\n\n  // Render month selection mode\n  renderMonthMode() {\n    //console.log('renderMonthMode')\n    const year = this.currentDate.getFullYear();\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    // Create year selector\n    const yearsHtml = this.renderYearSelector(year);\n\n    // Create months grid\n    let monthsHtml = '<div class=\"datepicker-month-container\">';\n\n    for (let i = 0; i < 12; i++) {\n\n      const isSelected = this.isMonthSelected(i, year);\n      // Check if month is selectable based on min/max date\n      const isSelectable = this.isMonthSelectable(i, year);\n      // Check if this is the current month\n      const isThisMonth = (i === currentMonth && year === currentYear);\n\n      const classes = [\n        'month-item',\n        isSelected ? 'selected' : '',\n        isThisMonth ? 'this-month' : '',\n        !isSelectable ? 'disabled' : ''\n      ].filter(Boolean).join(' ');\n\n      const monthAttrs = isSelectable ? `data-month=\"${i}\" data-year=\"${year}\"` : '';\n\n      monthsHtml += `<div class=\"${classes}\" ${monthAttrs}>${this.options.monthNames[i]}</div>`;\n    }\n\n    monthsHtml += '</div>';\n\n    // Combine all parts\n    let html = yearsHtml + monthsHtml;\n\n    // If multiple month selection is enabled, add the selection info\n    if (this.options.multipleMonths && this.selectedMonths.length > 0) {\n      html += this.renderSelectedMonths();\n    }\n\n    return html;\n  }\n\n  // Render year selector\n  renderYearSelector(currentYear) {\n    // Get range of years based on min/max date constraints\n    const { startYear, endYear } = this.getYearsRange(currentYear);\n\n    let html = '<div class=\"datepicker-years\">';\n    html += '<select class=\"year-selector\">';\n\n    for (let year = startYear; year <= endYear; year++) {\n      html += `<option value=\"${year}\" ${year === currentYear ? 'selected' : ''}>${year}</option>`;\n    }\n\n    html += '</select>';\n    html += '</div>';\n\n    return html;\n  }\n\n  // Render selected dates info (for multiple selection)\n  renderSelectedDates() {\n    let html = '<div class=\"multi-select-info\">Selected Dates:</div>';\n    html += '<div class=\"selected-list\">';\n\n    this.selectedDates.forEach((date, index) => {\n      const formatted = this.formatDate(date, this.options.dateFormat);\n      html += `\n        <div class=\"selected-item\" data-index=\"${index}\">\n          ${formatted}\n          <button class=\"remove-btn\" data-index=\"${index}\">×</button>\n        </div>\n      `;\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  // Render selected months info (for multiple selection)\n  renderSelectedMonths() {\n    let html = '<div class=\"multi-select-info\">Selected Months:</div>';\n    html += '<div class=\"selected-list\">';\n\n    this.selectedMonths.forEach((item, index) => {\n      // Validate the month object\n      if (!item || typeof item.month !== 'number' || typeof item.year !== 'number' ||\n          item.month < 0 || item.month > 11 || isNaN(item.year)) {\n        return; // Skip invalid months\n      }\n\n      // Create a date object and validate it\n      const dateObj = new Date(item.year, item.month, 1);\n      if (isNaN(dateObj.getTime())) {\n        return; // Skip invalid dates\n      }\n\n      const formatted = this.formatDate(dateObj, this.options.monthFormat);\n\n      // Only add to HTML if we got a valid formatted string\n      if (formatted) {\n        html += `\n        <div class=\"selected-item\" data-index=\"${index}\">\n          ${formatted}\n          <button class=\"remove-btn\" data-index=\"${index}\">×</button>\n        </div>\n      `;\n      }\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  // Check if a date is selected\n  isDateSelected(date) {\n    return this.selectedDates.some(selectedDate =>\n        selectedDate.getDate() === date.getDate() &&\n        selectedDate.getMonth() === date.getMonth() &&\n        selectedDate.getFullYear() === date.getFullYear()\n    );\n  }\n\n  // Check if a month is selected\n  isMonthSelected(month, year) {\n    return this.selectedMonths.some(item =>\n        item.month === month && item.year === year\n    );\n  }\n\n  // Check if maximum month selections reached\n  isMaxMonthSelectionsReached() {\n    return (\n        this.options.maxMonthSelection !== null &&\n        this.selectedMonths.length >= this.options.maxMonthSelection\n    );\n  }\n\n  // Attach event listeners\n  attachEvents() {\n    // Tab switching (only if displayType is 'tabs')\n    if (this.options.displayType === 'tabs') {\n      const tabs = this.element.querySelectorAll('.datepicker-tab');\n      tabs.forEach(tab => {\n        tab.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const mode = tab.getAttribute('data-mode');\n          this.options.mode = mode;\n          this.setModeCookie(mode); // Save mode to cookie\n          this.render();\n          this.attachEvents();\n\n          // Trigger a custom event to notify of mode change\n          const event = new CustomEvent('datepickerModeChange', {\n            detail: { mode: mode }\n          });\n          this.element.dispatchEvent(event);\n        });\n      });\n    }\n\n    // Year selector\n    const yearSelector = this.element.querySelector('.year-selector');\n    if (yearSelector) {\n      yearSelector.addEventListener('change', (e) => {\n        this.currentDate.setFullYear(parseInt(e.target.value, 10));\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    // Month navigation\n    const prevMonthBtn = this.element.querySelector('.prev-month');\n    const nextMonthBtn = this.element.querySelector('.next-month');\n\n    if (prevMonthBtn) {\n      prevMonthBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n\n        // Check if going to the previous month is allowed based on min date\n        if (this.options.minDate) {\n          const minDate = new Date(this.options.minDate);\n          const currentMonth = this.currentDate.getMonth();\n          const currentYear = this.currentDate.getFullYear();\n\n          // If we're already at the min date month and year, don't go back further\n          if ((currentMonth === 0 && currentYear === minDate.getFullYear()) ||\n              (currentMonth === minDate.getMonth() && currentYear === minDate.getFullYear())) {\n            return;\n          }\n        }\n\n        this.currentDate.setMonth(this.currentDate.getMonth() - 1);\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    if (nextMonthBtn) {\n      nextMonthBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n\n        // Check if going to the next month is allowed based on max date\n        if (this.options.maxDate) {\n          const maxDate = new Date(this.options.maxDate);\n          const currentMonth = this.currentDate.getMonth();\n          const currentYear = this.currentDate.getFullYear();\n\n          // If we're already at the max date month and year, don't go forward further\n          if ((currentMonth === 11 && currentYear === maxDate.getFullYear()) ||\n              (currentMonth === maxDate.getMonth() && currentYear === maxDate.getFullYear())) {\n            return;\n          }\n        }\n\n        this.currentDate.setMonth(this.currentDate.getMonth() + 1);\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    // Day selection\n    if (this.options.mode === 'day') {\n      // Only select clickable days (those with data-clickable attribute)\n      const dayItems = this.element.querySelectorAll('.day-item[data-clickable=\"true\"]');\n      dayItems.forEach(day => {\n        day.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const dateStr = day.getAttribute('data-date');\n          if (dateStr) {\n            const [year, month, date] = dateStr.split('-').map(Number);\n            const selectedDate = new Date(year, month - 1, date);\n\n            if (this.options.multipleDays) {\n              // If multiple day selection is enabled\n              const index = this.selectedDates.findIndex(d =>\n                  d.getDate() === selectedDate.getDate() &&\n                  d.getMonth() === selectedDate.getMonth() &&\n                  d.getFullYear() === selectedDate.getFullYear()\n              );\n\n              if (index === -1) {\n                // Add to selection\n                this.selectedDates.push(selectedDate);\n              } else {\n                // Remove from selection\n                this.selectedDates.splice(index, 1);\n              }\n\n              // Update the UI to reflect the new selection\n              // Remove 'selected' class from all days with data-clickable\n              dayItems.forEach(di => di.classList.remove('selected'));\n              \n              // Add 'selected' class to selected days\n              this.selectedDates.forEach(selected => {\n                const dayStr = `${selected.getFullYear()}-${selected.getMonth()+1}-${selected.getDate()}`;\n                const selectedEl = this.element.querySelector(`.day-item[data-date=\"${dayStr}\"]`);\n                if (selectedEl) {\n                  selectedEl.classList.add('selected');\n                }\n              });\n\n              this.render();\n              this.attachEvents();\n            } else {\n              // Single selection\n              this.selectedDates = [selectedDate];\n              \n              // Update the UI to reflect the new selection\n              // Remove 'selected' class from all days with data-clickable\n              dayItems.forEach(di => di.classList.remove('selected'));\n              // Add 'selected' class to the clicked day\n              day.classList.add('selected');\n\n              // Create an event to notify that a date has been selected and applied\n              const event = new CustomEvent('datepickerApply', {\n                detail: {\n                  mode: 'day',\n                  selectedDates: this.selectedDates,\n                  selectedMonths: []\n                }\n              });\n              this.element.dispatchEvent(event);\n\n              // Update input value if available\n              this.updateInputValue();\n\n              // Hide the picker\n              this.hide();\n\n              // Call callback if provided\n              if (this.options.onDateChange) {\n                this.options.onDateChange(this.selectedDates[0]);\n              }\n            }\n          }\n        });\n      });\n    }\n\n    // Month selection\n    // Month selection event handler for the DatepickerTabs class\n    // This should replace the current month selection handler in attachEvents method\n\n    // Month selection\n    if (this.options.mode === 'month') {\n      const monthItems = this.element.querySelectorAll('.month-item:not(.disabled)');\n      monthItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const month = parseInt(item.getAttribute('data-month'), 10);\n          const year = parseInt(item.getAttribute('data-year'), 10);\n\n          if (this.options.multipleMonths) {\n            // If multiple month selection is enabled\n            const index = this.selectedMonths.findIndex(m =>\n                m.month === month && m.year === year\n            );\n\n            if (index === -1) {\n              // Check if adding the month would exceed the maximum allowed\n              if (this.options.maxMonthSelection && this.selectedMonths.length >= this.options.maxMonthSelection) {\n                // If max reached, remove the oldest selection before adding new one\n                this.selectedMonths.shift();\n              }\n\n              // Add to selection\n              this.selectedMonths.push({ month, year });\n\n              // Also update selected dates array with all month selections\n              this.selectedDates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            } else {\n              // Remove from selection\n              this.selectedMonths.splice(index, 1);\n\n              // Update selected dates array to match\n              this.selectedDates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            }\n\n\n            // Re-render to show updated selections\n            this.render();\n            this.attachEvents();\n\n            // Update input value\n            this.updateInputValue();\n\n            // Call callback with all selected dates\n            if (this.options.onDateChange) {\n              this.options.onDateChange(this.selectedDates);\n            }\n          } else {\n            // Single selection\n            this.selectedMonths = [{ month, year }];\n\n            // Also update selected dates to first day of month\n            this.selectedDates = [new Date(year, month, 1)];\n\n            // Update currentDate to match the selected month\n            this.currentDate = new Date(year, month, 1);\n\n            // Re-render to show updated selections\n            this.render();\n            this.attachEvents();\n\n            // If single month selection, apply immediately and close\n            // Create an event to notify that a month has been selected and applied\n            const event = new CustomEvent('datepickerApply', {\n              detail: {\n                mode: 'month',\n                selectedDates: this.selectedDates,\n                selectedMonths: this.selectedMonths\n              }\n            });\n            this.element.dispatchEvent(event);\n\n            // Update input value if available\n            this.updateInputValue();\n\n            // Hide the picker\n            this.hide();\n\n            // Call callback if provided\n            if (this.options.onDateChange) {\n              this.options.onDateChange(this.selectedDates[0]);\n            }\n          }\n        });\n      });\n    }\n\n    // Remove buttons for multi-select\n    const removeButtons = this.element.querySelectorAll('.remove-btn');\n    removeButtons.forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent bubbling to parent\n        const index = parseInt(btn.getAttribute('data-index'), 10);\n\n        if (this.options.mode === 'day') {\n          this.selectedDates.splice(index, 1);\n        } else {\n          this.selectedMonths.splice(index, 1);\n        }\n\n        this.render();\n        this.attachEvents();\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          if (this.options.mode === 'day') {\n            this.options.onDateChange(this.options.multiple ? this.selectedDates : this.selectedDates[0]);\n          } else {\n            const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            this.options.onDateChange(this.options.multiple ? dates : dates[0]);\n          }\n        }\n      });\n    });\n\n    // Clear button\n    const clearBtn = this.element.querySelector('.datepicker-btn.clear');\n    if (clearBtn) {\n      clearBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n        this.selectedDates = [];\n        this.selectedMonths = [];\n        this.render();\n        this.attachEvents();\n\n        // Update input value if available\n        if (this.inputElement) {\n          this.inputElement.value = '';\n        }\n\n        // Create a custom event for clearing\n        const event = new CustomEvent('datepickerClear');\n        this.element.dispatchEvent(event);\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          this.options.onDateChange(null);\n        }\n      });\n    }\n\n    // Apply button\n    // Apply button handler for the DatepickerTabs class\n    // This should replace the current Apply button handler in attachEvents method\n\n    // Apply button\n    const applyBtn = this.element.querySelector('.datepicker-btn.apply');\n    if (applyBtn) {\n      // First, remove any existing event listeners to prevent duplicates\n      // (this is crucial to prevent multiple calls)\n      const newApplyBtn = applyBtn.cloneNode(true);\n      applyBtn.parentNode.replaceChild(newApplyBtn, applyBtn);\n\n      // Add the event listener to the new button\n      newApplyBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling\n\n        // For debugging\n        //console.log('apply clicked with values:', this.inputElement ? this.inputElement.value : 'no input');\n\n        // Update input value if available\n        this.updateInputValue();\n\n        // Hide the picker\n        this.hide();\n\n        // Call callback if provided - ONLY ONCE\n        if (this.options.onDateChange) {\n          // In month mode with multiple selections\n          if (this.options.mode === 'month' && this.options.multipleMonths) {\n            if (this.selectedMonths.length > 0) {\n              const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n              // Direct call to callback with all dates\n              this.options.onDateChange(dates);\n            } else {\n              this.options.onDateChange(null);\n            }\n          }\n          // Day mode or single month selection\n          else if (this.options.mode === 'day') {\n            if (this.selectedDates.length > 0) {\n              this.options.onDateChange(this.options.multipleDays ? this.selectedDates : this.selectedDates[0]);\n            } else {\n              this.options.onDateChange(null);\n            }\n          }\n        }\n\n        // Fire the custom event AFTER the callback (not before)\n        const event = new CustomEvent('datepickerApply', {\n          detail: {\n            mode: this.options.mode,\n            selectedDates: this.selectedDates,\n            selectedMonths: this.selectedMonths\n          }\n        });\n        this.element.dispatchEvent(event);\n      });\n    }\n  }\n\n  /**\n   * Public methods\n   */\n\n  /**\n   * Set date picker mode\n   * @param {string} mode - 'day' or 'month'\n   */\n  setMode(mode) {\n    if (mode === 'day' || mode === 'month') {\n      this.options.mode = mode;\n      if (this.options.displayType === 'tabs') {\n        this.setModeCookie(mode);\n      }\n      this.render();\n      this.attachEvents();\n      this.updateInputValue();\n    }\n    return this;\n  }\n\n  getMode() {\n    return this.options.mode;\n  }\n\n  /**\n   * Set display type\n   * @param {string} type - 'tabs', 'day', or 'month'\n   */\n  setDisplayType(type) {\n    if (type === 'tabs' || type === 'day' || type === 'month') {\n      this.options.displayType = type;\n\n      // If not tabs, force mode to match displayType\n      if (type !== 'tabs') {\n        this.options.mode = type;\n      }\n\n      // Re-render picker\n      this.render();\n      this.attachEvents();\n    }\n    return this;\n  }\n\n  /**\n   * Set selected date(s)\n   * @param {Date|Date[]|null} date - Date or array of dates to select\n   */\n  setDate(date) {\n    if (Array.isArray(date)) {\n      this.selectedDates = date.map(d => new Date(d));\n\n      // Also update month selection if in month mode\n      this.selectedMonths = date.map(d => ({\n        month: new Date(d).getMonth(),\n        year: new Date(d).getFullYear()\n      }));\n    } else if (date) {\n      this.selectedDates = [new Date(date)];\n\n      // Also update month selection if in month mode\n      const d = new Date(date);\n      this.selectedMonths = [{\n        month: d.getMonth(),\n        year: d.getFullYear()\n      }];\n    } else {\n      this.selectedDates = [];\n      this.selectedMonths = [];\n    }\n\n    this.render();\n    this.attachEvents();\n    this.updateInputValue();\n\n    return this;\n  }\n\n  /**\n   * Set max month selection limit\n   * @param {number|null} limit - Max number of months that can be selected\n   */\n  setMaxMonthSelection(limit) {\n    this.options.maxMonthSelection = limit;\n\n    // If current selections exceed the new limit, trim the excess\n    if (limit !== null && this.selectedMonths.length > limit) {\n      // Keep only the most recent selections up to the limit\n      this.selectedMonths = this.selectedMonths.slice(-limit);\n\n      // Also update the selectedDates to match\n      this.selectedDates = this.selectedMonths.map(m =>\n          new Date(m.year, m.month, 1)\n      );\n\n      this.render();\n      this.attachEvents();\n      this.updateInputValue();\n    }\n\n    return this;\n  }\n\n  /**\n   * Get selected date(s)\n   * @returns {Date|Date[]|null} - Selected date(s)\n   */\n  getDate() {\n    if (this.options.mode === 'day') {\n      return this.selectedDates.length === 0 ? null :\n          (this.options.multipleDays ? this.selectedDates : this.selectedDates[0]);\n    } else {\n      // Convert month selections to dates (1st of each month)\n      const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n      return dates.length === 0 ? null :\n          (this.options.multipleMonths ? dates : dates[0]);\n    }\n  }\n\n  /**\n   * Enable/disable multiple days selection\n   * @param {boolean} enable - Whether to enable multiple day selection\n   */\n  setMultipleDays(enable) {\n    this.options.multipleDays = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Enable/disable multiple months selection\n   * @param {boolean} enable - Whether to enable multiple month selection\n   */\n  setMultipleMonths(enable) {\n    this.options.multipleMonths = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Enable/disable multiple selection (both days and months)\n   * @param {boolean} enable - Whether to enable multiple selection\n   */\n  setMultiple(enable) {\n    this.options.multipleDays = !!enable;\n    this.options.multipleMonths = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n\n  /**\n   * Set date format\n   * @param {string} format - Format string\n   */\n  setDateFormat(format) {\n    this.options.dateFormat = format;\n    this.updateInputValue();\n    return this;\n  }\n\n  /**\n   * Set month format\n   * @param {string} format - Format string\n   */\n  setMonthFormat(format) {\n    this.options.monthFormat = format;\n    this.updateInputValue();\n    return this;\n  }\n\n  /**\n   * Set min date\n   * @param {Date|null} date - Minimum selectable date\n   */\n  setMinDate(date) {\n    this.options.minDate = date ? new Date(date) : null;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n\n  /**\n   * Set max date\n   * @param {Date|null} date - Maximum selectable date\n   */\n  setMaxDate(date) {\n    this.options.maxDate = date ? new Date(date) : null;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Destroy the datepicker instance and clean up\n   */\n  destroy() {\n    // Remove event listeners from input\n    if (this.inputElement) {\n      const newInputElement = this.inputElement.cloneNode(true);\n      this.inputElement.parentNode.replaceChild(newInputElement, this.inputElement);\n    }\n    \n    // Remove the container element from DOM\n    if (this.containerElement && this.containerElement.parentNode) {\n      this.containerElement.parentNode.removeChild(this.containerElement);\n    }\n    \n    // Clean up references\n    this.element = null;\n    this.inputElement = null;\n    this.containerElement = null;\n    this.instances = [];\n  }\n\n  // This one used to render in demos\n  getDatesAsString(dates) {\n    const currentMode = this.getMode();\n    if (Array.isArray(dates)) {\n      return dates.map(d => {\n        const month = d.toLocaleString('default', { month: 'short' });\n        const year = d.getFullYear();\n        const day = d.getDay();\n        if ('day' == currentMode) {\n          return `${day} ${month} ${year}`;\n        } else {\n          return `${month} ${year}`;\n        }\n      }).join(', ');\n    } else {\n      const month = dates.toLocaleString('default', { month: 'short' });\n      const year = dates.getFullYear();\n      const day = dates.getDate();\n      if ('day' == currentMode) {\n          return  `${day} ${month} ${year}`;\n      } else {\n          return `${month} ${year}`;\n      }\n    }\n  }\n\n}\n\n\n// Create global reference\nwindow.DatepickerTabs = DatepickerTabs;"]}