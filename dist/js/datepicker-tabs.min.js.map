{"version":3,"sources":["datepicker-tabs.js"],"names":["DatepickerTabs","constructor","selector","options","this","monthNames","mode","displayType","maxMonthSelection","startDate","defaults","maxDate","disabledDaysOfWeek","multipleDays","startWeekOnMonday","multipleMonths","minDate","futureSaturdaysOnly","monthFormat","zIndex","disabledDates","backwardsYearsOffset","instances","elements","document","querySelectorAll","length","forEach","inputElement","index","containerId","Date","now","push","_createInstance","instanceOptions","instanceId","forwardsYearsOffset","console","error","HTMLElement","containerElement","createElement","className","body","appendChild","element","classList","add","currentDate","selectedDates","selectedMonths","id","month","getMonth","selectedMonth","year","getFullYear","selectedDate","restoreModeFromCookie","value","parseDateInput","parsedDates","parsedMonths","parseMonthInput","map","m","init","isDateDisabled","date","let","dayOfWeek","some","disabledDate","normalizedDisabled","format","parseDate","dateFormat","normalizedDate","getTime","dateStr","sep","setHours","flexibleDateStr","trim","separator","includes","dateParts","split","separators","flexibleFormat","formatParts","day","i","formatPart","valuePart","parseInt","isNaN","shortYear","Math","floor","currentYear","century","toLowerCase","j","substring","monthStr","getDate","DPTisValidDate","inputValue","str","dateStrings","filter","monthStrings","match","monthName","monthIndex","findIndex","numMatch","formatDate","shortMonthName","result","replace","positionPicker","toString","slice","String","padStart","windowHeight","container","querySelector","inputRect","getBoundingClientRect","containerHeight","offsetHeight","scrollLeft","window","pageXOffset","scrollTop","pageYOffset","showOnTop","bottom","top","documentElement","left","containerWidth","innerWidth","right","position","style","render","attachEvents","hide","setupInputElement","addEventListener","e","contains","target","updateInputValue","stopPropagation","show","formattedMonths","d","formattedDates","join","event","isVisible","display","setTimeout","resizeHandler","removeEventListener","CustomEvent","dispatchEvent","setModeCookie","getModeCookie","decodedCookie","decodeURIComponent","cookies","cookie","name","expiryDate","setDate","cookieName","toUTCString","startYear","max","minYear","indexOf","endYear","savedMode","getYearsRange","minMonth","maxYear","maxMonth","isMonthSelectable","innerHTML","content","dayTab","title","textContent","firstDayOfMonth","tabsUI","monthTab","prevMonthDays","remove","yearsHtml","renderYearSelector","renderDayMode","renderMonthMode","daysHeaderHtml","adjustedDayNames","getDay","daysHtml","today","daysInMonth","dayNames","daysInPrevMonth","isDisabled","log","isToday","classes","isSaturday","clickableAttr","compareDate","daysFromNextMonth","html","isFuture","currentMonth","monthsHtml","monthAttrs","navHtml","renderSelectedDates","isSelected","isMonthSelected","isSelectable","item","dateObj","formatted","renderSelectedMonths","isDateSelected","tabs","tab","getAttribute","yearSelector","setFullYear","prevMonthBtn","nextMonthBtn","isMaxMonthSelectionsReached","detail","selected","selectedEl","setMonth","onDateChange","monthItems","dayItems","Number","splice","di","dayStr","clearBtn","newApplyBtn","btn","multiple","dates","setDisplayType","applyBtn","cloneNode","parentNode","replaceChild","limit","getMode","setMultipleDays","type","setMinDate","Array","isArray","setDateFormat","setMonthFormat","setMaxMonthSelection","destroy","enable","setMultipleMonths","currentMode","setMultiple","module","setMaxDate","newInputElement","removeChild","getDatesAsString","toLocaleString"],"mappings":"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","file":"datepicker-tabs.min.js","sourcesContent":["/**\n * DatepickerTabs\n *\n * A versatile date picker with day and month selection modes,\n * multiple selection support, and various formatting options.\n * Perfect for booking systems when users need to select multiple dates or months.\n *\n * @version 1.0.6\n *\n * FEATURES:\n * - Day and Month selection modes\n * - Single or multiple selection for both days and months\n * - Format customization\n * - Min/Max date constraints\n * - Max month selection limit\n * - Display type options: 'tabs', 'day', or 'month'\n * - Saturday-only selection for specific use cases\n * - Cookie-based mode persistence\n * - Tooltip overlay positioning\n * - Mobile-friendly design\n * - Automatic container creation\n * - Support for multiple instances with class selectors\n * - Customizable year range\n *\n * USAGE:\n *\n * 1. Basic initialization:\n * ```javascript\n * // Initialize on a single input with ID\n * const picker = new DatepickerTabs('#date-input');\n *\n * // Initialize on multiple inputs with class\n * const pickers = new DatepickerTabs('.date-input-class');\n * ```\n *\n * 2. With options:\n * ```javascript\n * const picker = new DatepickerTabs('#date-input', {\n *   // Basic configuration\n *   mode: 'month',                   // 'day' or 'month' mode\n *   displayType: 'tabs',             // Display as 'tabs', 'day', or 'month'\n *\n *   // Selection options\n *   multipleDays: false,             // Allow multiple day selection\n *   multipleMonths: true,            // Allow multiple month selection\n *   maxMonthSelection: 6,            // Max selectable months (when multipleMonths=true)\n *\n *   // Date range options\n *   startDate: null,                 // Initial selected date\n *   minDate: null,                   // Minimum selectable date\n *   maxDate: new Date(2026, 11, 31), // Maximum selectable date\n *   futureSaturdaysOnly: true,       // Only enable future Saturdays in day mode\n *   disabledDaysOfWeek: [], // Array of days of week to disable (0-6, where 0 is Sunday)\n *   disabledDates: [], //Array of specific dates to disable (Date objects or date strings in various formats)\n *   startWeekOnMonday: false, // Option to start the week on Monday instead of Sunday\n *\n *   // Localization\n *   monthNames: ['January', 'February', '...'], // Custom month names\n *   dayNames: ['Sun', 'Mon', '...'],           // Custom day names\n *   dateFormat: 'DD/MM/YYYY',        // Date display format\n *   monthFormat: 'MMM YYYY',         // Month display format\n *\n *   // UI settings\n *   position: 'bottom',              // 'bottom' or 'top' position\n *   zIndex: 9999,                    // Picker z-index\n *\n *   // Persistence\n *   cookieName: 'datepickerTabsMode',// Cookie name for mode storage\n *\n *   // Year range configuration\n *   backwardsYearsOffset: 5,         // Years to display before current year\n *   forwardsYearsOffset: 5,          // Years to display after current year\n *\n *   // Callbacks\n *   onDateChange: function(date) {   // Date selection callback\n *     console.log('Selected date:', date);\n *   },\n *\n *   // Custom container\n *   containerId: ''                  // Custom container ID for rendering\n * });\n * ```\n *\n * 3. Methods:\n * ```javascript\n * // Set date programmatically\n * picker.setDate(new Date());\n * picker.setDate([new Date(2025, 0, 1), new Date(2025, 1, 1)]); // Multiple dates\n * picker.setDate(null); // Clear selection\n *\n * // Get currently selected date(s)\n * const date = picker.getDate();\n *\n * // Mode and display type\n * picker.setMode('month'); // Switch mode ('day' or 'month')\n * picker.getMode(); // Get current mode\n * picker.setDisplayType('tabs'); // Change display type ('tabs', 'day', or 'month')\n *\n * // Selection options\n * picker.setMultipleDays(true); // Enable/disable multiple day selection\n * picker.setMultipleMonths(true); // Enable/disable multiple month selection\n * picker.setMultiple(true); // Enable both multiple days and months selection\n * picker.setMaxMonthSelection(3); // Set maximum number of selectable months\n *\n * // Format options\n * picker.setDateFormat('YYYY-MM-DD'); // Set date format\n * picker.setMonthFormat('MM/YYYY'); // Set month format\n *\n * // Date constraints\n * picker.setMinDate(new Date(2025, 0, 1)); // Set minimum selectable date\n * picker.setMaxDate(new Date(2025, 11, 31)); // Set maximum selectable date\n *\n * // Visibility\n * picker.show(); // Show the date picker\n * picker.hide(); // Hide the date picker\n *\n * // Cleanup\n * picker.destroy(); // Remove datepicker and clean up resources\n * ```\n */\n\n\n\nclass DatepickerTabs {\n  constructor(selector, options = {}) {\n    // Define default options\n    const defaults = {\n      mode: 'day', // 'day' or 'month'\n      displayType: 'tabs', // 'tabs', 'day', or 'month' - controls if tabs should be shown\n      multipleDays: false, // Allow multiple day selection\n      multipleMonths: false, // Allow multiple month selection\n      maxMonthSelection: null, // Maximum number of months that can be selected (when multipleMonths is true)\n      startDate: null,\n      minDate: null,\n      maxDate: null,\n      futureSaturdaysOnly: false, // Option for day mode to only enable Saturdays in the future\n      disabledDaysOfWeek: [], // Array of days of week to disable (0-6, where 0 is Sunday)\n      disabledDates: [], //Array of specific dates to disable (Date objects or date strings in various formats)\n      startWeekOnMonday: false, // Option to start the week on Monday instead of Sunday\n      onDateChange: null, // Callback when date(s) change\n      monthNames: [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n      ],\n      dayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      cookieName: 'datepickerTabsMode', // Store mode in cookie\n      dateFormat: 'DD MMM YYYY', // Default format for display\n      monthFormat: 'MMM YYYY', // Default format for month display\n      position: 'bottom', // 'bottom' or 'top' - default position relative to input\n      zIndex: 9999, // z-index for the picker container\n      containerId: '', // Custom container ID to render calendar (if not provided, one will be generated)\n      backwardsYearsOffset: 5, // How many year offset render backwards in years selectbox. If now 2025 it will render from 2020\n      forwardsYearsOffset: 5, // How many year offset render forwards in years selectbox. If now 2025 it will render till 2030\n    };\n\n    // Merge default options with provided options\n    this.options = { ...defaults, ...options };\n    \n    // Store instance references \n    this.instances = [];\n    \n    // Check if selector refers to multiple elements\n    if (typeof selector === 'string') {\n      const elements = document.querySelectorAll(selector);\n      \n      // If multiple elements found, initialize on each one\n      if (elements.length > 1) {\n        elements.forEach((inputElement, index) => {\n          const instanceOptions = {...this.options};\n          // Create a unique container ID for each instance\n          const instanceId = `datepicker-container-${Date.now()}-${index}`;\n          this.instances.push(this._createInstance(inputElement, instanceOptions, instanceId));\n        });\n        \n        return this.instances;\n      } else if (elements.length === 1) {\n        // Single element - use it as input element\n        this.inputElement = elements[0];\n      } else {\n        console.error('DatepickerTabs: No elements found with selector:', selector);\n        return;\n      }\n    } else if (selector instanceof HTMLElement) {\n      // If an actual element is passed, use it directly\n      this.inputElement = selector;\n    } else {\n      console.error('DatepickerTabs: Invalid selector or element:', selector);\n      return;\n    }\n    \n    // Create container element for this instance\n    const containerId = this.options.containerId || `datepicker-container-${Date.now()}`;\n    this.containerId = containerId;\n    \n    // Create container element and add it to the DOM\n    this.containerElement = document.createElement('div');\n    this.containerElement.id = containerId;\n    this.containerElement.className = 'datepicker-tabs-container';\n    document.body.appendChild(this.containerElement);\n    \n    // Set the element where the datepicker will be rendered\n    this.element = this.containerElement;\n\n    // Add the wrapper class to the element for CSS scoping\n    this.element.classList.add('datepicker-tabs');\n\n    // Initialize properties\n    this.currentDate = new Date(this.options.startDate || new Date());\n    this.selectedDates = this.options.startDate ? [new Date(this.options.startDate)] : [];\n    this.selectedMonths = [];\n    this.isVisible = false;\n\n    // If displayType is 'day' or 'month', force the mode to match\n    if (this.options.displayType === 'day' || this.options.displayType === 'month') {\n      this.options.mode = this.options.displayType;\n    }\n\n    // If month mode and a start date is provided, extract the month and year\n    if (this.options.mode === 'month' && this.options.startDate) {\n      const startDate = new Date(this.options.startDate);\n      this.selectedMonths.push({\n        month: startDate.getMonth(),\n        year: startDate.getFullYear()\n      });\n    }\n    \n    // Initialize current date to selected month or date if available\n    if (this.selectedMonths.length > 0) {\n      const selectedMonth = this.selectedMonths[0];\n      this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n    } else if (this.selectedDates.length > 0) {\n      const selectedDate = this.selectedDates[0];\n      this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n    }\n\n    // Try to restore mode from cookie (only if displayType is 'tabs')\n    if (this.options.displayType === 'tabs') {\n      this.restoreModeFromCookie();\n    }\n\n    if (this.inputElement && this.inputElement.value && !this.options.startDate) {\n      if (this.options.mode === 'day') {\n        const parsedDates = this.parseDateInput(this.inputElement.value);\n        if (parsedDates.length > 0) {\n          this.selectedDates = parsedDates;\n          this.currentDate = new Date(parsedDates[0].getFullYear(), parsedDates[0].getMonth(), 1);\n        }\n      } else if (this.options.mode === 'month') {\n        const parsedMonths = this.parseMonthInput(this.inputElement.value);\n        if (parsedMonths.length > 0) {\n          this.selectedMonths = parsedMonths;\n          this.selectedDates = parsedMonths.map(m => new Date(m.year, m.month, 1));\n          this.currentDate = new Date(parsedMonths[0].year, parsedMonths[0].month, 1);\n        }\n      }\n    }\n\n    // Initialize the datepicker\n    this.init();\n  }\n\n\n  /**\n   * Check if a date is disabled based on disabledDates array\n   * @param {Date} date - The date to check\n   * @returns {boolean} - Whether the date is disabled\n   */\n  isDateDisabled(date) {\n    if (!date) return false;\n\n    // Check if the day of week is disabled\n    if (this.options.disabledDaysOfWeek && this.options.disabledDaysOfWeek.length > 0) {\n      let dayOfWeek = date.getDay();\n      if (this.options.disabledDaysOfWeek.includes(dayOfWeek)) {\n        return true;\n      }\n    }\n\n    // Check if the exact date is disabled\n    if (this.options.disabledDates && this.options.disabledDates.length > 0) {\n\n      return this.options.disabledDates.some(disabledDate => {\n        let normalizedDisabled;\n\n        // Handle string dates using the parseDate method\n        if (typeof disabledDate === 'string') {\n          normalizedDisabled = this.parseDate(disabledDate, this.options.dateFormat);\n          // If parsing failed, try alternative formats\n          if (!normalizedDisabled) {\n            // Try common formats if the specified format fails\n            const formats = ['DD/MM/YYYY', 'MM/DD/YYYY', 'YYYY-MM-DD', 'DD-MM-YYYY'];\n            for (const format of formats) {\n              if (format !== this.options.dateFormat) {\n                normalizedDisabled = this.parseDate(disabledDate, format);\n                if (normalizedDisabled) break;\n              }\n            }\n          }\n          // If all parsing attempts failed, skip this date\n          if (!normalizedDisabled) return false;\n        } else {\n          // Handle Date objects\n          normalizedDisabled = new Date(disabledDate);\n        }\n\n        // Normalize both dates to midnight for comparison\n        normalizedDisabled.setHours(0, 0, 0, 0);\n\n        const normalizedDate = new Date(date);\n        normalizedDate.setHours(0, 0, 0, 0);\n\n        return normalizedDisabled.getTime() === normalizedDate.getTime();\n      });\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns a Date object if parsing is successful, null otherwise\n   */\n  parseDate(dateStr, format) {\n    if (!dateStr || !format) return null;\n\n    // Trim the input string\n    dateStr = dateStr.trim();\n\n    // Special handling for numeric formats - make them more flexible\n    // If format has DD but input has D (single digit), or format has MM but input has M (single digit)\n    let flexibleFormat = format;\n    let flexibleDateStr = dateStr;\n\n    // Handle common separators for date formats\n    const separators = ['/', '-', ' ', '.'];\n    let separator = null;\n\n    // Find which separator is used in the format\n    for (const sep of separators) {\n      if (format.includes(sep)) {\n        separator = sep;\n        break;\n      }\n    }\n\n    if (!separator) {\n      // No recognized separator\n      return null;\n    }\n\n    // Split date string and format by separator\n    const dateParts = flexibleDateStr.split(separator);\n    const formatParts = flexibleFormat.split(separator);\n\n    // Must have same number of parts\n    if (dateParts.length !== formatParts.length) {\n      return null;\n    }\n\n    // Extract values based on format\n    let day = 1;\n    let month = 0;\n    let year = new Date().getFullYear();\n\n    for (let i = 0; i < formatParts.length; i++) {\n      const formatPart = formatParts[i];\n      const valuePart = dateParts[i];\n\n      // Handle different format parts\n      if (formatPart === 'DD' || formatPart === 'D') {\n        day = parseInt(valuePart, 10);\n        if (isNaN(day)) return null;\n      }\n      else if (formatPart === 'MM' || formatPart === 'M') {\n        month = parseInt(valuePart, 10) - 1; // Convert to 0-based month\n        if (isNaN(month)) return null;\n      }\n      else if (formatPart === 'YYYY') {\n        year = parseInt(valuePart, 10);\n        if (isNaN(year)) return null;\n      }\n      else if (formatPart === 'YY') {\n        let shortYear = parseInt(valuePart, 10);\n        if (isNaN(shortYear)) return null;\n\n        // Convert 2-digit year to 4-digit\n        const currentYear = new Date().getFullYear();\n        const century = Math.floor(currentYear / 100) * 100;\n\n        if (shortYear + century > currentYear + 50) {\n          year = shortYear + (century - 100);\n        } else {\n          year = shortYear + century;\n        }\n      }\n      else if (formatPart === 'MMM') {\n        const monthStr = valuePart.toLowerCase();\n        month = -1;\n\n        // Check for month name\n        for (let j = 0; j < this.options.monthNames.length; j++) {\n          if (this.options.monthNames[j].toLowerCase().substring(0, 3) === monthStr) {\n            month = j;\n            break;\n          }\n        }\n\n        if (month === -1) return null;\n      }\n      else if (formatPart === 'MMMM') {\n        const monthStr = valuePart.toLowerCase();\n        month = -1;\n\n        // Check for month name\n        for (let j = 0; j < this.options.monthNames.length; j++) {\n          if (this.options.monthNames[j].toLowerCase() === monthStr) {\n            month = j;\n            break;\n          }\n        }\n\n        if (month === -1) return null;\n      }\n    }\n\n    // Validate basic ranges\n    if (day < 1 || day > 31 || month < 0 || month > 11 || year < 0) {\n      return null;\n    }\n\n    // Create date and validate (check for dates like Feb 31)\n    const date = new Date(year, month, day);\n\n    // Verify the date is valid (checking against month overflow, e.g., Feb 31)\n    if (date.getFullYear() !== year || date.getMonth() !== month || date.getDate() !== day) {\n      return null;\n    }\n\n    return date;\n  }\n\n  /**\n   * Check if a date is valid\n   * @param {Date} date - The date to check\n   * @returns {boolean} - Whether the date is valid\n   */\n  DPTisValidDate(date) {\n    return date && date instanceof Date && !isNaN(date.getTime());\n  }\n\n  /**\n   * Parse multiple date strings from input value\n   */\n  parseDateInput(inputValue) {\n    if (!inputValue) return [];\n\n    // Determine which format to use based on mode\n    const format = this.options.mode === 'day'\n        ? this.options.dateFormat\n        : this.options.monthFormat;\n\n    // Split by commas for multiple dates\n    const dateStrings = inputValue.split(',').map(str => str.trim());\n\n    // Parse each date string and validate\n    return dateStrings\n        .map(dateStr => {\n          const date = this.parseDate(dateStr, format);\n          return this.DPTisValidDate(date) ? date : null;\n        })\n        .filter(date => date !== null); // Filter out invalid dates\n  }\n\n  /**\n   * Enhanced version of parseMonthInput to ensure more reliable parsing\n   */\n  parseMonthInput(inputValue) {\n    if (!inputValue) return [];\n\n    // Split by commas for multiple months\n    const monthStrings = inputValue.split(',').map(str => str.trim());\n\n    // Parse each month string and convert to month objects\n    return monthStrings\n        .map(monthStr => {\n          // Try direct parsing with the configured format\n          const date = this.parseDate(monthStr, this.options.monthFormat);\n          if (date && !isNaN(date.getTime())) {\n            return {\n              month: date.getMonth(),\n              year: date.getFullYear()\n            };\n          }\n\n          // If direct parsing fails, try a more flexible approach\n          // This helps with various month formats like \"Apr 2025\" or \"April 2025\"\n          const monthYearPattern = /([A-Za-z]+)\\s+(\\d{4})/i;\n          const match = monthStr.match(monthYearPattern);\n\n          if (match) {\n            const monthName = match[1];\n            const year = parseInt(match[2], 10);\n\n            // Find month by name\n            const monthIndex = this.options.monthNames.findIndex(m =>\n                m.toLowerCase().startsWith(monthName.toLowerCase())\n            );\n\n            if (monthIndex !== -1 && !isNaN(year)) {\n              return {\n                month: monthIndex,\n                year: year\n              };\n            }\n          }\n\n          // Also try numeric format like \"MM/YYYY\"\n          const numericPattern = /(\\d{1,2})[\\/\\-\\s](\\d{4})/;\n          const numMatch = monthStr.match(numericPattern);\n\n          if (numMatch) {\n            const month = parseInt(numMatch[1], 10) - 1; // Convert to 0-based\n            const year = parseInt(numMatch[2], 10);\n\n            if (month >= 0 && month <= 11 && !isNaN(year)) {\n              return {\n                month: month,\n                year: year\n              };\n            }\n          }\n\n          return null;\n        })\n        .filter(month => month !== null); // Filter out invalid months\n  }\n\n  /**\n   * Create a datepicker instance for a specific input element\n   * @private\n   */\n  _createInstance(inputElement, options, containerId) {\n    // Create a new options object with the input element\n    const instanceOptions = {...options, containerId};\n    \n    // Create a new instance and return it\n    return new DatepickerTabs(inputElement, instanceOptions);\n  }\n\n\n  /**\n   * Format a date according to the specified format\n   * @param date\n   * @param format\n   * @returns {*|string}\n   */\n  formatDate(date, format) {\n    if (!date || !(date instanceof Date) || isNaN(date.getTime())) return '';\n\n\n    // For the specific month-year format that's causing problems,\n    // use a direct approach\n    if (format === 'MMM YYYY' || format === 'MMMM YYYY') {\n      const monthIndex = date.getMonth();\n      const year = date.getFullYear();\n\n      if (format === 'MMM YYYY') {\n        // Use the first 3 characters of the month name\n        const shortMonthName = this.options.monthNames[monthIndex].substring(0, 3);\n        return `${shortMonthName} ${year}`;\n      } else {\n        // Use the full month name\n        return `${this.options.monthNames[monthIndex]} ${year}`;\n      }\n    }\n\n    // For other formats, use a direct replacement approach\n    // that avoids the issue with 'D' in month names\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n\n    // Create a copy of the format string\n    let result = format;\n\n    // Replace year patterns\n    result = result.replace(/YYYY/g, year.toString());\n    result = result.replace(/YY/g, year.toString().slice(-2));\n\n    // Replace month name patterns first\n    result = result.replace(/MMMM/g, this.options.monthNames[month]);\n    result = result.replace(/MMM/g, this.options.monthNames[month].substring(0, 3));\n\n    // Replace month number patterns\n    result = result.replace(/MM/g, String(month + 1).padStart(2, '0'));\n    // Use word boundary for single M to avoid replacing M in words\n    result = result.replace(/\\bM\\b/g, String(month + 1));\n\n    // Replace day patterns - after month patterns to avoid conflicts\n    result = result.replace(/DD/g, String(day).padStart(2, '0'));\n    // Use word boundary for single D to avoid replacing D in words\n    result = result.replace(/\\bD\\b/g, String(day));\n\n    return result;\n  }\n\n\n  /**\n   * Position the datepicker relative to the input element\n   * Adjusts to stay in viewport\n   */\n  positionPicker() {\n    if (!this.inputElement) return;\n\n    const container = this.element.querySelector('.custom-datepickertabs-container');\n    if (!container) return;\n\n    // Get input position and dimensions\n    const inputRect = this.inputElement.getBoundingClientRect();\n    const containerHeight = container.offsetHeight;\n    const containerWidth = container.offsetWidth;\n    const windowHeight = window.innerHeight;\n    const windowWidth = window.innerWidth;\n\n    // Check if there's enough space below\n    const spaceBelow = windowHeight - inputRect.bottom;\n    const showOnTop = spaceBelow < containerHeight && inputRect.top > containerHeight;\n\n    // Calculate scroll offset for initial positioning\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n\n    // Position horizontally - align with input field left edge\n    let left = inputRect.left + scrollLeft;\n\n    // Ensure the picker doesn't go off-screen to the right\n    if (left + containerWidth > windowWidth + scrollLeft) {\n      left = (inputRect.right - containerWidth) + scrollLeft;\n    }\n\n    // Ensure the picker doesn't go off-screen to the left\n    if (left < scrollLeft) {\n      left = scrollLeft + 5;\n    }\n\n    // Position vertically based on available space\n    let top;\n    if (showOnTop || this.options.position === 'top') {\n      // Position above the input\n      top = inputRect.top - containerHeight + scrollTop;\n\n      // If not enough space above, position below instead\n      if (top < scrollTop) {\n        top = inputRect.bottom + scrollTop;\n      }\n    } else {\n      // Position below the input by default\n      top = inputRect.bottom + scrollTop;\n\n      // If not enough space below, position above if possible\n      if (top + containerHeight > windowHeight + scrollTop && inputRect.top > containerHeight) {\n        top = inputRect.top - containerHeight + scrollTop;\n      }\n    }\n\n    // Use fixed positioning with coordinates relative to viewport\n    container.style.position = 'absolute';\n    container.style.top = `${top}px`;\n    container.style.left = `${left}px`;\n    container.style.zIndex = this.options.zIndex;\n  }\n\n  /**\n   * Initialize the datepicker\n   */\n  init() {\n    this.render();\n    this.attachEvents();\n\n    // Set up input element if provided\n    if (this.inputElement) {\n      this.setupInputElement();\n    }\n\n    // Initially hide the picker\n    this.hide();\n\n    // Add document click handler to close when clicking outside\n    document.addEventListener('click', (e) => {\n      if (this.isVisible &&\n          !this.element.contains(e.target) &&\n          (!this.inputElement || !this.inputElement.contains(e.target))) {\n        this.hide();\n      }\n    });\n  }\n\n  /**\n   * Setup input element events\n   */\n  setupInputElement() {\n    // Update input with initial date if available\n    this.inputElement.classList.add('datepicker-input');\n\n    this.updateInputValue();\n\n    // Add click handler to show the picker\n    this.inputElement.addEventListener('click', (e) => {\n      e.stopPropagation();\n      if (this.isVisible) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    // Make input readonly to prevent keyboard input\n    this.inputElement.setAttribute('readonly', 'readonly');\n\n    // Add placeholder if not already set\n    if (!this.inputElement.getAttribute('placeholder')) {\n      this.inputElement.setAttribute('placeholder', 'Select a date');\n    }\n  }\n\n  /**\n   * Update input element with formatted date value\n   */\n  updateInputValue() {\n    if (!this.inputElement) return;\n\n    if (this.options.mode === 'day') {\n      if (this.selectedDates.length === 0) {\n        this.inputElement.value = '';\n      } else if (this.options.multipleDays) {\n        const formattedDates = this.selectedDates.map(d =>\n            this.formatDate(d, this.options.dateFormat)\n        );\n        this.inputElement.value = formattedDates.join(', ');\n      } else {\n        this.inputElement.value = this.formatDate(\n            this.selectedDates[0],\n            this.options.dateFormat\n        );\n      }\n    } else {\n      if (this.selectedMonths.length === 0) {\n        this.inputElement.value = '';\n      } else if (this.options.multipleMonths) {\n        const formattedMonths = this.selectedMonths.map(m =>\n            this.formatDate(new Date(m.year, m.month, 1), this.options.monthFormat)\n        );\n        this.inputElement.value = formattedMonths.join(', ');\n      } else {\n        const m = this.selectedMonths[0];\n        this.inputElement.value = this.formatDate(\n            new Date(m.year, m.month, 1),\n            this.options.monthFormat\n        );\n      }\n    }\n  }\n\n  /**\n   * Show the datepicker\n   */\n  show() {\n    if (this.isVisible) return;\n\n    //console.log('show');\n\n    // Parse the input value every time before showing\n    if (this.inputElement && this.inputElement.value) {\n      if (this.options.mode === 'month') {\n        const parsedMonths = this.parseMonthInput(this.inputElement.value);\n\n        if (parsedMonths.length > 0) {\n          this.selectedMonths = parsedMonths;\n          this.selectedDates = parsedMonths.map(m => new Date(m.year, m.month, 1));\n\n          // Important: Always update the currentDate to show the view of the selected month\n          // This is the key fix for single month selection\n          const selectedMonth = parsedMonths[0];\n          this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n        }\n      } else if (this.options.mode === 'day') {\n        const parsedDates = this.parseDateInput(this.inputElement.value);\n        if (parsedDates.length > 0) {\n          this.selectedDates = parsedDates;\n          // Update the view to show the month of the selected date\n          const selectedDate = parsedDates[0];\n          this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n        }\n      }\n    }\n\n\n    /*\n    if (this.options.mode === 'month' && this.selectedMonths.length > 0) {\n      const selectedMonth = this.selectedMonths[0];\n      this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n    } else if (this.options.mode === 'day' && this.selectedDates.length > 0) {\n      const selectedDate = this.selectedDates[0];\n      this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n    }\n    \n    // Update currentDate to match selectedDate if one exists\n    if (this.selectedDates.length > 0) {\n      const selectedDate = this.selectedDates[0];\n      this.currentDate = new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1);\n    } else if (this.selectedMonths.length > 0) {\n      // If we have selected months but no dates, use the first selected month\n      const selectedMonth = this.selectedMonths[0];\n      this.currentDate = new Date(selectedMonth.year, selectedMonth.month, 1);\n    }\n    */\n\n    // Show the container\n    const container = this.element.querySelector('.custom-datepickertabs-container');\n    if (container) {\n      container.style.display = 'block';\n      this.isVisible = true;\n\n      // Position the picker with a slight delay to ensure it's rendered\n      setTimeout(() => {\n        this.positionPicker();\n      }, 0);\n\n      // Add window resize handler (but not scroll handler)\n      this.resizeHandler = () => {\n        if (this.isVisible) {\n          this.positionPicker();\n        }\n      };\n\n      window.addEventListener('resize', this.resizeHandler);\n\n      // Trigger a custom event\n      const event = new CustomEvent('datepickerShow');\n      this.element.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Hide the datepicker\n   */\n  hide() {\n    if (!this.isVisible && !this.element.querySelector('.custom-datepickertabs-container')) return;\n\n    // Hide the container\n    const container = this.element.querySelector('.custom-datepickertabs-container');\n    if (container) {\n      container.style.display = 'none';\n      this.isVisible = false;\n\n      // Remove resize event listener\n      if (this.resizeHandler) {\n        window.removeEventListener('resize', this.resizeHandler);\n      }\n\n      // Trigger a custom event\n      const event = new CustomEvent('datepickerHide');\n      this.element.dispatchEvent(event);\n    }\n  }\n\n  // Set cookie for mode persistence\n  setModeCookie(mode) {\n    if (this.options.displayType !== 'tabs') return; // Only use cookies in tabs mode\n\n    const expiryDate = new Date();\n    expiryDate.setDate(expiryDate.getDate() + 7); // Cookie expires in 7 days\n    document.cookie = `${this.options.cookieName}=${mode};expires=${expiryDate.toUTCString()};path=/`;\n  }\n\n  // Get mode from cookie\n  getModeCookie() {\n    const name = this.options.cookieName + \"=\";\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const cookies = decodedCookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n      let cookie = cookies[i].trim();\n      if (cookie.indexOf(name) === 0) {\n        return cookie.substring(name.length, cookie.length);\n      }\n    }\n    return null;\n  }\n\n  // Restore mode from cookie if available\n  restoreModeFromCookie() {\n    const savedMode = this.getModeCookie();\n    if (savedMode && (savedMode === 'day' || savedMode === 'month')) {\n      this.options.mode = savedMode;\n    }\n  }\n\n  /**\n   * Get years range for year selector based on min/max date constraints\n   */\n  getYearsRange(currentYear) {\n    let startYear = currentYear - this.options.backwardsYearsOffset;\n    let endYear = currentYear + this.options.forwardsYearsOffset;\n\n    // Apply min date constraint\n    if (this.options.minDate) {\n      const minYear = this.options.minDate.getFullYear();\n      startYear = Math.max(startYear, minYear);\n    }\n\n    // Apply max date constraint\n    if (this.options.maxDate) {\n      const maxYear = this.options.maxDate.getFullYear();\n      endYear = Math.min(endYear, maxYear);\n    }\n\n    return { startYear, endYear };\n  }\n\n  /**\n   * Check if a month is selectable based on min/max date constraints\n   */\n  isMonthSelectable(month, year) {\n    // Check for min date constraint\n    if (this.options.minDate) {\n      const minDate = new Date(this.options.minDate);\n      const minYear = minDate.getFullYear();\n      const minMonth = minDate.getMonth();\n\n      if (year < minYear || (year === minYear && month < minMonth)) {\n        return false;\n      }\n    }\n\n    // Check for max date constraint\n    if (this.options.maxDate) {\n      const maxDate = new Date(this.options.maxDate);\n      const maxYear = maxDate.getFullYear();\n      const maxMonth = maxDate.getMonth();\n\n      if (year > maxYear || (year === maxYear && month > maxMonth)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Render the datepicker UI\n  render() {\n    // Check if the container already exists\n    let container = this.element.querySelector('.custom-datepickertabs-container');\n\n    if (!container) {\n      // First time rendering - create the full container\n      container = document.createElement('div');\n      container.className = 'custom-datepickertabs-container';\n\n      // Add header\n      container.innerHTML = `\n        <div class=\"datepicker-header\">\n          <h3 class=\"datepicker-title\">Select ${this.options.mode === 'day' ? 'Date' : 'Month'}</h3>\n        </div>\n      `;\n\n      // Add tabs only if displayType is tabs\n      if (this.options.displayType === 'tabs') {\n        container.innerHTML += `\n          <div class=\"datepicker-tabs-ui\">\n            <button class=\"datepicker-tab ${this.options.mode === 'day' ? 'active' : ''}\" data-mode=\"day\">Specific Date</button>\n            <button class=\"datepicker-tab ${this.options.mode === 'month' ? 'active' : ''}\" data-mode=\"month\">Whole Month</button>\n          </div>\n        `;\n      }\n\n      // Create content based on mode\n      const content = document.createElement('div');\n      content.className = 'datepicker-content';\n\n      if (this.options.mode === 'day') {\n        content.innerHTML = this.renderDayMode();\n      } else {\n        content.innerHTML = this.renderMonthMode();\n      }\n\n      container.appendChild(content);\n\n      // Add footer with buttons\n      container.innerHTML += `\n        <div class=\"datepicker-footer\">\n          <button class=\"datepicker-btn clear\">Clear</button>\n          <button class=\"datepicker-btn apply\">Apply</button>\n        </div>\n      `;\n\n      this.element.appendChild(container);\n    } else {\n      // Update only what's needed\n      const title = container.querySelector('.datepicker-title');\n      if (title) {\n        title.textContent = `Select ${this.options.mode === 'day' ? 'Date' : 'Month'}`;\n      }\n\n      // Update tabs only if they are present\n      const tabsUI = container.querySelector('.datepicker-tabs-ui');\n      if (tabsUI) {\n        const dayTab = tabsUI.querySelector('[data-mode=\"day\"]');\n        const monthTab = tabsUI.querySelector('[data-mode=\"month\"]');\n\n        if (dayTab && monthTab) {\n          if (this.options.mode === 'day') {\n            dayTab.classList.add('active');\n            monthTab.classList.remove('active');\n          } else {\n            dayTab.classList.remove('active');\n            monthTab.classList.add('active');\n          }\n        }\n      }\n\n      // Update content\n      const content = container.querySelector('.datepicker-content');\n      if (content) {\n        content.innerHTML = this.options.mode === 'day'\n            ? this.renderDayMode()\n            : this.renderMonthMode();\n      }\n    }\n  }\n\n  // Render day selection mode\n  renderDayMode() {\n    const year = this.currentDate.getFullYear();\n    const month = this.currentDate.getMonth();\n\n    // Get days in the current month\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n    // Get the day of the week of the first day of the month\n    let firstDayOfMonth = new Date(year, month, 1).getDay();\n    if (this.options.startWeekOnMonday) {\n      // If Sunday (0) becomes 6, otherwise day - 1\n      firstDayOfMonth = firstDayOfMonth === 0 ? 6 : firstDayOfMonth - 1;\n    }\n\n    // Calculate days from previous month to display\n    const prevMonthDays = firstDayOfMonth;\n\n    // Create year selector\n    const yearsHtml = this.renderYearSelector(year);\n\n    // Create month navigation\n    const navHtml = `\n      <div class=\"datepicker-nav\">\n        <button class=\"datepicker-nav-btn prev-month\">&lt;</button>\n        <span>${this.options.monthNames[month]} ${year}</span>\n        <button class=\"datepicker-nav-btn next-month\">&gt;</button>\n      </div>\n    `;\n\n    // Create day names header\n    let daysHeaderHtml = '<div class=\"datepicker-days-container\">';\n    let adjustedDayNames = [...this.options.dayNames];\n\n    // If startWeekOnMonday is true, move Sunday to the end\n    if (this.options.startWeekOnMonday) {\n      adjustedDayNames = [...this.options.dayNames.slice(1), this.options.dayNames[0]];\n    }\n\n    // Add day names\n    for (let i = 0; i < 7; i++) {\n      daysHeaderHtml += `<div class=\"day-name\">${adjustedDayNames[i]}</div>`;\n    }\n\n    // Create days grid\n    let daysHtml = '';\n\n    // Previous month days\n    const prevMonth = month === 0 ? 11 : month - 1;\n    const prevMonthYear = month === 0 ? year - 1 : year;\n    const daysInPrevMonth = new Date(prevMonthYear, prevMonth + 1, 0).getDate();\n\n    for (let i = 0; i < prevMonthDays; i++) {\n      const day = daysInPrevMonth - prevMonthDays + i + 1;\n      daysHtml += `<div class=\"day-item other-month disabled\">${day}</div>`;\n    }\n\n    // Current month days\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Normalize today for comparison\n\n\n    for (let i = 1; i <= daysInMonth; i++) {\n      const date = new Date(year, month, i);\n      const isToday =\n          today.getDate() === i &&\n          today.getMonth() === month &&\n          today.getFullYear() === year;\n\n      const isSaturday = date.getDay() === 6;\n      const isSelected = this.isDateSelected(date);\n\n      // Set hours to 0 for date comparison\n      const compareDate = new Date(date);\n      compareDate.setHours(0, 0, 0, 0);\n      const isFuture = compareDate > today;\n\n      // Check if day should be disabled\n      let isDisabled = false;\n\n      // If futureSaturdaysOnly is enabled, disable all non-Saturday days\n      // and all Saturdays that are in the past\n      if (this.options.futureSaturdaysOnly) {\n        isDisabled = !(isSaturday && isFuture);\n      }\n\n      // Apply min date restriction\n      if (this.options.minDate) {\n        const minDate = new Date(this.options.minDate);\n        minDate.setHours(0, 0, 0, 0);\n        if (compareDate < minDate) isDisabled = true;\n      }\n\n      // Apply max date restriction\n      if (this.options.maxDate) {\n        const maxDate = new Date(this.options.maxDate);\n        maxDate.setHours(0, 0, 0, 0);\n        if (compareDate > maxDate) isDisabled = true;\n      }\n\n\n      // Check if this date is specifically disabled\n      if (i == 4) {\n        console.log(date);\n        console.log(this.isDateDisabled(date));\n      }\n      if (this.isDateDisabled(date)) {\n\n        isDisabled = true;\n      }\n\n      const classes = [\n        'day-item',\n        isToday ? 'today' : '',\n        isSelected ? 'selected' : '',\n        isDisabled ? 'disabled' : '',\n        isSaturday ? 'saturday' : ''\n      ].filter(Boolean).join(' ');\n\n      // Add a data attribute to indicate if the day is clickable\n      const clickableAttr = isDisabled ? '' : 'data-clickable=\"true\"';\n\n      daysHtml += `<div class=\"${classes}\" ${clickableAttr} data-date=\"${year}-${month+1}-${i}\">${i}</div>`;\n    }\n\n    // Next month days\n    const daysFromNextMonth = 42 - (prevMonthDays + daysInMonth);\n    for (let i = 1; i <= daysFromNextMonth; i++) {\n      daysHtml += `<div class=\"day-item other-month disabled\">${i}</div>`;\n    }\n\n    daysHtml += '</div>';\n\n    // Combine all parts\n    let html = yearsHtml + navHtml + daysHeaderHtml + daysHtml;\n\n    // If multiple day selection is enabled, add the selection info\n    if (this.options.multipleDays && this.selectedDates.length > 0) {\n      html += this.renderSelectedDates();\n    }\n\n    return html;\n  }\n\n  // Render month selection mode\n  renderMonthMode() {\n    //console.log('renderMonthMode')\n    const year = this.currentDate.getFullYear();\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    // Create year selector\n    const yearsHtml = this.renderYearSelector(year);\n\n    // Create months grid\n    let monthsHtml = '<div class=\"datepicker-month-container\">';\n\n    for (let i = 0; i < 12; i++) {\n\n      const isSelected = this.isMonthSelected(i, year);\n      // Check if month is selectable based on min/max date\n      const isSelectable = this.isMonthSelectable(i, year);\n      // Check if this is the current month\n      const isThisMonth = (i === currentMonth && year === currentYear);\n\n      const classes = [\n        'month-item',\n        isSelected ? 'selected' : '',\n        isThisMonth ? 'this-month' : '',\n        !isSelectable ? 'disabled' : ''\n      ].filter(Boolean).join(' ');\n\n      const monthAttrs = isSelectable ? `data-month=\"${i}\" data-year=\"${year}\"` : '';\n\n      monthsHtml += `<div class=\"${classes}\" ${monthAttrs}>${this.options.monthNames[i]}</div>`;\n    }\n\n    monthsHtml += '</div>';\n\n    // Combine all parts\n    let html = yearsHtml + monthsHtml;\n\n    // If multiple month selection is enabled, add the selection info\n    if (this.options.multipleMonths && this.selectedMonths.length > 0) {\n      html += this.renderSelectedMonths();\n    }\n\n    return html;\n  }\n\n  // Render year selector\n  renderYearSelector(currentYear) {\n    // Get range of years based on min/max date constraints\n    const { startYear, endYear } = this.getYearsRange(currentYear);\n\n    let html = '<div class=\"datepicker-years\">';\n    html += '<select class=\"year-selector\">';\n\n    for (let year = startYear; year <= endYear; year++) {\n      html += `<option value=\"${year}\" ${year === currentYear ? 'selected' : ''}>${year}</option>`;\n    }\n\n    html += '</select>';\n    html += '</div>';\n\n    return html;\n  }\n\n  // Render selected dates info (for multiple selection)\n  renderSelectedDates() {\n    let html = '<div class=\"multi-select-info\">Selected Dates:</div>';\n    html += '<div class=\"selected-list\">';\n\n    this.selectedDates.forEach((date, index) => {\n      const formatted = this.formatDate(date, this.options.dateFormat);\n      html += `\n        <div class=\"selected-item\" data-index=\"${index}\">\n          ${formatted}\n          <button class=\"remove-btn\" data-index=\"${index}\">×</button>\n        </div>\n      `;\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  // Render selected months info (for multiple selection)\n  renderSelectedMonths() {\n    let html = '<div class=\"multi-select-info\">Selected Months:</div>';\n    html += '<div class=\"selected-list\">';\n\n    this.selectedMonths.forEach((item, index) => {\n      // Validate the month object\n      if (!item || typeof item.month !== 'number' || typeof item.year !== 'number' ||\n          item.month < 0 || item.month > 11 || isNaN(item.year)) {\n        return; // Skip invalid months\n      }\n\n      // Create a date object and validate it\n      const dateObj = new Date(item.year, item.month, 1);\n      if (isNaN(dateObj.getTime())) {\n        return; // Skip invalid dates\n      }\n\n      const formatted = this.formatDate(dateObj, this.options.monthFormat);\n\n      // Only add to HTML if we got a valid formatted string\n      if (formatted) {\n        html += `\n        <div class=\"selected-item\" data-index=\"${index}\">\n          ${formatted}\n          <button class=\"remove-btn\" data-index=\"${index}\">×</button>\n        </div>\n      `;\n      }\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  // Check if a date is selected\n  isDateSelected(date) {\n    return this.selectedDates.some(selectedDate =>\n        selectedDate.getDate() === date.getDate() &&\n        selectedDate.getMonth() === date.getMonth() &&\n        selectedDate.getFullYear() === date.getFullYear()\n    );\n  }\n\n  // Check if a month is selected\n  isMonthSelected(month, year) {\n    return this.selectedMonths.some(item =>\n        item.month === month && item.year === year\n    );\n  }\n\n  // Check if maximum month selections reached\n  isMaxMonthSelectionsReached() {\n    return (\n        this.options.maxMonthSelection !== null &&\n        this.selectedMonths.length >= this.options.maxMonthSelection\n    );\n  }\n\n  // Attach event listeners\n  attachEvents() {\n    // Tab switching (only if displayType is 'tabs')\n    if (this.options.displayType === 'tabs') {\n      const tabs = this.element.querySelectorAll('.datepicker-tab');\n      tabs.forEach(tab => {\n        tab.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const mode = tab.getAttribute('data-mode');\n          this.options.mode = mode;\n          this.setModeCookie(mode); // Save mode to cookie\n          this.render();\n          this.attachEvents();\n\n          // Trigger a custom event to notify of mode change\n          const event = new CustomEvent('datepickerModeChange', {\n            detail: { mode: mode }\n          });\n          this.element.dispatchEvent(event);\n        });\n      });\n    }\n\n    // Year selector\n    const yearSelector = this.element.querySelector('.year-selector');\n    if (yearSelector) {\n      yearSelector.addEventListener('change', (e) => {\n        this.currentDate.setFullYear(parseInt(e.target.value, 10));\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    // Month navigation\n    const prevMonthBtn = this.element.querySelector('.prev-month');\n    const nextMonthBtn = this.element.querySelector('.next-month');\n\n    if (prevMonthBtn) {\n      prevMonthBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n\n        // Check if going to the previous month is allowed based on min date\n        if (this.options.minDate) {\n          const minDate = new Date(this.options.minDate);\n          const currentMonth = this.currentDate.getMonth();\n          const currentYear = this.currentDate.getFullYear();\n\n          // If we're already at the min date month and year, don't go back further\n          if ((currentMonth === 0 && currentYear === minDate.getFullYear()) ||\n              (currentMonth === minDate.getMonth() && currentYear === minDate.getFullYear())) {\n            return;\n          }\n        }\n\n        this.currentDate.setMonth(this.currentDate.getMonth() - 1);\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    if (nextMonthBtn) {\n      nextMonthBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n\n        // Check if going to the next month is allowed based on max date\n        if (this.options.maxDate) {\n          const maxDate = new Date(this.options.maxDate);\n          const currentMonth = this.currentDate.getMonth();\n          const currentYear = this.currentDate.getFullYear();\n\n          // If we're already at the max date month and year, don't go forward further\n          if ((currentMonth === 11 && currentYear === maxDate.getFullYear()) ||\n              (currentMonth === maxDate.getMonth() && currentYear === maxDate.getFullYear())) {\n            return;\n          }\n        }\n\n        this.currentDate.setMonth(this.currentDate.getMonth() + 1);\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    // Day selection\n    if (this.options.mode === 'day') {\n      // Only select clickable days (those with data-clickable attribute)\n      const dayItems = this.element.querySelectorAll('.day-item[data-clickable=\"true\"]');\n      dayItems.forEach(day => {\n        day.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const dateStr = day.getAttribute('data-date');\n          if (dateStr) {\n            const [year, month, date] = dateStr.split('-').map(Number);\n            const selectedDate = new Date(year, month - 1, date);\n\n            if (this.options.multipleDays) {\n              // If multiple day selection is enabled\n              const index = this.selectedDates.findIndex(d =>\n                  d.getDate() === selectedDate.getDate() &&\n                  d.getMonth() === selectedDate.getMonth() &&\n                  d.getFullYear() === selectedDate.getFullYear()\n              );\n\n              if (index === -1) {\n                // Add to selection\n                this.selectedDates.push(selectedDate);\n              } else {\n                // Remove from selection\n                this.selectedDates.splice(index, 1);\n              }\n\n              // Update the UI to reflect the new selection\n              // Remove 'selected' class from all days with data-clickable\n              dayItems.forEach(di => di.classList.remove('selected'));\n              \n              // Add 'selected' class to selected days\n              this.selectedDates.forEach(selected => {\n                const dayStr = `${selected.getFullYear()}-${selected.getMonth()+1}-${selected.getDate()}`;\n                const selectedEl = this.element.querySelector(`.day-item[data-date=\"${dayStr}\"]`);\n                if (selectedEl) {\n                  selectedEl.classList.add('selected');\n                }\n              });\n\n              this.render();\n              this.attachEvents();\n            } else {\n              // Single selection\n              this.selectedDates = [selectedDate];\n              \n              // Update the UI to reflect the new selection\n              // Remove 'selected' class from all days with data-clickable\n              dayItems.forEach(di => di.classList.remove('selected'));\n              // Add 'selected' class to the clicked day\n              day.classList.add('selected');\n\n              // Create an event to notify that a date has been selected and applied\n              const event = new CustomEvent('datepickerApply', {\n                detail: {\n                  mode: 'day',\n                  selectedDates: this.selectedDates,\n                  selectedMonths: []\n                }\n              });\n              this.element.dispatchEvent(event);\n\n              // Update input value if available\n              this.updateInputValue();\n\n              // Hide the picker\n              this.hide();\n\n              // Call callback if provided\n              if (this.options.onDateChange) {\n                this.options.onDateChange(this.selectedDates[0]);\n              }\n            }\n          }\n        });\n      });\n    }\n\n    // Month selection\n    // Month selection event handler for the DatepickerTabs class\n    // This should replace the current month selection handler in attachEvents method\n\n    // Month selection\n    if (this.options.mode === 'month') {\n      const monthItems = this.element.querySelectorAll('.month-item:not(.disabled)');\n      monthItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const month = parseInt(item.getAttribute('data-month'), 10);\n          const year = parseInt(item.getAttribute('data-year'), 10);\n\n          if (this.options.multipleMonths) {\n            // If multiple month selection is enabled\n            const index = this.selectedMonths.findIndex(m =>\n                m.month === month && m.year === year\n            );\n\n            if (index === -1) {\n              // Check if adding the month would exceed the maximum allowed\n              if (this.options.maxMonthSelection && this.selectedMonths.length >= this.options.maxMonthSelection) {\n                // If max reached, remove the oldest selection before adding new one\n                this.selectedMonths.shift();\n              }\n\n              // Add to selection\n              this.selectedMonths.push({ month, year });\n\n              // Also update selected dates array with all month selections\n              this.selectedDates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            } else {\n              // Remove from selection\n              this.selectedMonths.splice(index, 1);\n\n              // Update selected dates array to match\n              this.selectedDates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            }\n\n\n            // Re-render to show updated selections\n            this.render();\n            this.attachEvents();\n\n            // Update input value\n            this.updateInputValue();\n\n            // Call callback with all selected dates\n            if (this.options.onDateChange) {\n              this.options.onDateChange(this.selectedDates);\n            }\n          } else {\n            // Single selection\n            this.selectedMonths = [{ month, year }];\n\n            // Also update selected dates to first day of month\n            this.selectedDates = [new Date(year, month, 1)];\n\n            // Update currentDate to match the selected month\n            this.currentDate = new Date(year, month, 1);\n\n            // Re-render to show updated selections\n            this.render();\n            this.attachEvents();\n\n            // If single month selection, apply immediately and close\n            // Create an event to notify that a month has been selected and applied\n            const event = new CustomEvent('datepickerApply', {\n              detail: {\n                mode: 'month',\n                selectedDates: this.selectedDates,\n                selectedMonths: this.selectedMonths\n              }\n            });\n            this.element.dispatchEvent(event);\n\n            // Update input value if available\n            this.updateInputValue();\n\n            // Hide the picker\n            this.hide();\n\n            // Call callback if provided\n            if (this.options.onDateChange) {\n              this.options.onDateChange(this.selectedDates[0]);\n            }\n          }\n        });\n      });\n    }\n\n    // Remove buttons for multi-select\n    const removeButtons = this.element.querySelectorAll('.remove-btn');\n    removeButtons.forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent bubbling to parent\n        const index = parseInt(btn.getAttribute('data-index'), 10);\n\n        if (this.options.mode === 'day') {\n          this.selectedDates.splice(index, 1);\n        } else {\n          this.selectedMonths.splice(index, 1);\n        }\n\n        this.render();\n        this.attachEvents();\n\n        // Update input value\n        this.updateInputValue();\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          if (this.options.mode === 'day') {\n            this.options.onDateChange(this.options.multiple ? this.selectedDates : this.selectedDates[0]);\n          } else {\n            const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            this.options.onDateChange(this.options.multiple ? dates : dates[0]);\n          }\n        }\n      });\n    });\n\n    // Clear button\n    const clearBtn = this.element.querySelector('.datepicker-btn.clear');\n    if (clearBtn) {\n      clearBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n        this.selectedDates = [];\n        this.selectedMonths = [];\n        this.render();\n        this.attachEvents();\n\n        // Update input value if available\n        if (this.inputElement) {\n          this.inputElement.value = '';\n        }\n\n        // Create a custom event for clearing\n        const event = new CustomEvent('datepickerClear');\n        this.element.dispatchEvent(event);\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          this.options.onDateChange(null);\n        }\n      });\n    }\n\n    // Apply button\n    // Apply button handler for the DatepickerTabs class\n    // This should replace the current Apply button handler in attachEvents method\n\n    // Apply button\n    const applyBtn = this.element.querySelector('.datepicker-btn.apply');\n    if (applyBtn) {\n      // First, remove any existing event listeners to prevent duplicates\n      // (this is crucial to prevent multiple calls)\n      const newApplyBtn = applyBtn.cloneNode(true);\n      applyBtn.parentNode.replaceChild(newApplyBtn, applyBtn);\n\n      // Add the event listener to the new button\n      newApplyBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling\n\n        // For debugging\n        //console.log('apply clicked with values:', this.inputElement ? this.inputElement.value : 'no input');\n\n        // Update input value if available\n        this.updateInputValue();\n\n        // Hide the picker\n        this.hide();\n\n        // Call callback if provided - ONLY ONCE\n        if (this.options.onDateChange) {\n          // In month mode with multiple selections\n          if (this.options.mode === 'month' && this.options.multipleMonths) {\n            if (this.selectedMonths.length > 0) {\n              const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n              // Direct call to callback with all dates\n              this.options.onDateChange(dates);\n            } else {\n              this.options.onDateChange(null);\n            }\n          }\n          // Day mode or single month selection\n          else if (this.options.mode === 'day') {\n            if (this.selectedDates.length > 0) {\n              this.options.onDateChange(this.options.multipleDays ? this.selectedDates : this.selectedDates[0]);\n            } else {\n              this.options.onDateChange(null);\n            }\n          }\n        }\n\n        // Fire the custom event AFTER the callback (not before)\n        const event = new CustomEvent('datepickerApply', {\n          detail: {\n            mode: this.options.mode,\n            selectedDates: this.selectedDates,\n            selectedMonths: this.selectedMonths\n          }\n        });\n        this.element.dispatchEvent(event);\n      });\n    }\n  }\n\n  /**\n   * Public methods\n   */\n\n  /**\n   * Set date picker mode\n   * @param {string} mode - 'day' or 'month'\n   */\n  setMode(mode) {\n    if (mode === 'day' || mode === 'month') {\n      this.options.mode = mode;\n      if (this.options.displayType === 'tabs') {\n        this.setModeCookie(mode);\n      }\n      this.render();\n      this.attachEvents();\n      this.updateInputValue();\n    }\n    return this;\n  }\n\n  getMode() {\n    return this.options.mode;\n  }\n\n  /**\n   * Set display type\n   * @param {string} type - 'tabs', 'day', or 'month'\n   */\n  setDisplayType(type) {\n    if (type === 'tabs' || type === 'day' || type === 'month') {\n      this.options.displayType = type;\n\n      // If not tabs, force mode to match displayType\n      if (type !== 'tabs') {\n        this.options.mode = type;\n      }\n\n      // Re-render picker\n      this.render();\n      this.attachEvents();\n    }\n    return this;\n  }\n\n  /**\n   * Set selected date(s)\n   * @param {Date|Date[]|null} date - Date or array of dates to select\n   */\n  setDate(date) {\n    if (Array.isArray(date)) {\n      this.selectedDates = date.map(d => new Date(d));\n\n      // Also update month selection if in month mode\n      this.selectedMonths = date.map(d => ({\n        month: new Date(d).getMonth(),\n        year: new Date(d).getFullYear()\n      }));\n    } else if (date) {\n      this.selectedDates = [new Date(date)];\n\n      // Also update month selection if in month mode\n      const d = new Date(date);\n      this.selectedMonths = [{\n        month: d.getMonth(),\n        year: d.getFullYear()\n      }];\n    } else {\n      this.selectedDates = [];\n      this.selectedMonths = [];\n    }\n\n    this.render();\n    this.attachEvents();\n    this.updateInputValue();\n\n    return this;\n  }\n\n  /**\n   * Set max month selection limit\n   * @param {number|null} limit - Max number of months that can be selected\n   */\n  setMaxMonthSelection(limit) {\n    this.options.maxMonthSelection = limit;\n\n    // If current selections exceed the new limit, trim the excess\n    if (limit !== null && this.selectedMonths.length > limit) {\n      // Keep only the most recent selections up to the limit\n      this.selectedMonths = this.selectedMonths.slice(-limit);\n\n      // Also update the selectedDates to match\n      this.selectedDates = this.selectedMonths.map(m =>\n          new Date(m.year, m.month, 1)\n      );\n\n      this.render();\n      this.attachEvents();\n      this.updateInputValue();\n    }\n\n    return this;\n  }\n\n  /**\n   * Get selected date(s)\n   * @returns {Date|Date[]|null} - Selected date(s)\n   */\n  getDate() {\n    if (this.options.mode === 'day') {\n      return this.selectedDates.length === 0 ? null :\n          (this.options.multipleDays ? this.selectedDates : this.selectedDates[0]);\n    } else {\n      // Convert month selections to dates (1st of each month)\n      const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n      return dates.length === 0 ? null :\n          (this.options.multipleMonths ? dates : dates[0]);\n    }\n  }\n\n  /**\n   * Enable/disable multiple days selection\n   * @param {boolean} enable - Whether to enable multiple day selection\n   */\n  setMultipleDays(enable) {\n    this.options.multipleDays = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Enable/disable multiple months selection\n   * @param {boolean} enable - Whether to enable multiple month selection\n   */\n  setMultipleMonths(enable) {\n    this.options.multipleMonths = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Enable/disable multiple selection (both days and months)\n   * @param {boolean} enable - Whether to enable multiple selection\n   */\n  setMultiple(enable) {\n    this.options.multipleDays = !!enable;\n    this.options.multipleMonths = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n\n  /**\n   * Set date format\n   * @param {string} format - Format string\n   */\n  setDateFormat(format) {\n    this.options.dateFormat = format;\n    this.updateInputValue();\n    return this;\n  }\n\n  /**\n   * Set month format\n   * @param {string} format - Format string\n   */\n  setMonthFormat(format) {\n    this.options.monthFormat = format;\n    this.updateInputValue();\n    return this;\n  }\n\n  /**\n   * Set min date\n   * @param {Date|null} date - Minimum selectable date\n   */\n  setMinDate(date) {\n    this.options.minDate = date ? new Date(date) : null;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n\n  /**\n   * Set max date\n   * @param {Date|null} date - Maximum selectable date\n   */\n  setMaxDate(date) {\n    this.options.maxDate = date ? new Date(date) : null;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Destroy the datepicker instance and clean up\n   */\n  destroy() {\n    // Remove event listeners from input\n    if (this.inputElement) {\n      const newInputElement = this.inputElement.cloneNode(true);\n      this.inputElement.parentNode.replaceChild(newInputElement, this.inputElement);\n    }\n    \n    // Remove the container element from DOM\n    if (this.containerElement && this.containerElement.parentNode) {\n      this.containerElement.parentNode.removeChild(this.containerElement);\n    }\n    \n    // Clean up references\n    this.element = null;\n    this.inputElement = null;\n    this.containerElement = null;\n    this.instances = [];\n  }\n\n  // This one used to render in demos\n  getDatesAsString(dates) {\n    const currentMode = this.getMode();\n    if (Array.isArray(dates)) {\n      return dates.map(d => {\n        const month = d.toLocaleString('default', { month: 'short' });\n        const year = d.getFullYear();\n        const day = d.getDay();\n        if ('day' == currentMode) {\n          return `${day} ${month} ${year}`;\n        } else {\n          return `${month} ${year}`;\n        }\n      }).join(', ');\n    } else {\n      const month = dates.toLocaleString('default', { month: 'short' });\n      const year = dates.getFullYear();\n      const day = dates.getDate();\n      if ('day' == currentMode) {\n          return  `${day} ${month} ${year}`;\n      } else {\n          return `${month} ${year}`;\n      }\n    }\n  }\n\n}\n\n\n// Create global reference\nwindow.DatepickerTabs = DatepickerTabs;\n\n// Make the DatepickerTabs class available in Node.js environments (for testing)\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = DatepickerTabs;\n}"]}