{"version":3,"sources":["custom-datepicker.js"],"names":["DatepickerTabs","_createClass","selector","_this","this","options","arguments","length","undefined","defaults","_classCallCheck","mode","displayType","multiple","maxMonthSelection","startDate","Date","minDate","maxDate","futureSaturdaysOnly","onDateChange","monthNames","cookieName","dateFormat","monthFormat","zIndex","containerId","_objectSpread","document","querySelectorAll","elements","forEach","inputElement","index","instanceOptions","instanceId","concat","now","instances","push","_createInstance","console","error","HTMLElement","containerElement","className","body","element","add","currentDate","selectedDates","selectedMonths","isVisible","month","getMonth","year","init","key","value","DatapickerTabs","date","format","day","getDate","getFullYear","replace","toString","padStart","container","inputRect","containerHeight","containerWidth","windowHeight","showOnTop","scrollLeft","scrollTop","left","top","querySelector","getBoundingClientRect","offsetHeight","offsetWidth","formatDate","bottom","window","pageXOffset","documentElement","pageYOffset","innerWidth","positionPicker","style","_this2","render","attachEvents","setupInputElement","hide","addEventListener","e","contains","target","_this3","updateInputValue","stopPropagation","show","getAttribute","setAttribute","m","classList","map","d","_this4","formattedDates","join","formattedMonths","event","_this5","display","setTimeout","resizeHandler","CustomEvent","dispatchEvent","expiryDate","setDate","cookie","toUTCString","name","decodeURIComponent","split","cookies","i","trim","indexOf","savedMode","getModeCookie","currentYear","endYear","minYear","Math","maxYear","startYear","minMonth","getYearsRange","maxMonth","content","title","innerHTML","createElement","dayTab","renderDayMode","appendChild","monthTab","remove","tabsUI","renderMonthMode","daysInMonth","getDay","yearsHtml","renderYearSelector","navHtml","daysHeaderHtml","firstDayOfMonth","dayNames","daysHtml","daysInPrevMonth","prevMonthDays","today","setHours","prevMonth","prevMonthYear","isSaturday","isSelected","isDateSelected","compareDate","isDisabled","classes","isToday","filter","Boolean","clickableAttr","daysFromNextMonth","html","renderSelectedDates","monthsHtml","isMonthSelected","isMonthSelectable","isSelectable","monthAttrs","renderSelectedMonths","_this$getYearsRange","_this6","formatted","_this7","some","selectedDate","isMaxMonthSelectionsReached","_this8","item","setModeCookie","prevMonthBtn","tab","yearSelector","setFullYear","parseInt","nextMonthBtn","currentMonth","setMonth","dayItems","_dateStr$split$map2","dateStr","splice","_slicedToArray","Number","findIndex","detail","shift","removeButtons","btn","clearBtn","dates","applyBtn","setDisplayType","type","Array","limit","slice","enable","setMonthFormat","newInputElement","cloneNode","parentNode","replaceChild","removeChild"],"mappings":"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","file":"custom-datepicker.min.js","sourcesContent":["/**\n * DatepickerTabs\n *\n * A versatile date picker with day and month selection modes,\n * multiple selection support, and various formatting options.\n *\n * @version 1.2.0\n *\n * FEATURES:\n * - Day and Month selection modes\n * - Single or multiple selection\n * - Format customization\n * - Min/Max date constraints\n * - Max month selection limit\n * - Display type options: 'tabs', 'day', or 'month'\n * - Saturday-only selection for fishing venues\n * - Cookie-based mode persistence\n * - Tooltip overlay positioning\n * - Mobile-friendly design\n * - Automatic container creation\n * - Support for multiple instances with class selectors\n *\n * USAGE:\n *\n * 1. Basic initialization:\n * ```javascript\n * // Initialize on a single input with ID\n * const picker = new DatepickerTabs('#date-input');\n * \n * // Initialize on multiple inputs with class\n * const pickers = new DatepickerTabs('.date-input-class');\n * ```\n *\n * 2. With options:\n * ```javascript\n * const picker = new DatepickerTabs('.date-input', {\n *   mode: 'month',\n *   multiple: true,\n *   dateFormat: 'DD/MM/YYYY',\n *   displayType: 'tabs', // 'tabs', 'day', or 'month'\n *   maxMonthSelection: 6, // Limit to select max 6 months\n *   maxDate: new Date(2026, 11, 31), // Max selectable date\n *   futureSaturdaysOnly: true,\n *   onDateChange: function(date) {\n *     console.log('Selected date:', date);\n *   }\n * });\n * ```\n *\n * 3. Methods:\n * ```javascript\n * // Set date programmatically\n * picker.setDate(new Date());\n *\n * // Get currently selected date(s)\n * const date = picker.getDate();\n *\n * // Switch mode\n * picker.setMode('month');\n *\n * // Enable/disable multiple selection\n * picker.setMultiple(true);\n * ```\n */\nclass DatepickerTabs {\n  constructor(selector, options = {}) {\n    // Define default options\n    const defaults = {\n      mode: 'day', // 'day' or 'month'\n      displayType: 'tabs', // 'tabs', 'day', or 'month' - controls if tabs should be shown\n      multiple: false, // Allow multiple date/month selection\n      maxMonthSelection: null, // Maximum number of months that can be selected (when multiple is true)\n      startDate: new Date(),\n      minDate: null,\n      maxDate: null,\n      futureSaturdaysOnly: false, // Option for day mode to only enable Saturdays in the future\n      onDateChange: null, // Callback when date(s) change\n      monthNames: [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n      ],\n      dayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      cookieName: 'datepickerTabsMode', // Store mode in cookie\n      dateFormat: 'DD MMM YYYY', // Default format for display\n      monthFormat: 'MMM YYYY', // Default format for month display\n      position: 'bottom', // 'bottom' or 'top' - default position relative to input\n      zIndex: 9999, // z-index for the picker container\n      containerId: '', // Custom container ID (if not provided, one will be generated)\n    };\n\n    // Merge default options with provided options\n    this.options = { ...defaults, ...options };\n    \n    // Store instance references \n    this.instances = [];\n    \n    // Check if selector refers to multiple elements\n    if (typeof selector === 'string') {\n      const elements = document.querySelectorAll(selector);\n      \n      // If multiple elements found, initialize on each one\n      if (elements.length > 1) {\n        elements.forEach((inputElement, index) => {\n          const instanceOptions = {...this.options};\n          // Create a unique container ID for each instance\n          const instanceId = `datepicker-container-${Date.now()}-${index}`;\n          this.instances.push(this._createInstance(inputElement, instanceOptions, instanceId));\n        });\n        \n        return this.instances;\n      } else if (elements.length === 1) {\n        // Single element - use it as input element\n        this.inputElement = elements[0];\n      } else {\n        console.error('DatapickerTabs: No elements found with selector:', selector);\n        return;\n      }\n    } else if (selector instanceof HTMLElement) {\n      // If an actual element is passed, use it directly\n      this.inputElement = selector;\n    } else {\n      console.error('DatapickerTabs: Invalid selector or element:', selector);\n      return;\n    }\n    \n    // Create container element for this instance\n    const containerId = this.options.containerId || `datepicker-container-${Date.now()}`;\n    this.containerId = containerId;\n    \n    // Create container element and add it to the DOM\n    this.containerElement = document.createElement('div');\n    this.containerElement.id = containerId;\n    this.containerElement.className = 'datepicker-tabs-container';\n    document.body.appendChild(this.containerElement);\n    \n    // Set the element where the datepicker will be rendered\n    this.element = this.containerElement;\n\n    // Add the wrapper class to the element for CSS scoping\n    this.element.classList.add('datepicker-tabs');\n\n    // Initialize properties\n    this.currentDate = new Date(this.options.startDate || new Date());\n    this.selectedDates = this.options.startDate ? [new Date(this.options.startDate)] : [];\n    this.selectedMonths = [];\n    this.isVisible = false;\n\n    // If displayType is 'day' or 'month', force the mode to match\n    if (this.options.displayType === 'day' || this.options.displayType === 'month') {\n      this.options.mode = this.options.displayType;\n    }\n\n    // If month mode and a start date is provided, extract the month and year\n    if (this.options.mode === 'month' && this.options.startDate) {\n      const startDate = new Date(this.options.startDate);\n      this.selectedMonths.push({\n        month: startDate.getMonth(),\n        year: startDate.getFullYear()\n      });\n    }\n\n    // Try to restore mode from cookie (only if displayType is 'tabs')\n    if (this.options.displayType === 'tabs') {\n      this.restoreModeFromCookie();\n    }\n\n    // Initialize the datepicker\n    this.init();\n  }\n\n  /**\n   * Create a datepicker instance for a specific input element\n   * @private\n   */\n  _createInstance(inputElement, options, containerId) {\n    // Create a new options object with the input element\n    const instanceOptions = {...options, containerId};\n    \n    // Create a new instance and return it\n    return new DatapickerTabs(inputElement, instanceOptions);\n  }\n\n  /**\n   * Format a date according to the specified format\n   * Supports:\n   * - DD: Day of month with leading zero\n   * - D: Day of month without leading zero\n   * - MMM: Month name short (Jan, Feb, etc.)\n   * - MMMM: Month name full (January, February, etc.)\n   * - MM: Month number with leading zero\n   * - M: Month number without leading zero\n   * - YYYY: Full year (2023)\n   * - YY: Short year (23)\n   */\n  formatDate(date, format) {\n    if (!date) return '';\n\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n\n    // Replace format tokens with actual values\n    return format\n        .replace(/DD/g, day.toString().padStart(2, '0'))\n        .replace(/D/g, day.toString())\n        .replace(/MMMM/g, this.options.monthNames[month])\n        .replace(/MMM/g, this.options.monthNames[month].substr(0, 3))\n        .replace(/MM/g, (month + 1).toString().padStart(2, '0'))\n        .replace(/M/g, (month + 1).toString())\n        .replace(/YYYY/g, year.toString())\n        .replace(/YY/g, year.toString().substr(2, 2));\n  }\n\n  /**\n   * Position the datepicker relative to the input element\n   * Adjusts to stay in viewport\n   */\n  positionPicker() {\n    if (!this.inputElement) return;\n\n    const container = this.element.querySelector('.custom-datepicker-container');\n    if (!container) return;\n\n    // Get input position and dimensions\n    const inputRect = this.inputElement.getBoundingClientRect();\n    const containerHeight = container.offsetHeight;\n    const containerWidth = container.offsetWidth;\n    const windowHeight = window.innerHeight;\n    const windowWidth = window.innerWidth;\n\n    // Check if there's enough space below\n    const spaceBelow = windowHeight - inputRect.bottom;\n    const showOnTop = spaceBelow < containerHeight && inputRect.top > containerHeight;\n\n    // Calculate scroll offset for initial positioning\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n\n    // Position horizontally - align with input field left edge\n    let left = inputRect.left + scrollLeft;\n\n    // Ensure the picker doesn't go off-screen to the right\n    if (left + containerWidth > windowWidth + scrollLeft) {\n      left = (inputRect.right - containerWidth) + scrollLeft;\n    }\n\n    // Ensure the picker doesn't go off-screen to the left\n    if (left < scrollLeft) {\n      left = scrollLeft + 5;\n    }\n\n    // Position vertically based on available space\n    let top;\n    if (showOnTop || this.options.position === 'top') {\n      // Position above the input\n      top = inputRect.top - containerHeight + scrollTop;\n\n      // If not enough space above, position below instead\n      if (top < scrollTop) {\n        top = inputRect.bottom + scrollTop;\n      }\n    } else {\n      // Position below the input by default\n      top = inputRect.bottom + scrollTop;\n\n      // If not enough space below, position above if possible\n      if (top + containerHeight > windowHeight + scrollTop && inputRect.top > containerHeight) {\n        top = inputRect.top - containerHeight + scrollTop;\n      }\n    }\n\n    // Use fixed positioning with coordinates relative to viewport\n    container.style.position = 'absolute';\n    container.style.top = `${top}px`;\n    container.style.left = `${left}px`;\n    container.style.zIndex = this.options.zIndex;\n  }\n\n  /**\n   * Initialize the datepicker\n   */\n  init() {\n    this.render();\n    this.attachEvents();\n\n    // Set up input element if provided\n    if (this.inputElement) {\n      this.setupInputElement();\n    }\n\n    // Initially hide the picker\n    this.hide();\n\n    // Add document click handler to close when clicking outside\n    document.addEventListener('click', (e) => {\n      if (this.isVisible &&\n          !this.element.contains(e.target) &&\n          (!this.inputElement || !this.inputElement.contains(e.target))) {\n        this.hide();\n      }\n    });\n  }\n\n  /**\n   * Setup input element events\n   */\n  setupInputElement() {\n    // Update input with initial date if available\n    this.inputElement.classList.add('datepicker-input');\n\n    this.updateInputValue();\n\n    // Add click handler to show the picker\n    this.inputElement.addEventListener('click', (e) => {\n      e.stopPropagation();\n      if (this.isVisible) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    // Make input readonly to prevent keyboard input\n    this.inputElement.setAttribute('readonly', 'readonly');\n\n    // Add placeholder if not already set\n    if (!this.inputElement.getAttribute('placeholder')) {\n      this.inputElement.setAttribute('placeholder', 'Select a date');\n    }\n  }\n\n  /**\n   * Update input element with formatted date value\n   */\n  updateInputValue() {\n    if (!this.inputElement) return;\n\n    if (this.options.mode === 'day') {\n      if (this.selectedDates.length === 0) {\n        this.inputElement.value = '';\n      } else if (this.options.multiple) {\n        const formattedDates = this.selectedDates.map(d =>\n            this.formatDate(d, this.options.dateFormat)\n        );\n        this.inputElement.value = formattedDates.join(', ');\n      } else {\n        this.inputElement.value = this.formatDate(\n            this.selectedDates[0],\n            this.options.dateFormat\n        );\n      }\n    } else {\n      if (this.selectedMonths.length === 0) {\n        this.inputElement.value = '';\n      } else if (this.options.multiple) {\n        const formattedMonths = this.selectedMonths.map(m =>\n            this.formatDate(new Date(m.year, m.month, 1), this.options.monthFormat)\n        );\n        this.inputElement.value = formattedMonths.join(', ');\n      } else {\n        const m = this.selectedMonths[0];\n        this.inputElement.value = this.formatDate(\n            new Date(m.year, m.month, 1),\n            this.options.monthFormat\n        );\n      }\n    }\n  }\n\n  /**\n   * Show the datepicker\n   */\n  show() {\n    if (this.isVisible) return;\n\n    // Show the container\n    const container = this.element.querySelector('.custom-datepicker-container');\n    if (container) {\n      container.style.display = 'block';\n      this.isVisible = true;\n\n      // Position the picker with a slight delay to ensure it's rendered\n      setTimeout(() => {\n        this.positionPicker();\n      }, 0);\n\n      // Add window resize handler (but not scroll handler)\n      this.resizeHandler = () => {\n        if (this.isVisible) {\n          this.positionPicker();\n        }\n      };\n\n      window.addEventListener('resize', this.resizeHandler);\n\n      // Trigger a custom event\n      const event = new CustomEvent('datepickerShow');\n      this.element.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Hide the datepicker\n   */\n  hide() {\n    if (!this.isVisible && !this.element.querySelector('.custom-datepicker-container')) return;\n\n    // Hide the container\n    const container = this.element.querySelector('.custom-datepicker-container');\n    if (container) {\n      container.style.display = 'none';\n      this.isVisible = false;\n\n      // Remove resize event listener\n      if (this.resizeHandler) {\n        window.removeEventListener('resize', this.resizeHandler);\n      }\n\n      // Trigger a custom event\n      const event = new CustomEvent('datepickerHide');\n      this.element.dispatchEvent(event);\n    }\n  }\n\n  // Set cookie for mode persistence\n  setModeCookie(mode) {\n    if (this.options.displayType !== 'tabs') return; // Only use cookies in tabs mode\n\n    const expiryDate = new Date();\n    expiryDate.setDate(expiryDate.getDate() + 7); // Cookie expires in 7 days\n    document.cookie = `${this.options.cookieName}=${mode};expires=${expiryDate.toUTCString()};path=/`;\n  }\n\n  // Get mode from cookie\n  getModeCookie() {\n    const name = this.options.cookieName + \"=\";\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const cookies = decodedCookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n      let cookie = cookies[i].trim();\n      if (cookie.indexOf(name) === 0) {\n        return cookie.substring(name.length, cookie.length);\n      }\n    }\n    return null;\n  }\n\n  // Restore mode from cookie if available\n  restoreModeFromCookie() {\n    const savedMode = this.getModeCookie();\n    if (savedMode && (savedMode === 'day' || savedMode === 'month')) {\n      this.options.mode = savedMode;\n    }\n  }\n\n  /**\n   * Get years range for year selector based on min/max date constraints\n   */\n  getYearsRange(currentYear) {\n    let startYear = currentYear - 5;\n    let endYear = currentYear + 5;\n\n    // Apply min date constraint\n    if (this.options.minDate) {\n      const minYear = this.options.minDate.getFullYear();\n      startYear = Math.max(startYear, minYear);\n    }\n\n    // Apply max date constraint\n    if (this.options.maxDate) {\n      const maxYear = this.options.maxDate.getFullYear();\n      endYear = Math.min(endYear, maxYear);\n    }\n\n    return { startYear, endYear };\n  }\n\n  /**\n   * Check if a month is selectable based on min/max date constraints\n   */\n  isMonthSelectable(month, year) {\n    // Check for min date constraint\n    if (this.options.minDate) {\n      const minDate = new Date(this.options.minDate);\n      const minYear = minDate.getFullYear();\n      const minMonth = minDate.getMonth();\n\n      if (year < minYear || (year === minYear && month < minMonth)) {\n        return false;\n      }\n    }\n\n    // Check for max date constraint\n    if (this.options.maxDate) {\n      const maxDate = new Date(this.options.maxDate);\n      const maxYear = maxDate.getFullYear();\n      const maxMonth = maxDate.getMonth();\n\n      if (year > maxYear || (year === maxYear && month > maxMonth)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Render the datepicker UI\n  render() {\n    // Check if the container already exists\n    let container = this.element.querySelector('.custom-datepicker-container');\n\n    if (!container) {\n      // First time rendering - create the full container\n      container = document.createElement('div');\n      container.className = 'custom-datepicker-container';\n\n      // Add header\n      container.innerHTML = `\n        <div class=\"datepicker-header\">\n          <h3 class=\"datepicker-title\">Select ${this.options.mode === 'day' ? 'Date' : 'Month'}</h3>\n        </div>\n      `;\n\n      // Add tabs only if displayType is tabs\n      if (this.options.displayType === 'tabs') {\n        container.innerHTML += `\n          <div class=\"datepicker-tabs-ui\">\n            <button class=\"datepicker-tab ${this.options.mode === 'day' ? 'active' : ''}\" data-mode=\"day\">Specific Date</button>\n            <button class=\"datepicker-tab ${this.options.mode === 'month' ? 'active' : ''}\" data-mode=\"month\">Whole Month</button>\n          </div>\n        `;\n      }\n\n      // Create content based on mode\n      const content = document.createElement('div');\n      content.className = 'datepicker-content';\n\n      if (this.options.mode === 'day') {\n        content.innerHTML = this.renderDayMode();\n      } else {\n        content.innerHTML = this.renderMonthMode();\n      }\n\n      container.appendChild(content);\n\n      // Add footer with buttons\n      container.innerHTML += `\n        <div class=\"datepicker-footer\">\n          <button class=\"datepicker-btn clear\">Clear</button>\n          <button class=\"datepicker-btn apply\">Apply</button>\n        </div>\n      `;\n\n      this.element.appendChild(container);\n    } else {\n      // Update only what's needed\n      const title = container.querySelector('.datepicker-title');\n      if (title) {\n        title.textContent = `Select ${this.options.mode === 'day' ? 'Date' : 'Month'}`;\n      }\n\n      // Update tabs only if they are present\n      const tabsUI = container.querySelector('.datepicker-tabs-ui');\n      if (tabsUI) {\n        const dayTab = tabsUI.querySelector('[data-mode=\"day\"]');\n        const monthTab = tabsUI.querySelector('[data-mode=\"month\"]');\n\n        if (dayTab && monthTab) {\n          if (this.options.mode === 'day') {\n            dayTab.classList.add('active');\n            monthTab.classList.remove('active');\n          } else {\n            dayTab.classList.remove('active');\n            monthTab.classList.add('active');\n          }\n        }\n      }\n\n      // Update content\n      const content = container.querySelector('.datepicker-content');\n      if (content) {\n        content.innerHTML = this.options.mode === 'day'\n            ? this.renderDayMode()\n            : this.renderMonthMode();\n      }\n    }\n  }\n\n  // Render day selection mode\n  renderDayMode() {\n    const year = this.currentDate.getFullYear();\n    const month = this.currentDate.getMonth();\n\n    // Get days in the current month\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n    // Get the day of the week of the first day of the month\n    const firstDayOfMonth = new Date(year, month, 1).getDay();\n\n    // Calculate days from previous month to display\n    const prevMonthDays = firstDayOfMonth;\n\n    // Create year selector\n    const yearsHtml = this.renderYearSelector(year);\n\n    // Create month navigation\n    const navHtml = `\n      <div class=\"datepicker-nav\">\n        <button class=\"datepicker-nav-btn prev-month\">&lt;</button>\n        <span>${this.options.monthNames[month]} ${year}</span>\n        <button class=\"datepicker-nav-btn next-month\">&gt;</button>\n      </div>\n    `;\n\n    // Create day names header\n    let daysHeaderHtml = '<div class=\"datepicker-days-container\">';\n    for (let i = 0; i < 7; i++) {\n      daysHeaderHtml += `<div class=\"day-name\">${this.options.dayNames[i]}</div>`;\n    }\n\n    // Create days grid\n    let daysHtml = '';\n\n    // Previous month days\n    const prevMonth = month === 0 ? 11 : month - 1;\n    const prevMonthYear = month === 0 ? year - 1 : year;\n    const daysInPrevMonth = new Date(prevMonthYear, prevMonth + 1, 0).getDate();\n\n    for (let i = 0; i < prevMonthDays; i++) {\n      const day = daysInPrevMonth - prevMonthDays + i + 1;\n      daysHtml += `<div class=\"day-item other-month disabled\">${day}</div>`;\n    }\n\n    // Current month days\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Normalize today for comparison\n\n    for (let i = 1; i <= daysInMonth; i++) {\n      const date = new Date(year, month, i);\n      const isToday =\n          today.getDate() === i &&\n          today.getMonth() === month &&\n          today.getFullYear() === year;\n\n      const isSaturday = date.getDay() === 6;\n      const isSelected = this.isDateSelected(date);\n\n      // Set hours to 0 for date comparison\n      const compareDate = new Date(date);\n      compareDate.setHours(0, 0, 0, 0);\n      const isFuture = compareDate > today;\n\n      // Check if day should be disabled\n      let isDisabled = false;\n\n      // If futureSaturdaysOnly is enabled, disable all non-Saturday days\n      // and all Saturdays that are in the past\n      if (this.options.futureSaturdaysOnly) {\n        isDisabled = !(isSaturday && isFuture);\n      }\n\n      // Apply min date restriction\n      if (this.options.minDate) {\n        const minDate = new Date(this.options.minDate);\n        minDate.setHours(0, 0, 0, 0);\n        if (compareDate < minDate) isDisabled = true;\n      }\n\n      // Apply max date restriction\n      if (this.options.maxDate) {\n        const maxDate = new Date(this.options.maxDate);\n        maxDate.setHours(0, 0, 0, 0);\n        if (compareDate > maxDate) isDisabled = true;\n      }\n\n      const classes = [\n        'day-item',\n        isToday ? 'today' : '',\n        isSelected ? 'selected' : '',\n        isDisabled ? 'disabled' : '',\n        isSaturday ? 'saturday' : ''\n      ].filter(Boolean).join(' ');\n\n      // Add a data attribute to indicate if the day is clickable\n      const clickableAttr = isDisabled ? '' : 'data-clickable=\"true\"';\n\n      daysHtml += `<div class=\"${classes}\" ${clickableAttr} data-date=\"${year}-${month+1}-${i}\">${i}</div>`;\n    }\n\n    // Next month days\n    const daysFromNextMonth = 42 - (prevMonthDays + daysInMonth);\n    for (let i = 1; i <= daysFromNextMonth; i++) {\n      daysHtml += `<div class=\"day-item other-month disabled\">${i}</div>`;\n    }\n\n    daysHtml += '</div>';\n\n    // Combine all parts\n    let html = yearsHtml + navHtml + daysHeaderHtml + daysHtml;\n\n    // If multiple selection is enabled, add the selection info\n    if (this.options.multiple && this.selectedDates.length > 0) {\n      html += this.renderSelectedDates();\n    }\n\n    return html;\n  }\n\n  // Render month selection mode\n  renderMonthMode() {\n    const year = this.currentDate.getFullYear();\n\n    // Create year selector\n    const yearsHtml = this.renderYearSelector(year);\n\n    // Create months grid\n    let monthsHtml = '<div class=\"datepicker-month-container\">';\n\n    for (let i = 0; i < 12; i++) {\n      const isSelected = this.isMonthSelected(i, year);\n      // Check if month is selectable based on min/max date\n      const isSelectable = this.isMonthSelectable(i, year);\n\n      const classes = [\n        'month-item',\n        isSelected ? 'selected' : '',\n        !isSelectable ? 'disabled' : ''\n      ].filter(Boolean).join(' ');\n\n      const monthAttrs = isSelectable ? `data-month=\"${i}\" data-year=\"${year}\"` : '';\n\n      monthsHtml += `<div class=\"${classes}\" ${monthAttrs}>${this.options.monthNames[i]}</div>`;\n    }\n\n    monthsHtml += '</div>';\n\n    // Combine all parts\n    let html = yearsHtml + monthsHtml;\n\n    // If multiple selection is enabled, add the selection info\n    if (this.options.multiple && this.selectedMonths.length > 0) {\n      html += this.renderSelectedMonths();\n    }\n\n    return html;\n  }\n\n  // Render year selector\n  renderYearSelector(currentYear) {\n    // Get range of years based on min/max date constraints\n    const { startYear, endYear } = this.getYearsRange(currentYear);\n\n    let html = '<div class=\"datepicker-years\">';\n    html += '<select class=\"year-selector\">';\n\n    for (let year = startYear; year <= endYear; year++) {\n      html += `<option value=\"${year}\" ${year === currentYear ? 'selected' : ''}>${year}</option>`;\n    }\n\n    html += '</select>';\n    html += '</div>';\n\n    return html;\n  }\n\n  // Render selected dates info (for multiple selection)\n  renderSelectedDates() {\n    let html = '<div class=\"multi-select-info\">Selected Dates:</div>';\n    html += '<div class=\"selected-list\">';\n\n    this.selectedDates.forEach((date, index) => {\n      const formatted = this.formatDate(date, this.options.dateFormat);\n      html += `\n        <div class=\"selected-item\" data-index=\"${index}\">\n          ${formatted}\n          <button class=\"remove-btn\" data-index=\"${index}\">×</button>\n        </div>\n      `;\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  // Render selected months info (for multiple selection)\n  renderSelectedMonths() {\n    let html = '<div class=\"multi-select-info\">Selected Months:</div>';\n    html += '<div class=\"selected-list\">';\n\n    this.selectedMonths.forEach((item, index) => {\n      const formatted = this.formatDate(new Date(item.year, item.month, 1), this.options.monthFormat);\n      html += `\n        <div class=\"selected-item\" data-index=\"${index}\">\n          ${formatted}\n          <button class=\"remove-btn\" data-index=\"${index}\">×</button>\n        </div>\n      `;\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  // Check if a date is selected\n  isDateSelected(date) {\n    return this.selectedDates.some(selectedDate =>\n        selectedDate.getDate() === date.getDate() &&\n        selectedDate.getMonth() === date.getMonth() &&\n        selectedDate.getFullYear() === date.getFullYear()\n    );\n  }\n\n  // Check if a month is selected\n  isMonthSelected(month, year) {\n    return this.selectedMonths.some(item =>\n        item.month === month && item.year === year\n    );\n  }\n\n  // Check if maximum month selections reached\n  isMaxMonthSelectionsReached() {\n    return (\n        this.options.maxMonthSelection !== null &&\n        this.selectedMonths.length >= this.options.maxMonthSelection\n    );\n  }\n\n  // Attach event listeners\n  attachEvents() {\n    // Tab switching (only if displayType is 'tabs')\n    if (this.options.displayType === 'tabs') {\n      const tabs = this.element.querySelectorAll('.datepicker-tab');\n      tabs.forEach(tab => {\n        tab.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const mode = tab.getAttribute('data-mode');\n          this.options.mode = mode;\n          this.setModeCookie(mode); // Save mode to cookie\n          this.render();\n          this.attachEvents();\n\n          // Trigger a custom event to notify of mode change\n          const event = new CustomEvent('datepickerModeChange', {\n            detail: { mode: mode }\n          });\n          this.element.dispatchEvent(event);\n        });\n      });\n    }\n\n    // Year selector\n    const yearSelector = this.element.querySelector('.year-selector');\n    if (yearSelector) {\n      yearSelector.addEventListener('change', (e) => {\n        this.currentDate.setFullYear(parseInt(e.target.value, 10));\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    // Month navigation\n    const prevMonthBtn = this.element.querySelector('.prev-month');\n    const nextMonthBtn = this.element.querySelector('.next-month');\n\n    if (prevMonthBtn) {\n      prevMonthBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n\n        // Check if going to the previous month is allowed based on min date\n        if (this.options.minDate) {\n          const minDate = new Date(this.options.minDate);\n          const currentMonth = this.currentDate.getMonth();\n          const currentYear = this.currentDate.getFullYear();\n\n          // If we're already at the min date month and year, don't go back further\n          if ((currentMonth === 0 && currentYear === minDate.getFullYear()) ||\n              (currentMonth === minDate.getMonth() && currentYear === minDate.getFullYear())) {\n            return;\n          }\n        }\n\n        this.currentDate.setMonth(this.currentDate.getMonth() - 1);\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    if (nextMonthBtn) {\n      nextMonthBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n\n        // Check if going to the next month is allowed based on max date\n        if (this.options.maxDate) {\n          const maxDate = new Date(this.options.maxDate);\n          const currentMonth = this.currentDate.getMonth();\n          const currentYear = this.currentDate.getFullYear();\n\n          // If we're already at the max date month and year, don't go forward further\n          if ((currentMonth === 11 && currentYear === maxDate.getFullYear()) ||\n              (currentMonth === maxDate.getMonth() && currentYear === maxDate.getFullYear())) {\n            return;\n          }\n        }\n\n        this.currentDate.setMonth(this.currentDate.getMonth() + 1);\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    // Day selection\n    if (this.options.mode === 'day') {\n      // Only select clickable days (those with data-clickable attribute)\n      const dayItems = this.element.querySelectorAll('.day-item[data-clickable=\"true\"]');\n      dayItems.forEach(day => {\n        day.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const dateStr = day.getAttribute('data-date');\n          if (dateStr) {\n            const [year, month, date] = dateStr.split('-').map(Number);\n            const selectedDate = new Date(year, month - 1, date);\n\n            if (this.options.multiple) {\n              // If multiple selection is enabled\n              const index = this.selectedDates.findIndex(d =>\n                  d.getDate() === selectedDate.getDate() &&\n                  d.getMonth() === selectedDate.getMonth() &&\n                  d.getFullYear() === selectedDate.getFullYear()\n              );\n\n              if (index === -1) {\n                // Add to selection\n                this.selectedDates.push(selectedDate);\n              } else {\n                // Remove from selection\n                this.selectedDates.splice(index, 1);\n              }\n\n              this.render();\n              this.attachEvents();\n            } else {\n              // Single selection\n              this.selectedDates = [selectedDate];\n\n              // Create an event to notify that a date has been selected and applied\n              const event = new CustomEvent('datepickerApply', {\n                detail: {\n                  mode: 'day',\n                  selectedDates: this.selectedDates,\n                  selectedMonths: []\n                }\n              });\n              this.element.dispatchEvent(event);\n\n              // Update input value if available\n              this.updateInputValue();\n\n              // Hide the picker\n              this.hide();\n\n              // Call callback if provided\n              if (this.options.onDateChange) {\n                this.options.onDateChange(this.selectedDates[0]);\n              }\n            }\n          }\n        });\n      });\n    }\n\n    // Month selection\n    if (this.options.mode === 'month') {\n      const monthItems = this.element.querySelectorAll('.month-item:not(.disabled)');\n      monthItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const month = parseInt(item.getAttribute('data-month'), 10);\n          const year = parseInt(item.getAttribute('data-year'), 10);\n\n          if (this.options.multiple) {\n            // If multiple selection is enabled\n            const index = this.selectedMonths.findIndex(m =>\n                m.month === month && m.year === year\n            );\n\n            if (index === -1) {\n              // Check if adding the month would exceed the maximum allowed\n              if (this.options.maxMonthSelection && this.selectedMonths.length >= this.options.maxMonthSelection) {\n                // If max reached, remove the oldest selection before adding new one\n                this.selectedMonths.shift();\n              }\n\n              // Add to selection\n              this.selectedMonths.push({ month, year });\n            } else {\n              // Remove from selection\n              this.selectedMonths.splice(index, 1);\n            }\n          } else {\n            // Single selection\n            this.selectedMonths = [{ month, year }];\n\n            // Also update selected dates to first day of month\n            this.selectedDates = [new Date(year, month, 1)];\n          }\n\n          this.render();\n          this.attachEvents();\n\n          // In month mode, we don't trigger the onDateChange callback\n          // until the Apply button is clicked - we just highlight the selection\n        });\n      });\n    }\n\n    // Remove buttons for multi-select\n    const removeButtons = this.element.querySelectorAll('.remove-btn');\n    removeButtons.forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent bubbling to parent\n        const index = parseInt(btn.getAttribute('data-index'), 10);\n\n        if (this.options.mode === 'day') {\n          this.selectedDates.splice(index, 1);\n        } else {\n          this.selectedMonths.splice(index, 1);\n        }\n\n        this.render();\n        this.attachEvents();\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          if (this.options.mode === 'day') {\n            this.options.onDateChange(this.options.multiple ? this.selectedDates : this.selectedDates[0]);\n          } else {\n            const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            this.options.onDateChange(this.options.multiple ? dates : dates[0]);\n          }\n        }\n      });\n    });\n\n    // Clear button\n    const clearBtn = this.element.querySelector('.datepicker-btn.clear');\n    if (clearBtn) {\n      clearBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n        this.selectedDates = [];\n        this.selectedMonths = [];\n        this.render();\n        this.attachEvents();\n\n        // Update input value if available\n        if (this.inputElement) {\n          this.inputElement.value = '';\n        }\n\n        // Create a custom event for clearing\n        const event = new CustomEvent('datepickerClear');\n        this.element.dispatchEvent(event);\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          this.options.onDateChange(null);\n        }\n      });\n    }\n\n    // Apply button\n    const applyBtn = this.element.querySelector('.datepicker-btn.apply');\n    if (applyBtn) {\n      applyBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling\n\n        // Create an event to notify that dates have been applied\n        const event = new CustomEvent('datepickerApply', {\n          detail: {\n            mode: this.options.mode,\n            selectedDates: this.selectedDates,\n            selectedMonths: this.selectedMonths\n          }\n        });\n        this.element.dispatchEvent(event);\n\n        // Update input value if available\n        this.updateInputValue();\n\n        // Hide the picker\n        this.hide();\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          if (this.options.mode === 'day') {\n            // In day mode, only call if we have selections\n            if (this.selectedDates.length > 0) {\n              this.options.onDateChange(this.options.multiple ? this.selectedDates : this.selectedDates[0]);\n            } else {\n              this.options.onDateChange(null);\n            }\n          } else {\n            // In month mode, convert month selections to dates (1st of each month)\n            if (this.selectedMonths.length > 0) {\n              const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n              this.options.onDateChange(this.options.multiple ? dates : dates[0]);\n            } else {\n              this.options.onDateChange(null);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Public methods\n   */\n\n  /**\n   * Set date picker mode\n   * @param {string} mode - 'day' or 'month'\n   */\n  setMode(mode) {\n    if (mode === 'day' || mode === 'month') {\n      this.options.mode = mode;\n      if (this.options.displayType === 'tabs') {\n        this.setModeCookie(mode);\n      }\n      this.render();\n      this.attachEvents();\n      this.updateInputValue();\n    }\n    return this;\n  }\n\n  /**\n   * Set display type\n   * @param {string} type - 'tabs', 'day', or 'month'\n   */\n  setDisplayType(type) {\n    if (type === 'tabs' || type === 'day' || type === 'month') {\n      this.options.displayType = type;\n\n      // If not tabs, force mode to match displayType\n      if (type !== 'tabs') {\n        this.options.mode = type;\n      }\n\n      // Re-render picker\n      this.render();\n      this.attachEvents();\n    }\n    return this;\n  }\n\n  /**\n   * Set selected date(s)\n   * @param {Date|Date[]|null} date - Date or array of dates to select\n   */\n  setDate(date) {\n    if (Array.isArray(date)) {\n      this.selectedDates = date.map(d => new Date(d));\n\n      // Also update month selection if in month mode\n      this.selectedMonths = date.map(d => ({\n        month: new Date(d).getMonth(),\n        year: new Date(d).getFullYear()\n      }));\n    } else if (date) {\n      this.selectedDates = [new Date(date)];\n\n      // Also update month selection if in month mode\n      const d = new Date(date);\n      this.selectedMonths = [{\n        month: d.getMonth(),\n        year: d.getFullYear()\n      }];\n    } else {\n      this.selectedDates = [];\n      this.selectedMonths = [];\n    }\n\n    this.render();\n    this.attachEvents();\n    this.updateInputValue();\n\n    return this;\n  }\n\n  /**\n   * Set max month selection limit\n   * @param {number|null} limit - Max number of months that can be selected\n   */\n  setMaxMonthSelection(limit) {\n    this.options.maxMonthSelection = limit;\n\n    // If current selections exceed the new limit, trim the excess\n    if (limit !== null && this.selectedMonths.length > limit) {\n      // Keep only the most recent selections up to the limit\n      this.selectedMonths = this.selectedMonths.slice(-limit);\n\n      // Also update the selectedDates to match\n      this.selectedDates = this.selectedMonths.map(m =>\n          new Date(m.year, m.month, 1)\n      );\n\n      this.render();\n      this.attachEvents();\n      this.updateInputValue();\n    }\n\n    return this;\n  }\n\n  /**\n   * Get selected date(s)\n   * @returns {Date|Date[]|null} - Selected date(s)\n   */\n  getDate() {\n    if (this.options.mode === 'day') {\n      return this.selectedDates.length === 0 ? null :\n          (this.options.multiple ? this.selectedDates : this.selectedDates[0]);\n    } else {\n      // Convert month selections to dates (1st of each month)\n      const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n      return dates.length === 0 ? null :\n          (this.options.multiple ? dates : dates[0]);\n    }\n  }\n\n  /**\n   * Enable/disable multiple selection\n   * @param {boolean} enable - Whether to enable multiple selection\n   */\n  setMultiple(enable) {\n    this.options.multiple = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n\n  /**\n   * Set date format\n   * @param {string} format - Format string\n   */\n  setDateFormat(format) {\n    this.options.dateFormat = format;\n    this.updateInputValue();\n    return this;\n  }\n\n  /**\n   * Set month format\n   * @param {string} format - Format string\n   */\n  setMonthFormat(format) {\n    this.options.monthFormat = format;\n    this.updateInputValue();\n    return this;\n  }\n\n  /**\n   * Set min date\n   * @param {Date|null} date - Minimum selectable date\n   */\n  setMinDate(date) {\n    this.options.minDate = date ? new Date(date) : null;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n\n  /**\n   * Set max date\n   * @param {Date|null} date - Maximum selectable date\n   */\n  setMaxDate(date) {\n    this.options.maxDate = date ? new Date(date) : null;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Destroy the datepicker instance and clean up\n   */\n  destroy() {\n    // Remove event listeners from input\n    if (this.inputElement) {\n      const newInputElement = this.inputElement.cloneNode(true);\n      this.inputElement.parentNode.replaceChild(newInputElement, this.inputElement);\n    }\n    \n    // Remove the container element from DOM\n    if (this.containerElement && this.containerElement.parentNode) {\n      this.containerElement.parentNode.removeChild(this.containerElement);\n    }\n    \n    // Clean up references\n    this.element = null;\n    this.inputElement = null;\n    this.containerElement = null;\n    this.instances = [];\n  }\n}\n\n// Create global reference\nwindow.DatepickerTabs = DatepickerTabs;"]}