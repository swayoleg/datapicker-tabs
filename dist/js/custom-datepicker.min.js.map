{"version":3,"sources":["custom-datepicker.js"],"names":["DatepickerTabs","_createClass","selector","_this","this","options","arguments","length","undefined","defaults","_classCallCheck","mode","displayType","multipleDays","multipleMonths","maxMonthSelection","startDate","Date","minDate","maxDate","futureSaturdaysOnly","onDateChange","monthNames","dayNames","cookieName","dateFormat","position","zIndex","instances","document","querySelectorAll","inputElement","index","instanceOptions","_objectSpread","instanceId","concat","now","push","_createInstance","monthFormat","elements","error","HTMLElement","console","containerId","containerElement","createElement","id","body","appendChild","element","classList","add","selectedDates","selectedMonths","isVisible","month","getMonth","year","getFullYear","restoreModeFromCookie","key","value","DatapickerTabs","date","format","day","init","getDate","replace","toString","padStart","substr","container","inputRect","containerHeight","containerWidth","windowHeight","scrollLeft","scrollTop","left","top","querySelector","getBoundingClientRect","offsetHeight","offsetWidth","window","innerHeight","bottom","pageXOffset","pageYOffset","documentElement","formatDate","right","showOnTop","style","render","attachEvents","setupInputElement","hide","addEventListener","e","_this2","contains","target","_this3","updateInputValue","stopPropagation","show","getAttribute","setAttribute","m","_this4","formattedDates","map","d","join","formattedMonths","event","_this5","display","setTimeout","positionPicker","resizeHandler","CustomEvent","dispatchEvent","expiryDate","setDate","cookie","toUTCString","name","decodeURIComponent","split","i","trim","indexOf","substring","savedMode","getModeCookie","maxYear","minYear","Math","max","startYear","cookies","decodedCookie","endYear","minMonth","getYearsRange","currentYear","maxMonth","title","textContent","tabsUI","content","className","monthTab","dayTab","renderMonthMode","innerHTML","remove","renderDayMode","currentDate","daysInMonth","prevMonthDays","getDay","yearsHtml","renderYearSelector","navHtml","daysHeaderHtml","firstDayOfMonth","daysHtml","today","prevMonth","prevMonthYear","daysInPrevMonth","isSaturday","isSelected","isDateSelected","setHours","compareDate","isDisabled","classes","isToday","filter","clickableAttr","daysFromNextMonth","html","renderSelectedDates","currentMonth","monthsHtml","isMonthSelected","isSelectable","isMonthSelectable","monthAttrs","Boolean","renderSelectedMonths","_this$getYearsRange","_this6","forEach","formatted","_this7","some","selectedDate","isMaxMonthSelectionsReached","_this8","item","setModeCookie","dayItems","monthItems","prevMonthBtn","tab","yearSelector","setFullYear","parseInt","nextMonthBtn","setMonth","_dateStr$split$map2","dateStr","splice","_slicedToArray","Number","selectedEl","findIndex","di","dayStr","selected","detail","shift","mi","btn","clearBtn","multiple","dates","applyBtn","type","Array","isArray","limit","setMaxMonthSelection","slice","enable","setMultipleDays","setMonthFormat","newInputElement","cloneNode","parentNode","replaceChild","removeChild"],"mappings":"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","file":"custom-datepicker.min.js","sourcesContent":["/**\n * DatepickerTabs\n *\n * A versatile date picker with day and month selection modes,\n * multiple selection support, and various formatting options.\n *\n * @version 1.2.0\n *\n * FEATURES:\n * - Day and Month selection modes\n * - Single or multiple selection for both days and months\n * - Format customization\n * - Min/Max date constraints\n * - Max month selection limit\n * - Display type options: 'tabs', 'day', or 'month'\n * - Saturday-only selection for fishing venues\n * - Cookie-based mode persistence\n * - Tooltip overlay positioning\n * - Mobile-friendly design\n * - Automatic container creation\n * - Support for multiple instances with class selectors\n *\n * USAGE:\n *\n * 1. Basic initialization:\n * ```javascript\n * // Initialize on a single input with ID\n * const picker = new DatepickerTabs('#date-input');\n * \n * // Initialize on multiple inputs with class\n * const pickers = new DatepickerTabs('.date-input-class');\n * ```\n *\n * 2. With options:\n * ```javascript\n * const picker = new DatepickerTabs('.date-input', {\n *   mode: 'month',\n *   multipleDays: false,  // Single day selection\n *   multipleMonths: true, // Multiple month selection\n *   dateFormat: 'DD/MM/YYYY',\n *   displayType: 'tabs', // 'tabs', 'day', or 'month'\n *   maxMonthSelection: 6, // Limit to select max 6 months\n *   maxDate: new Date(2026, 11, 31), // Max selectable date\n *   futureSaturdaysOnly: true,\n *   onDateChange: function(date) {\n *     console.log('Selected date:', date);\n *   }\n * });\n * ```\n *\n * 3. Methods:\n * ```javascript\n * // Set date programmatically\n * picker.setDate(new Date());\n *\n * // Get currently selected date(s)\n * const date = picker.getDate();\n *\n * // Switch mode\n * picker.setMode('month');\n *\n * // Enable/disable multiple day selection\n * picker.setMultipleDays(true);\n * \n * // Enable/disable multiple month selection\n * picker.setMultipleMonths(true);\n * \n * // Enable both multiple days and months\n * picker.setMultiple(true);\n * ```\n */\nclass DatepickerTabs {\n  constructor(selector, options = {}) {\n    // Define default options\n    const defaults = {\n      mode: 'day', // 'day' or 'month'\n      displayType: 'tabs', // 'tabs', 'day', or 'month' - controls if tabs should be shown\n      multipleDays: false, // Allow multiple day selection\n      multipleMonths: false, // Allow multiple month selection\n      maxMonthSelection: null, // Maximum number of months that can be selected (when multipleMonths is true)\n      startDate: new Date(),\n      minDate: null,\n      maxDate: null,\n      futureSaturdaysOnly: false, // Option for day mode to only enable Saturdays in the future\n      onDateChange: null, // Callback when date(s) change\n      monthNames: [\n        'January', 'February', 'March', 'April', 'May', 'June',\n        'July', 'August', 'September', 'October', 'November', 'December'\n      ],\n      dayNames: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n      cookieName: 'datepickerTabsMode', // Store mode in cookie\n      dateFormat: 'DD MMM YYYY', // Default format for display\n      monthFormat: 'MMM YYYY', // Default format for month display\n      position: 'bottom', // 'bottom' or 'top' - default position relative to input\n      zIndex: 9999, // z-index for the picker container\n      containerId: '', // Custom container ID to render calendar (if not provided, one will be generated)\n    };\n\n    // Merge default options with provided options\n    this.options = { ...defaults, ...options };\n    \n    // Store instance references \n    this.instances = [];\n    \n    // Check if selector refers to multiple elements\n    if (typeof selector === 'string') {\n      const elements = document.querySelectorAll(selector);\n      \n      // If multiple elements found, initialize on each one\n      if (elements.length > 1) {\n        elements.forEach((inputElement, index) => {\n          const instanceOptions = {...this.options};\n          // Create a unique container ID for each instance\n          const instanceId = `datepicker-container-${Date.now()}-${index}`;\n          this.instances.push(this._createInstance(inputElement, instanceOptions, instanceId));\n        });\n        \n        return this.instances;\n      } else if (elements.length === 1) {\n        // Single element - use it as input element\n        this.inputElement = elements[0];\n      } else {\n        console.error('DatapickerTabs: No elements found with selector:', selector);\n        return;\n      }\n    } else if (selector instanceof HTMLElement) {\n      // If an actual element is passed, use it directly\n      this.inputElement = selector;\n    } else {\n      console.error('DatapickerTabs: Invalid selector or element:', selector);\n      return;\n    }\n    \n    // Create container element for this instance\n    const containerId = this.options.containerId || `datepicker-container-${Date.now()}`;\n    this.containerId = containerId;\n    \n    // Create container element and add it to the DOM\n    this.containerElement = document.createElement('div');\n    this.containerElement.id = containerId;\n    this.containerElement.className = 'datepicker-tabs-container';\n    document.body.appendChild(this.containerElement);\n    \n    // Set the element where the datepicker will be rendered\n    this.element = this.containerElement;\n\n    // Add the wrapper class to the element for CSS scoping\n    this.element.classList.add('datepicker-tabs');\n\n    // Initialize properties\n    this.currentDate = new Date(this.options.startDate || new Date());\n    this.selectedDates = this.options.startDate ? [new Date(this.options.startDate)] : [];\n    this.selectedMonths = [];\n    this.isVisible = false;\n\n    // If displayType is 'day' or 'month', force the mode to match\n    if (this.options.displayType === 'day' || this.options.displayType === 'month') {\n      this.options.mode = this.options.displayType;\n    }\n\n    // If month mode and a start date is provided, extract the month and year\n    if (this.options.mode === 'month' && this.options.startDate) {\n      const startDate = new Date(this.options.startDate);\n      this.selectedMonths.push({\n        month: startDate.getMonth(),\n        year: startDate.getFullYear()\n      });\n    }\n\n    // Try to restore mode from cookie (only if displayType is 'tabs')\n    if (this.options.displayType === 'tabs') {\n      this.restoreModeFromCookie();\n    }\n\n    // Initialize the datepicker\n    this.init();\n  }\n\n  /**\n   * Create a datepicker instance for a specific input element\n   * @private\n   */\n  _createInstance(inputElement, options, containerId) {\n    // Create a new options object with the input element\n    const instanceOptions = {...options, containerId};\n    \n    // Create a new instance and return it\n    return new DatapickerTabs(inputElement, instanceOptions);\n  }\n\n  /**\n   * Format a date according to the specified format\n   * Supports:\n   * - DD: Day of month with leading zero\n   * - D: Day of month without leading zero\n   * - MMM: Month name short (Jan, Feb, etc.)\n   * - MMMM: Month name full (January, February, etc.)\n   * - MM: Month number with leading zero\n   * - M: Month number without leading zero\n   * - YYYY: Full year (2023)\n   * - YY: Short year (23)\n   */\n  formatDate(date, format) {\n    if (!date) return '';\n\n    const day = date.getDate();\n    const month = date.getMonth();\n    const year = date.getFullYear();\n\n    // Replace format tokens with actual values\n    return format\n        .replace(/DD/g, day.toString().padStart(2, '0'))\n        .replace(/D/g, day.toString())\n        .replace(/MMMM/g, this.options.monthNames[month])\n        .replace(/MMM/g, this.options.monthNames[month].substr(0, 3))\n        .replace(/MM/g, (month + 1).toString().padStart(2, '0'))\n        .replace(/M/g, (month + 1).toString())\n        .replace(/YYYY/g, year.toString())\n        .replace(/YY/g, year.toString().substr(2, 2));\n  }\n\n  /**\n   * Position the datepicker relative to the input element\n   * Adjusts to stay in viewport\n   */\n  positionPicker() {\n    if (!this.inputElement) return;\n\n    const container = this.element.querySelector('.custom-datepicker-container');\n    if (!container) return;\n\n    // Get input position and dimensions\n    const inputRect = this.inputElement.getBoundingClientRect();\n    const containerHeight = container.offsetHeight;\n    const containerWidth = container.offsetWidth;\n    const windowHeight = window.innerHeight;\n    const windowWidth = window.innerWidth;\n\n    // Check if there's enough space below\n    const spaceBelow = windowHeight - inputRect.bottom;\n    const showOnTop = spaceBelow < containerHeight && inputRect.top > containerHeight;\n\n    // Calculate scroll offset for initial positioning\n    const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;\n    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n\n    // Position horizontally - align with input field left edge\n    let left = inputRect.left + scrollLeft;\n\n    // Ensure the picker doesn't go off-screen to the right\n    if (left + containerWidth > windowWidth + scrollLeft) {\n      left = (inputRect.right - containerWidth) + scrollLeft;\n    }\n\n    // Ensure the picker doesn't go off-screen to the left\n    if (left < scrollLeft) {\n      left = scrollLeft + 5;\n    }\n\n    // Position vertically based on available space\n    let top;\n    if (showOnTop || this.options.position === 'top') {\n      // Position above the input\n      top = inputRect.top - containerHeight + scrollTop;\n\n      // If not enough space above, position below instead\n      if (top < scrollTop) {\n        top = inputRect.bottom + scrollTop;\n      }\n    } else {\n      // Position below the input by default\n      top = inputRect.bottom + scrollTop;\n\n      // If not enough space below, position above if possible\n      if (top + containerHeight > windowHeight + scrollTop && inputRect.top > containerHeight) {\n        top = inputRect.top - containerHeight + scrollTop;\n      }\n    }\n\n    // Use fixed positioning with coordinates relative to viewport\n    container.style.position = 'absolute';\n    container.style.top = `${top}px`;\n    container.style.left = `${left}px`;\n    container.style.zIndex = this.options.zIndex;\n  }\n\n  /**\n   * Initialize the datepicker\n   */\n  init() {\n    this.render();\n    this.attachEvents();\n\n    // Set up input element if provided\n    if (this.inputElement) {\n      this.setupInputElement();\n    }\n\n    // Initially hide the picker\n    this.hide();\n\n    // Add document click handler to close when clicking outside\n    document.addEventListener('click', (e) => {\n      if (this.isVisible &&\n          !this.element.contains(e.target) &&\n          (!this.inputElement || !this.inputElement.contains(e.target))) {\n        this.hide();\n      }\n    });\n  }\n\n  /**\n   * Setup input element events\n   */\n  setupInputElement() {\n    // Update input with initial date if available\n    this.inputElement.classList.add('datepicker-input');\n\n    this.updateInputValue();\n\n    // Add click handler to show the picker\n    this.inputElement.addEventListener('click', (e) => {\n      e.stopPropagation();\n      if (this.isVisible) {\n        this.hide();\n      } else {\n        this.show();\n      }\n    });\n\n    // Make input readonly to prevent keyboard input\n    this.inputElement.setAttribute('readonly', 'readonly');\n\n    // Add placeholder if not already set\n    if (!this.inputElement.getAttribute('placeholder')) {\n      this.inputElement.setAttribute('placeholder', 'Select a date');\n    }\n  }\n\n  /**\n   * Update input element with formatted date value\n   */\n  updateInputValue() {\n    if (!this.inputElement) return;\n\n    if (this.options.mode === 'day') {\n      if (this.selectedDates.length === 0) {\n        this.inputElement.value = '';\n      } else if (this.options.multipleDays) {\n        const formattedDates = this.selectedDates.map(d =>\n            this.formatDate(d, this.options.dateFormat)\n        );\n        this.inputElement.value = formattedDates.join(', ');\n      } else {\n        this.inputElement.value = this.formatDate(\n            this.selectedDates[0],\n            this.options.dateFormat\n        );\n      }\n    } else {\n      if (this.selectedMonths.length === 0) {\n        this.inputElement.value = '';\n      } else if (this.options.multipleMonths) {\n        const formattedMonths = this.selectedMonths.map(m =>\n            this.formatDate(new Date(m.year, m.month, 1), this.options.monthFormat)\n        );\n        this.inputElement.value = formattedMonths.join(', ');\n      } else {\n        const m = this.selectedMonths[0];\n        this.inputElement.value = this.formatDate(\n            new Date(m.year, m.month, 1),\n            this.options.monthFormat\n        );\n      }\n    }\n  }\n\n  /**\n   * Show the datepicker\n   */\n  show() {\n    if (this.isVisible) return;\n\n    // Show the container\n    const container = this.element.querySelector('.custom-datepicker-container');\n    if (container) {\n      container.style.display = 'block';\n      this.isVisible = true;\n\n      // Position the picker with a slight delay to ensure it's rendered\n      setTimeout(() => {\n        this.positionPicker();\n      }, 0);\n\n      // Add window resize handler (but not scroll handler)\n      this.resizeHandler = () => {\n        if (this.isVisible) {\n          this.positionPicker();\n        }\n      };\n\n      window.addEventListener('resize', this.resizeHandler);\n\n      // Trigger a custom event\n      const event = new CustomEvent('datepickerShow');\n      this.element.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Hide the datepicker\n   */\n  hide() {\n    if (!this.isVisible && !this.element.querySelector('.custom-datepicker-container')) return;\n\n    // Hide the container\n    const container = this.element.querySelector('.custom-datepicker-container');\n    if (container) {\n      container.style.display = 'none';\n      this.isVisible = false;\n\n      // Remove resize event listener\n      if (this.resizeHandler) {\n        window.removeEventListener('resize', this.resizeHandler);\n      }\n\n      // Trigger a custom event\n      const event = new CustomEvent('datepickerHide');\n      this.element.dispatchEvent(event);\n    }\n  }\n\n  // Set cookie for mode persistence\n  setModeCookie(mode) {\n    if (this.options.displayType !== 'tabs') return; // Only use cookies in tabs mode\n\n    const expiryDate = new Date();\n    expiryDate.setDate(expiryDate.getDate() + 7); // Cookie expires in 7 days\n    document.cookie = `${this.options.cookieName}=${mode};expires=${expiryDate.toUTCString()};path=/`;\n  }\n\n  // Get mode from cookie\n  getModeCookie() {\n    const name = this.options.cookieName + \"=\";\n    const decodedCookie = decodeURIComponent(document.cookie);\n    const cookies = decodedCookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n      let cookie = cookies[i].trim();\n      if (cookie.indexOf(name) === 0) {\n        return cookie.substring(name.length, cookie.length);\n      }\n    }\n    return null;\n  }\n\n  // Restore mode from cookie if available\n  restoreModeFromCookie() {\n    const savedMode = this.getModeCookie();\n    if (savedMode && (savedMode === 'day' || savedMode === 'month')) {\n      this.options.mode = savedMode;\n    }\n  }\n\n  /**\n   * Get years range for year selector based on min/max date constraints\n   */\n  getYearsRange(currentYear) {\n    let startYear = currentYear - 5;\n    let endYear = currentYear + 5;\n\n    // Apply min date constraint\n    if (this.options.minDate) {\n      const minYear = this.options.minDate.getFullYear();\n      startYear = Math.max(startYear, minYear);\n    }\n\n    // Apply max date constraint\n    if (this.options.maxDate) {\n      const maxYear = this.options.maxDate.getFullYear();\n      endYear = Math.min(endYear, maxYear);\n    }\n\n    return { startYear, endYear };\n  }\n\n  /**\n   * Check if a month is selectable based on min/max date constraints\n   */\n  isMonthSelectable(month, year) {\n    // Check for min date constraint\n    if (this.options.minDate) {\n      const minDate = new Date(this.options.minDate);\n      const minYear = minDate.getFullYear();\n      const minMonth = minDate.getMonth();\n\n      if (year < minYear || (year === minYear && month < minMonth)) {\n        return false;\n      }\n    }\n\n    // Check for max date constraint\n    if (this.options.maxDate) {\n      const maxDate = new Date(this.options.maxDate);\n      const maxYear = maxDate.getFullYear();\n      const maxMonth = maxDate.getMonth();\n\n      if (year > maxYear || (year === maxYear && month > maxMonth)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // Render the datepicker UI\n  render() {\n    // Check if the container already exists\n    let container = this.element.querySelector('.custom-datepicker-container');\n\n    if (!container) {\n      // First time rendering - create the full container\n      container = document.createElement('div');\n      container.className = 'custom-datepicker-container';\n\n      // Add header\n      container.innerHTML = `\n        <div class=\"datepicker-header\">\n          <h3 class=\"datepicker-title\">Select ${this.options.mode === 'day' ? 'Date' : 'Month'}</h3>\n        </div>\n      `;\n\n      // Add tabs only if displayType is tabs\n      if (this.options.displayType === 'tabs') {\n        container.innerHTML += `\n          <div class=\"datepicker-tabs-ui\">\n            <button class=\"datepicker-tab ${this.options.mode === 'day' ? 'active' : ''}\" data-mode=\"day\">Specific Date</button>\n            <button class=\"datepicker-tab ${this.options.mode === 'month' ? 'active' : ''}\" data-mode=\"month\">Whole Month</button>\n          </div>\n        `;\n      }\n\n      // Create content based on mode\n      const content = document.createElement('div');\n      content.className = 'datepicker-content';\n\n      if (this.options.mode === 'day') {\n        content.innerHTML = this.renderDayMode();\n      } else {\n        content.innerHTML = this.renderMonthMode();\n      }\n\n      container.appendChild(content);\n\n      // Add footer with buttons\n      container.innerHTML += `\n        <div class=\"datepicker-footer\">\n          <button class=\"datepicker-btn clear\">Clear</button>\n          <button class=\"datepicker-btn apply\">Apply</button>\n        </div>\n      `;\n\n      this.element.appendChild(container);\n    } else {\n      // Update only what's needed\n      const title = container.querySelector('.datepicker-title');\n      if (title) {\n        title.textContent = `Select ${this.options.mode === 'day' ? 'Date' : 'Month'}`;\n      }\n\n      // Update tabs only if they are present\n      const tabsUI = container.querySelector('.datepicker-tabs-ui');\n      if (tabsUI) {\n        const dayTab = tabsUI.querySelector('[data-mode=\"day\"]');\n        const monthTab = tabsUI.querySelector('[data-mode=\"month\"]');\n\n        if (dayTab && monthTab) {\n          if (this.options.mode === 'day') {\n            dayTab.classList.add('active');\n            monthTab.classList.remove('active');\n          } else {\n            dayTab.classList.remove('active');\n            monthTab.classList.add('active');\n          }\n        }\n      }\n\n      // Update content\n      const content = container.querySelector('.datepicker-content');\n      if (content) {\n        content.innerHTML = this.options.mode === 'day'\n            ? this.renderDayMode()\n            : this.renderMonthMode();\n      }\n    }\n  }\n\n  // Render day selection mode\n  renderDayMode() {\n    const year = this.currentDate.getFullYear();\n    const month = this.currentDate.getMonth();\n\n    // Get days in the current month\n    const daysInMonth = new Date(year, month + 1, 0).getDate();\n\n    // Get the day of the week of the first day of the month\n    const firstDayOfMonth = new Date(year, month, 1).getDay();\n\n    // Calculate days from previous month to display\n    const prevMonthDays = firstDayOfMonth;\n\n    // Create year selector\n    const yearsHtml = this.renderYearSelector(year);\n\n    // Create month navigation\n    const navHtml = `\n      <div class=\"datepicker-nav\">\n        <button class=\"datepicker-nav-btn prev-month\">&lt;</button>\n        <span>${this.options.monthNames[month]} ${year}</span>\n        <button class=\"datepicker-nav-btn next-month\">&gt;</button>\n      </div>\n    `;\n\n    // Create day names header\n    let daysHeaderHtml = '<div class=\"datepicker-days-container\">';\n    for (let i = 0; i < 7; i++) {\n      daysHeaderHtml += `<div class=\"day-name\">${this.options.dayNames[i]}</div>`;\n    }\n\n    // Create days grid\n    let daysHtml = '';\n\n    // Previous month days\n    const prevMonth = month === 0 ? 11 : month - 1;\n    const prevMonthYear = month === 0 ? year - 1 : year;\n    const daysInPrevMonth = new Date(prevMonthYear, prevMonth + 1, 0).getDate();\n\n    for (let i = 0; i < prevMonthDays; i++) {\n      const day = daysInPrevMonth - prevMonthDays + i + 1;\n      daysHtml += `<div class=\"day-item other-month disabled\">${day}</div>`;\n    }\n\n    // Current month days\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Normalize today for comparison\n\n    for (let i = 1; i <= daysInMonth; i++) {\n      const date = new Date(year, month, i);\n      const isToday =\n          today.getDate() === i &&\n          today.getMonth() === month &&\n          today.getFullYear() === year;\n\n      const isSaturday = date.getDay() === 6;\n      const isSelected = this.isDateSelected(date);\n\n      // Set hours to 0 for date comparison\n      const compareDate = new Date(date);\n      compareDate.setHours(0, 0, 0, 0);\n      const isFuture = compareDate > today;\n\n      // Check if day should be disabled\n      let isDisabled = false;\n\n      // If futureSaturdaysOnly is enabled, disable all non-Saturday days\n      // and all Saturdays that are in the past\n      if (this.options.futureSaturdaysOnly) {\n        isDisabled = !(isSaturday && isFuture);\n      }\n\n      // Apply min date restriction\n      if (this.options.minDate) {\n        const minDate = new Date(this.options.minDate);\n        minDate.setHours(0, 0, 0, 0);\n        if (compareDate < minDate) isDisabled = true;\n      }\n\n      // Apply max date restriction\n      if (this.options.maxDate) {\n        const maxDate = new Date(this.options.maxDate);\n        maxDate.setHours(0, 0, 0, 0);\n        if (compareDate > maxDate) isDisabled = true;\n      }\n\n      const classes = [\n        'day-item',\n        isToday ? 'today' : '',\n        isSelected ? 'selected' : '',\n        isDisabled ? 'disabled' : '',\n        isSaturday ? 'saturday' : ''\n      ].filter(Boolean).join(' ');\n\n      // Add a data attribute to indicate if the day is clickable\n      const clickableAttr = isDisabled ? '' : 'data-clickable=\"true\"';\n\n      daysHtml += `<div class=\"${classes}\" ${clickableAttr} data-date=\"${year}-${month+1}-${i}\">${i}</div>`;\n    }\n\n    // Next month days\n    const daysFromNextMonth = 42 - (prevMonthDays + daysInMonth);\n    for (let i = 1; i <= daysFromNextMonth; i++) {\n      daysHtml += `<div class=\"day-item other-month disabled\">${i}</div>`;\n    }\n\n    daysHtml += '</div>';\n\n    // Combine all parts\n    let html = yearsHtml + navHtml + daysHeaderHtml + daysHtml;\n\n    // If multiple day selection is enabled, add the selection info\n    if (this.options.multipleDays && this.selectedDates.length > 0) {\n      html += this.renderSelectedDates();\n    }\n\n    return html;\n  }\n\n  // Render month selection mode\n  renderMonthMode() {\n    const year = this.currentDate.getFullYear();\n    const currentDate = new Date();\n    const currentMonth = currentDate.getMonth();\n    const currentYear = currentDate.getFullYear();\n\n    // Create year selector\n    const yearsHtml = this.renderYearSelector(year);\n\n    // Create months grid\n    let monthsHtml = '<div class=\"datepicker-month-container\">';\n\n    for (let i = 0; i < 12; i++) {\n      const isSelected = this.isMonthSelected(i, year);\n      // Check if month is selectable based on min/max date\n      const isSelectable = this.isMonthSelectable(i, year);\n      // Check if this is the current month\n      const isThisMonth = (i === currentMonth && year === currentYear);\n\n      const classes = [\n        'month-item',\n        isSelected ? 'selected' : '',\n        isThisMonth ? 'this-month' : '',\n        !isSelectable ? 'disabled' : ''\n      ].filter(Boolean).join(' ');\n\n      const monthAttrs = isSelectable ? `data-month=\"${i}\" data-year=\"${year}\"` : '';\n\n      monthsHtml += `<div class=\"${classes}\" ${monthAttrs}>${this.options.monthNames[i]}</div>`;\n    }\n\n    monthsHtml += '</div>';\n\n    // Combine all parts\n    let html = yearsHtml + monthsHtml;\n\n    // If multiple month selection is enabled, add the selection info\n    if (this.options.multipleMonths && this.selectedMonths.length > 0) {\n      html += this.renderSelectedMonths();\n    }\n\n    return html;\n  }\n\n  // Render year selector\n  renderYearSelector(currentYear) {\n    // Get range of years based on min/max date constraints\n    const { startYear, endYear } = this.getYearsRange(currentYear);\n\n    let html = '<div class=\"datepicker-years\">';\n    html += '<select class=\"year-selector\">';\n\n    for (let year = startYear; year <= endYear; year++) {\n      html += `<option value=\"${year}\" ${year === currentYear ? 'selected' : ''}>${year}</option>`;\n    }\n\n    html += '</select>';\n    html += '</div>';\n\n    return html;\n  }\n\n  // Render selected dates info (for multiple selection)\n  renderSelectedDates() {\n    let html = '<div class=\"multi-select-info\">Selected Dates:</div>';\n    html += '<div class=\"selected-list\">';\n\n    this.selectedDates.forEach((date, index) => {\n      const formatted = this.formatDate(date, this.options.dateFormat);\n      html += `\n        <div class=\"selected-item\" data-index=\"${index}\">\n          ${formatted}\n          <button class=\"remove-btn\" data-index=\"${index}\">×</button>\n        </div>\n      `;\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  // Render selected months info (for multiple selection)\n  renderSelectedMonths() {\n    let html = '<div class=\"multi-select-info\">Selected Months:</div>';\n    html += '<div class=\"selected-list\">';\n\n    this.selectedMonths.forEach((item, index) => {\n      const formatted = this.formatDate(new Date(item.year, item.month, 1), this.options.monthFormat);\n      html += `\n        <div class=\"selected-item\" data-index=\"${index}\">\n          ${formatted}\n          <button class=\"remove-btn\" data-index=\"${index}\">×</button>\n        </div>\n      `;\n    });\n\n    html += '</div>';\n    return html;\n  }\n\n  // Check if a date is selected\n  isDateSelected(date) {\n    return this.selectedDates.some(selectedDate =>\n        selectedDate.getDate() === date.getDate() &&\n        selectedDate.getMonth() === date.getMonth() &&\n        selectedDate.getFullYear() === date.getFullYear()\n    );\n  }\n\n  // Check if a month is selected\n  isMonthSelected(month, year) {\n    return this.selectedMonths.some(item =>\n        item.month === month && item.year === year\n    );\n  }\n\n  // Check if maximum month selections reached\n  isMaxMonthSelectionsReached() {\n    return (\n        this.options.maxMonthSelection !== null &&\n        this.selectedMonths.length >= this.options.maxMonthSelection\n    );\n  }\n\n  // Attach event listeners\n  attachEvents() {\n    // Tab switching (only if displayType is 'tabs')\n    if (this.options.displayType === 'tabs') {\n      const tabs = this.element.querySelectorAll('.datepicker-tab');\n      tabs.forEach(tab => {\n        tab.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const mode = tab.getAttribute('data-mode');\n          this.options.mode = mode;\n          this.setModeCookie(mode); // Save mode to cookie\n          this.render();\n          this.attachEvents();\n\n          // Trigger a custom event to notify of mode change\n          const event = new CustomEvent('datepickerModeChange', {\n            detail: { mode: mode }\n          });\n          this.element.dispatchEvent(event);\n        });\n      });\n    }\n\n    // Year selector\n    const yearSelector = this.element.querySelector('.year-selector');\n    if (yearSelector) {\n      yearSelector.addEventListener('change', (e) => {\n        this.currentDate.setFullYear(parseInt(e.target.value, 10));\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    // Month navigation\n    const prevMonthBtn = this.element.querySelector('.prev-month');\n    const nextMonthBtn = this.element.querySelector('.next-month');\n\n    if (prevMonthBtn) {\n      prevMonthBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n\n        // Check if going to the previous month is allowed based on min date\n        if (this.options.minDate) {\n          const minDate = new Date(this.options.minDate);\n          const currentMonth = this.currentDate.getMonth();\n          const currentYear = this.currentDate.getFullYear();\n\n          // If we're already at the min date month and year, don't go back further\n          if ((currentMonth === 0 && currentYear === minDate.getFullYear()) ||\n              (currentMonth === minDate.getMonth() && currentYear === minDate.getFullYear())) {\n            return;\n          }\n        }\n\n        this.currentDate.setMonth(this.currentDate.getMonth() - 1);\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    if (nextMonthBtn) {\n      nextMonthBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n\n        // Check if going to the next month is allowed based on max date\n        if (this.options.maxDate) {\n          const maxDate = new Date(this.options.maxDate);\n          const currentMonth = this.currentDate.getMonth();\n          const currentYear = this.currentDate.getFullYear();\n\n          // If we're already at the max date month and year, don't go forward further\n          if ((currentMonth === 11 && currentYear === maxDate.getFullYear()) ||\n              (currentMonth === maxDate.getMonth() && currentYear === maxDate.getFullYear())) {\n            return;\n          }\n        }\n\n        this.currentDate.setMonth(this.currentDate.getMonth() + 1);\n        this.render();\n        this.attachEvents();\n      });\n    }\n\n    // Day selection\n    if (this.options.mode === 'day') {\n      // Only select clickable days (those with data-clickable attribute)\n      const dayItems = this.element.querySelectorAll('.day-item[data-clickable=\"true\"]');\n      dayItems.forEach(day => {\n        day.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const dateStr = day.getAttribute('data-date');\n          if (dateStr) {\n            const [year, month, date] = dateStr.split('-').map(Number);\n            const selectedDate = new Date(year, month - 1, date);\n\n            if (this.options.multipleDays) {\n              // If multiple day selection is enabled\n              const index = this.selectedDates.findIndex(d =>\n                  d.getDate() === selectedDate.getDate() &&\n                  d.getMonth() === selectedDate.getMonth() &&\n                  d.getFullYear() === selectedDate.getFullYear()\n              );\n\n              if (index === -1) {\n                // Add to selection\n                this.selectedDates.push(selectedDate);\n              } else {\n                // Remove from selection\n                this.selectedDates.splice(index, 1);\n              }\n\n              // Update the UI to reflect the new selection\n              // Remove 'selected' class from all days with data-clickable\n              dayItems.forEach(di => di.classList.remove('selected'));\n              \n              // Add 'selected' class to selected days\n              this.selectedDates.forEach(selected => {\n                const dayStr = `${selected.getFullYear()}-${selected.getMonth()+1}-${selected.getDate()}`;\n                const selectedEl = this.element.querySelector(`.day-item[data-date=\"${dayStr}\"]`);\n                if (selectedEl) {\n                  selectedEl.classList.add('selected');\n                }\n              });\n\n              this.render();\n              this.attachEvents();\n            } else {\n              // Single selection\n              this.selectedDates = [selectedDate];\n              \n              // Update the UI to reflect the new selection\n              // Remove 'selected' class from all days with data-clickable\n              dayItems.forEach(di => di.classList.remove('selected'));\n              // Add 'selected' class to the clicked day\n              day.classList.add('selected');\n\n              // Create an event to notify that a date has been selected and applied\n              const event = new CustomEvent('datepickerApply', {\n                detail: {\n                  mode: 'day',\n                  selectedDates: this.selectedDates,\n                  selectedMonths: []\n                }\n              });\n              this.element.dispatchEvent(event);\n\n              // Update input value if available\n              this.updateInputValue();\n\n              // Hide the picker\n              this.hide();\n\n              // Call callback if provided\n              if (this.options.onDateChange) {\n                this.options.onDateChange(this.selectedDates[0]);\n              }\n            }\n          }\n        });\n      });\n    }\n\n    // Month selection\n    if (this.options.mode === 'month') {\n      const monthItems = this.element.querySelectorAll('.month-item:not(.disabled)');\n      monthItems.forEach(item => {\n        item.addEventListener('click', (e) => {\n          e.stopPropagation(); // Prevent event bubbling\n          const month = parseInt(item.getAttribute('data-month'), 10);\n          const year = parseInt(item.getAttribute('data-year'), 10);\n\n          if (this.options.multipleMonths) {\n            // If multiple month selection is enabled\n            const index = this.selectedMonths.findIndex(m =>\n                m.month === month && m.year === year\n            );\n\n            if (index === -1) {\n              // Check if adding the month would exceed the maximum allowed\n              if (this.options.maxMonthSelection && this.selectedMonths.length >= this.options.maxMonthSelection) {\n                // If max reached, remove the oldest selection before adding new one\n                this.selectedMonths.shift();\n              }\n\n              // Add to selection\n              this.selectedMonths.push({ month, year });\n            } else {\n              // Remove from selection\n              this.selectedMonths.splice(index, 1);\n            }\n          } else {\n            // Single selection\n            this.selectedMonths = [{ month, year }];\n\n            // Also update selected dates to first day of month\n            this.selectedDates = [new Date(year, month, 1)];\n            \n            // If single month selection, apply immediately and close\n            // Create an event to notify that a month has been selected and applied\n            const event = new CustomEvent('datepickerApply', {\n              detail: {\n                mode: 'month',\n                selectedDates: this.selectedDates,\n                selectedMonths: this.selectedMonths\n              }\n            });\n            this.element.dispatchEvent(event);\n\n            // Update input value if available\n            this.updateInputValue();\n\n            // Hide the picker\n            this.hide();\n\n            // Call callback if provided\n            if (this.options.onDateChange) {\n              this.options.onDateChange(this.selectedDates[0]);\n            }\n            \n            return;\n          }\n\n          // Update the UI to reflect the new selection\n          // Remove 'selected' class from all months\n          monthItems.forEach(mi => mi.classList.remove('selected'));\n          \n          // Add 'selected' class to selected months\n          this.selectedMonths.forEach(selected => {\n            if (selected.year === year) {\n              const selectedEl = this.element.querySelector(`.month-item[data-month=\"${selected.month}\"][data-year=\"${selected.year}\"]`);\n              if (selectedEl) {\n                selectedEl.classList.add('selected');\n              }\n            }\n          });\n\n          this.render();\n          this.attachEvents();\n        });\n      });\n    }\n\n    // Remove buttons for multi-select\n    const removeButtons = this.element.querySelectorAll('.remove-btn');\n    removeButtons.forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent bubbling to parent\n        const index = parseInt(btn.getAttribute('data-index'), 10);\n\n        if (this.options.mode === 'day') {\n          this.selectedDates.splice(index, 1);\n        } else {\n          this.selectedMonths.splice(index, 1);\n        }\n\n        this.render();\n        this.attachEvents();\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          if (this.options.mode === 'day') {\n            this.options.onDateChange(this.options.multiple ? this.selectedDates : this.selectedDates[0]);\n          } else {\n            const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n            this.options.onDateChange(this.options.multiple ? dates : dates[0]);\n          }\n        }\n      });\n    });\n\n    // Clear button\n    const clearBtn = this.element.querySelector('.datepicker-btn.clear');\n    if (clearBtn) {\n      clearBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling to keep the picker open\n        this.selectedDates = [];\n        this.selectedMonths = [];\n        this.render();\n        this.attachEvents();\n\n        // Update input value if available\n        if (this.inputElement) {\n          this.inputElement.value = '';\n        }\n\n        // Create a custom event for clearing\n        const event = new CustomEvent('datepickerClear');\n        this.element.dispatchEvent(event);\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          this.options.onDateChange(null);\n        }\n      });\n    }\n\n    // Apply button\n    const applyBtn = this.element.querySelector('.datepicker-btn.apply');\n    if (applyBtn) {\n      applyBtn.addEventListener('click', (e) => {\n        e.stopPropagation(); // Prevent event bubbling\n\n        // Create an event to notify that dates have been applied\n        const event = new CustomEvent('datepickerApply', {\n          detail: {\n            mode: this.options.mode,\n            selectedDates: this.selectedDates,\n            selectedMonths: this.selectedMonths\n          }\n        });\n        this.element.dispatchEvent(event);\n\n        // Update input value if available\n        this.updateInputValue();\n\n        // Hide the picker\n        this.hide();\n\n        // Call callback if provided\n        if (this.options.onDateChange) {\n          if (this.options.mode === 'day') {\n            // In day mode, only call if we have selections\n            if (this.selectedDates.length > 0) {\n              this.options.onDateChange(this.options.multiple ? this.selectedDates : this.selectedDates[0]);\n            } else {\n              this.options.onDateChange(null);\n            }\n          } else {\n            // In month mode, convert month selections to dates (1st of each month)\n            if (this.selectedMonths.length > 0) {\n              const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n              this.options.onDateChange(this.options.multiple ? dates : dates[0]);\n            } else {\n              this.options.onDateChange(null);\n            }\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Public methods\n   */\n\n  /**\n   * Set date picker mode\n   * @param {string} mode - 'day' or 'month'\n   */\n  setMode(mode) {\n    if (mode === 'day' || mode === 'month') {\n      this.options.mode = mode;\n      if (this.options.displayType === 'tabs') {\n        this.setModeCookie(mode);\n      }\n      this.render();\n      this.attachEvents();\n      this.updateInputValue();\n    }\n    return this;\n  }\n\n  /**\n   * Set display type\n   * @param {string} type - 'tabs', 'day', or 'month'\n   */\n  setDisplayType(type) {\n    if (type === 'tabs' || type === 'day' || type === 'month') {\n      this.options.displayType = type;\n\n      // If not tabs, force mode to match displayType\n      if (type !== 'tabs') {\n        this.options.mode = type;\n      }\n\n      // Re-render picker\n      this.render();\n      this.attachEvents();\n    }\n    return this;\n  }\n\n  /**\n   * Set selected date(s)\n   * @param {Date|Date[]|null} date - Date or array of dates to select\n   */\n  setDate(date) {\n    if (Array.isArray(date)) {\n      this.selectedDates = date.map(d => new Date(d));\n\n      // Also update month selection if in month mode\n      this.selectedMonths = date.map(d => ({\n        month: new Date(d).getMonth(),\n        year: new Date(d).getFullYear()\n      }));\n    } else if (date) {\n      this.selectedDates = [new Date(date)];\n\n      // Also update month selection if in month mode\n      const d = new Date(date);\n      this.selectedMonths = [{\n        month: d.getMonth(),\n        year: d.getFullYear()\n      }];\n    } else {\n      this.selectedDates = [];\n      this.selectedMonths = [];\n    }\n\n    this.render();\n    this.attachEvents();\n    this.updateInputValue();\n\n    return this;\n  }\n\n  /**\n   * Set max month selection limit\n   * @param {number|null} limit - Max number of months that can be selected\n   */\n  setMaxMonthSelection(limit) {\n    this.options.maxMonthSelection = limit;\n\n    // If current selections exceed the new limit, trim the excess\n    if (limit !== null && this.selectedMonths.length > limit) {\n      // Keep only the most recent selections up to the limit\n      this.selectedMonths = this.selectedMonths.slice(-limit);\n\n      // Also update the selectedDates to match\n      this.selectedDates = this.selectedMonths.map(m =>\n          new Date(m.year, m.month, 1)\n      );\n\n      this.render();\n      this.attachEvents();\n      this.updateInputValue();\n    }\n\n    return this;\n  }\n\n  /**\n   * Get selected date(s)\n   * @returns {Date|Date[]|null} - Selected date(s)\n   */\n  getDate() {\n    if (this.options.mode === 'day') {\n      return this.selectedDates.length === 0 ? null :\n          (this.options.multipleDays ? this.selectedDates : this.selectedDates[0]);\n    } else {\n      // Convert month selections to dates (1st of each month)\n      const dates = this.selectedMonths.map(m => new Date(m.year, m.month, 1));\n      return dates.length === 0 ? null :\n          (this.options.multipleMonths ? dates : dates[0]);\n    }\n  }\n\n  /**\n   * Enable/disable multiple days selection\n   * @param {boolean} enable - Whether to enable multiple day selection\n   */\n  setMultipleDays(enable) {\n    this.options.multipleDays = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Enable/disable multiple months selection\n   * @param {boolean} enable - Whether to enable multiple month selection\n   */\n  setMultipleMonths(enable) {\n    this.options.multipleMonths = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Enable/disable multiple selection (both days and months)\n   * @param {boolean} enable - Whether to enable multiple selection\n   */\n  setMultiple(enable) {\n    this.options.multipleDays = !!enable;\n    this.options.multipleMonths = !!enable;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n\n  /**\n   * Set date format\n   * @param {string} format - Format string\n   */\n  setDateFormat(format) {\n    this.options.dateFormat = format;\n    this.updateInputValue();\n    return this;\n  }\n\n  /**\n   * Set month format\n   * @param {string} format - Format string\n   */\n  setMonthFormat(format) {\n    this.options.monthFormat = format;\n    this.updateInputValue();\n    return this;\n  }\n\n  /**\n   * Set min date\n   * @param {Date|null} date - Minimum selectable date\n   */\n  setMinDate(date) {\n    this.options.minDate = date ? new Date(date) : null;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n\n  /**\n   * Set max date\n   * @param {Date|null} date - Maximum selectable date\n   */\n  setMaxDate(date) {\n    this.options.maxDate = date ? new Date(date) : null;\n    this.render();\n    this.attachEvents();\n    return this;\n  }\n  \n  /**\n   * Destroy the datepicker instance and clean up\n   */\n  destroy() {\n    // Remove event listeners from input\n    if (this.inputElement) {\n      const newInputElement = this.inputElement.cloneNode(true);\n      this.inputElement.parentNode.replaceChild(newInputElement, this.inputElement);\n    }\n    \n    // Remove the container element from DOM\n    if (this.containerElement && this.containerElement.parentNode) {\n      this.containerElement.parentNode.removeChild(this.containerElement);\n    }\n    \n    // Clean up references\n    this.element = null;\n    this.inputElement = null;\n    this.containerElement = null;\n    this.instances = [];\n  }\n}\n\n// Create global reference\nwindow.DatepickerTabs = DatepickerTabs;"]}